<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lv blog</title>
  
  <subtitle>越努力，越幸运</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-09T08:21:27.241Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Lv Song</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-行为型模式</title>
    <link href="http://example.com/2022/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-07T03:07:23.000Z</published>
    <updated>2022-09-09T08:21:27.241Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="设计模式-行为型模式"><a href="#设计模式-行为型模式" class="headerlink" title="设计模式-行为型模式"></a>设计模式-行为型模式</h1><h2 id="1、模板模式"><a href="#1、模板模式" class="headerlink" title="1、模板模式"></a>1、模板模式</h2><h3 id="1-1、概念"><a href="#1-1、概念" class="headerlink" title="1.1、概念"></a>1.1、概念</h3><p>Template Method模式也叫模板方法模式，是行为模式之一，它把具有特定步骤算法中的某些必要的处理委让给抽象方法，通过子类继承对抽象方法的不同实现改变整个算法的行为。<span id="more"></span></p><h3 id="1-2、角色和职责"><a href="#1-2、角色和职责" class="headerlink" title="1.2、角色和职责"></a>1.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631aa91116f2c2beb130930f.png"></p><ol><li>AbstractClass：<br>抽象类的父类</li><li>ConcreteClass：<br>具体的实现子类</li><li>templateMethod()：<br>模板方法</li><li>method1()与method2()：<br>具体步骤方法</li></ol><p>Template Method模式一般应用在具有以下条件的应用中：</p><ul><li>具有统一的操作步骤或操作过程</li><li>具有不同的操作细节</li><li>存在多个具有同样操作步骤的应用场景，但某些具体的操作细节却各不相同</li></ul><p><strong>总结：<br>在抽象类中统一操作步骤，并规定好接口；让子类实现接口。这样可以把各个具体的子类和操作步骤接耦合</strong></p><h3 id="1-3、案例"><a href="#1-3、案例" class="headerlink" title="1.3、案例"></a>1.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MakeCar</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeHead</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeBody</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeTail</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:   <span class="comment">//把一组行为 变成 一个模板</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">make</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">makeHead</span>();</span><br><span class="line"><span class="built_in">makeBody</span>();</span><br><span class="line"><span class="built_in">makeTail</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MakeBus</span> : <span class="keyword">public</span> MakeCar</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeHead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;bus 组装 车头&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeBody</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;bus 组装 车身&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeTail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;bus 组装 车尾&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MakeJeep</span> : <span class="keyword">public</span> MakeCar</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeHead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Jeep 组装 车头&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeBody</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Jeep 组装 车身&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeTail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Jeep 组装 车尾&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MakeCar *bus = <span class="keyword">new</span> MakeBus;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bus-&gt;makeHead();</span></span><br><span class="line"><span class="comment">//bus-&gt;makeBody();</span></span><br><span class="line"><span class="comment">//bus-&gt;makeTail();</span></span><br><span class="line">bus-&gt;<span class="built_in">make</span>();</span><br><span class="line"></span><br><span class="line">MakeCar *jeep = <span class="keyword">new</span> MakeJeep;</span><br><span class="line"><span class="comment">//jeep-&gt;makeHead();</span></span><br><span class="line"><span class="comment">//jeep-&gt;makeBody();</span></span><br><span class="line"><span class="comment">//jeep-&gt;makeTail();</span></span><br><span class="line">jeep-&gt;<span class="built_in">make</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> bus;</span><br><span class="line"><span class="keyword">delete</span> jeep;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、命令模式"><a href="#2、命令模式" class="headerlink" title="2、命令模式"></a>2、命令模式</h2><h3 id="2-1、概念"><a href="#2-1、概念" class="headerlink" title="2.1、概念"></a>2.1、概念</h3><p>Command模式也叫命令模式 ，是行为设计模式的一种。Command模式通过被称为<br>Command的类封装了对目标对象的调用行为以及调用参数。</p><blockquote><p>在面向对象的程序设计中，一个对象调用另一个对象，一般情况下的调用过程是：创建目标对象实例；设置调用参数；调用目标对象的方法。<br><strong>但在有些情况下有必要使用一个专门的类对这种调用过程加以封装，我们把这种专门的类称作command类。</strong><br>整个调用过程比较繁杂，或者存在多处这种调用。这时，使用Command类对该调用加以封装，便于功能的再利用。<br>调用前后需要对调用参数进行某些处理。调用前后需要进行某些额外处理，比如日志，缓存，记录历史操作等。 </p></blockquote><h3 id="2-2、角色和职责"><a href="#2-2、角色和职责" class="headerlink" title="2.2、角色和职责"></a>2.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631aae1b16f2c2beb13684df.png"></p><ol><li>Command<br>Command命令的抽象类。</li><li>ConcreteCommand<br>Command的具体实现类。</li><li>Receiver<br>需要被调用的目标对象。</li><li>Invorker<br>通过Invorker执行Command对象。</li></ol><p><strong>适用于：<br>是将一个请求封装为一个对象，从而使你可用不同的请求对客户端进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</strong></p><h3 id="2-3、案例"><a href="#2-3、案例" class="headerlink" title="2.3、案例"></a>2.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vendor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sailbanana</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;卖香蕉&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sailapple</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;卖苹果&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sail</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BananaCommand</span> : <span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BananaCommand</span>(Vendor *v)</span><br><span class="line">&#123;</span><br><span class="line">m_v = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Vendor *<span class="title">getV</span><span class="params">(Vendor *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setV</span><span class="params">(Vendor *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_v = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_v-&gt;<span class="built_in">sailbanana</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Vendor *m_v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleCommand</span> : <span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AppleCommand</span>(Vendor *v)</span><br><span class="line">&#123;</span><br><span class="line">m_v = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Vendor *<span class="title">getV</span><span class="params">(Vendor *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setV</span><span class="params">(Vendor *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_v = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_v-&gt;<span class="built_in">sailapple</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Vendor *m_v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Waiter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Command *<span class="title">getCommand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_command;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setCommand</span><span class="params">(Command *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_command = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_command-&gt;<span class="built_in">sail</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Command *m_command;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdvWaiter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AdvWaiter</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_list = <span class="keyword">new</span> list&lt;Command *&gt;;</span><br><span class="line">m_list-&gt;<span class="built_in">resize</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">AdvWaiter</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setCommands</span><span class="params">(Command *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_list-&gt;<span class="built_in">push_back</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">list&lt;Command *&gt; * <span class="title">getCommands</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (list&lt;Command *&gt;::iterator it=m_list-&gt;<span class="built_in">begin</span>(); it!=m_list-&gt;<span class="built_in">end</span>(); it++ )</span><br><span class="line">&#123;</span><br><span class="line">(*it)-&gt;<span class="built_in">sail</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">list&lt;Command *&gt; *m_list;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小商贩 直接 卖 水果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main25_01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Vendor *v = <span class="keyword">new</span> Vendor;</span><br><span class="line">v-&gt;<span class="built_in">sailapple</span>();</span><br><span class="line">v-&gt;<span class="built_in">sailbanana</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> v;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小商贩 通过命令 卖 水果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main25_02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Vendor *v = <span class="keyword">new</span> Vendor;</span><br><span class="line">AppleCommand *ac = <span class="keyword">new</span> <span class="built_in">AppleCommand</span>(v);</span><br><span class="line">ac-&gt;<span class="built_in">sail</span>();</span><br><span class="line"></span><br><span class="line">BananaCommand *bc = <span class="keyword">new</span> <span class="built_in">BananaCommand</span>(v);</span><br><span class="line">bc-&gt;<span class="built_in">sail</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> bc;</span><br><span class="line"><span class="keyword">delete</span> ac;</span><br><span class="line"><span class="keyword">delete</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小商贩 通过waiter 卖 水果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main25_03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Vendor *v = <span class="keyword">new</span> Vendor;</span><br><span class="line">AppleCommand *ac = <span class="keyword">new</span> <span class="built_in">AppleCommand</span>(v);</span><br><span class="line">BananaCommand *bc = <span class="keyword">new</span> <span class="built_in">BananaCommand</span>(v);</span><br><span class="line"></span><br><span class="line">Waiter *w = <span class="keyword">new</span> Waiter;</span><br><span class="line">w-&gt;<span class="built_in">setCommand</span>(ac);</span><br><span class="line">w-&gt;<span class="built_in">sail</span>();</span><br><span class="line"></span><br><span class="line">w-&gt;<span class="built_in">setCommand</span>(bc);</span><br><span class="line">w-&gt;<span class="built_in">sail</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> w;</span><br><span class="line"><span class="keyword">delete</span> bc;</span><br><span class="line"><span class="keyword">delete</span> ac;</span><br><span class="line"><span class="keyword">delete</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小商贩 通过advwaiter 批量下单 卖水果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main25_04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Vendor *v = <span class="keyword">new</span> Vendor;</span><br><span class="line">AppleCommand *ac = <span class="keyword">new</span> <span class="built_in">AppleCommand</span>(v);</span><br><span class="line">BananaCommand *bc = <span class="keyword">new</span> <span class="built_in">BananaCommand</span>(v);</span><br><span class="line"></span><br><span class="line">AdvWaiter *w = <span class="keyword">new</span> AdvWaiter;</span><br><span class="line">w-&gt;<span class="built_in">setCommands</span>(ac);</span><br><span class="line">w-&gt;<span class="built_in">setCommands</span>(bc);</span><br><span class="line">w-&gt;<span class="built_in">sail</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> w;</span><br><span class="line"><span class="keyword">delete</span> bc;</span><br><span class="line"><span class="keyword">delete</span> ac;</span><br><span class="line"><span class="keyword">delete</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//main25_01();</span></span><br><span class="line"><span class="comment">//main25_02();</span></span><br><span class="line"><span class="comment">//main25_03();</span></span><br><span class="line"><span class="built_in">main25_04</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、责任链模式"><a href="#3、责任链模式" class="headerlink" title="3、责任链模式"></a>3、责任链模式</h2><h3 id="3-1、概念"><a href="#3-1、概念" class="headerlink" title="3.1、概念"></a>3.1、概念</h3><p>Chain of Responsibility（CoR）模式也叫职责链模式或者职责连锁模式，是行为模式之一，该模式构造一系列分别担当不同的职责的类的对象来共同完成一个任务，这些类的对象之间像链条一样紧密相连，所以被称作职责链模式。</p><ul><li>例1：比如客户Client要完成一个任务，这个任务包括a,b,c,d四个部分。<br>首先客户Client把任务交给A，A完成a部分之后，把任务交给B，B完成b部分，…，直到D完成d部分。</li><li>例2：比如政府部分的某项工作，县政府先完成自己能处理的部分，不能处理的部分交给省政府，省政府再完成自己职责范围内的部分，不能处理的部分交给中央政府，中央政府最后完成该项工作。</li><li>例3：软件窗口的消息传播。</li><li>例4：SERVLET容器的过滤器（Filter）框架实现。</li></ul><h3 id="3-2、角色和职责"><a href="#3-2、角色和职责" class="headerlink" title="3.2、角色和职责"></a>3.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631ab29016f2c2beb13b51ba.png"></p><ol><li>Handler<br>处理类的抽象父类。</li><li>concreteHandler<br>具体的处理类。</li></ol><h3 id="3-3、责任链优缺点"><a href="#3-3、责任链优缺点" class="headerlink" title="3.3、责任链优缺点"></a>3.3、责任链优缺点</h3><p><strong>优点：</strong></p><ol><li>责任的分担。每个类只需要处理自己该处理的工作（不该处理的传递给下一个对象完成），明确各类的责任范围，符合类的最小封装原则。</li><li>可以根据需要自由组合工作流程。如工作流程发生变化，可以通过重新分配对象链便可适应新的工作流程。</li><li>类与类之间可以以松耦合的形式加以组织。</li></ol><p><strong>缺点：</strong><br>因为处理时以链的形式在对象间传递消息，根据实现方式不同，有可能会影响处理的速度。</p><p><strong>适用于：<br>链条式处理事情。工作流程化、消息处理流程化、事物流程化；</strong></p><h3 id="3-4、案例"><a href="#3-4、案例" class="headerlink" title="3.4、案例"></a>3.4、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarHandle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">HandleCar</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">CarHandle *<span class="title">setNextHandle</span><span class="params">(CarHandle *carhandle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;carhandle = carhandle;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;carhandle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">CarHandle *carhandle;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarHandleHead</span> : <span class="keyword">public</span> CarHandle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">HandleCar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;处理车头&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;carhandle != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">carhandle-&gt;<span class="built_in">HandleCar</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarHandleBody</span> : <span class="keyword">public</span> CarHandle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">HandleCar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;处理车身&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;carhandle != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">carhandle-&gt;<span class="built_in">HandleCar</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarHandleTail</span> : <span class="keyword">public</span> CarHandle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">HandleCar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;处理车尾&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;carhandle != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">carhandle-&gt;<span class="built_in">HandleCar</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CarHandleHead *head = <span class="keyword">new</span> CarHandleHead;</span><br><span class="line">CarHandleBody *body = <span class="keyword">new</span> CarHandleBody;</span><br><span class="line">CarHandleTail *tail = <span class="keyword">new</span> CarHandleTail;</span><br><span class="line"></span><br><span class="line">head-&gt;<span class="built_in">setNextHandle</span>(body);</span><br><span class="line">body-&gt;<span class="built_in">setNextHandle</span>(tail);</span><br><span class="line">tail-&gt;<span class="built_in">setNextHandle</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理</span></span><br><span class="line">head-&gt;<span class="built_in">HandleCar</span>();</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line"><span class="keyword">delete</span> body;</span><br><span class="line"><span class="keyword">delete</span> tail;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、策略模式"><a href="#4、策略模式" class="headerlink" title="4、策略模式"></a>4、策略模式</h2><h3 id="4-1、概念"><a href="#4-1、概念" class="headerlink" title="4.1、概念"></a>4.1、概念</h3><p>Strategy模式也叫策略模式是行为模式之一，它对一系列的算法加以封装，为所有算法定义一个抽象的算法接口，并通过继承该抽象算法接口对所有的算法加以封装和实现，具体的算法选择交由客户端决定（策略）。Strategy模式主要用来平滑地处理算法的切换。</p><h3 id="4-2、角色和职责"><a href="#4-2、角色和职责" class="headerlink" title="4.2、角色和职责"></a>4.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631ad2a516f2c2beb164aa4f.png"></p><ol><li>Strategy:<br>策略（算法）抽象。</li><li>ConcreteStrategy<br>各种策略（算法）的具体实现。</li><li>Context<br>策略的外部封装类，或者说策略的容器类。根据不同策略执行不同的行为。策略由外部环境决定。</li></ol><p><strong>适用于：<br>准备一组算法，并将每一个算法封装起来，使得它们可以互换。</strong></p><h3 id="4-3、策略模式优缺点"><a href="#4-3、策略模式优缺点" class="headerlink" title="4.3、策略模式优缺点"></a>4.3、策略模式优缺点</h3><p><strong>优点：</strong></p><ol><li>策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码移到父类里面，从而避免重复的代码。</li><li>策略模式提供了可以替换继承关系的办法。继承可以处理多种算法或行为。如果不是用策略模式，那么使用算法或行为的环境类就可能会有一些子类，每一个子类提供一个不同的算法或行为。但是，这样一来算法或行为的使用者就和算法或行为本身混在一起。决定使用哪一种算法或采取哪一种行为的逻辑就和算法或行为的逻辑混合在一起，从而不可能再独立演化。继承使得动态改变算法或行为变得不可能。</li><li>使用策略模式可以避免使用多重条件转移语句。多重转移语句不易维护，它把采取哪一种算法或采取哪一种行为的逻辑与算法或行为的逻辑混合在一起，统统列在一个多重转移语句里面，比使用继承的办法还要原始和落后。</li></ol><p><strong>缺点：</strong></p><ol><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。换言之，策略模式只适用于客户端知道所有的算法或行为的情况。</li><li>策略模式造成很多的策略类。有时候可以通过把依赖于环境的状态保存到客户端里面，而将策略类设计成可共享的，这样策略类实例可以被不同客户端使用。换言之，可以使用享元模式来减少对象的数量。</li></ol><h3 id="4-5、案例"><a href="#4-5、案例" class="headerlink" title="4.5、案例"></a>4.5、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Symmetric encryption</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Strategy</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SymEncrypt</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Des</span> : <span class="keyword">public</span> Strategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SymEncrypt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Des 加密&quot;</span> &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AES</span> : <span class="keyword">public</span> Strategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SymEncrypt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;AES 加密&quot;</span> &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Context</span>(Strategy *strategy)</span><br><span class="line">&#123;</span><br><span class="line">p = strategy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Operator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;<span class="built_in">SymEncrypt</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Strategy *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//算法的实现 和 客户端的使用 解耦合</span></span><br><span class="line"><span class="comment">//使得算法变化，不会影响客户端</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 不符合开闭原则</span></span><br><span class="line"><span class="comment"> Strategy *strategy = NULL;</span></span><br><span class="line"><span class="comment">strategy = new AES;</span></span><br><span class="line"><span class="comment">strategy-&gt;SymEncrypt();</span></span><br><span class="line"><span class="comment">delete strategy;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">strategy = new Des;</span></span><br><span class="line"><span class="comment">strategy-&gt;SymEncrypt();</span></span><br><span class="line"><span class="comment">delete strategy;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Strategy *strategy = <span class="literal">NULL</span>;</span><br><span class="line">Context *ctx = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">strategy = <span class="keyword">new</span> AES;</span><br><span class="line">ctx = <span class="keyword">new</span> <span class="built_in">Context</span>(strategy);</span><br><span class="line">ctx-&gt;<span class="built_in">Operator</span>();</span><br><span class="line"><span class="keyword">delete</span> strategy;</span><br><span class="line"><span class="keyword">delete</span> ctx;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、中介者模式"><a href="#5、中介者模式" class="headerlink" title="5、中介者模式"></a>5、中介者模式</h2><h3 id="5-1、概念"><a href="#5-1、概念" class="headerlink" title="5.1、概念"></a>5.1、概念</h3><p>Mediator模式也叫中介者模式，是由GoF提出的23种软件设计模式的一种。Mediator模式是行为模式之一，在Mediator模式中，类之间的交互行为被统一放在Mediator的对象中，对象通过Mediator对象同其他对象交互，Mediator对象起着控制器的作用。</p><p>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示的相互引用，从而降低耦合；而且可以独立地改变它们之间的交互。</p><h3 id="5-2、角色和职责"><a href="#5-2、角色和职责" class="headerlink" title="5.2、角色和职责"></a>5.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631ad6e916f2c2beb16a743a.png"></p><ol><li>Mediator抽象中介者<br>中介者类的抽象父类。</li><li>concreteMediator<br>具体的中介者类。</li><li>Colleague<br>关联类的抽象父类。</li><li>concreteColleague<br>具体的关联类。</li></ol><p><strong>适用于：<br>用一个中介对象，封装一些列对象（同事）的交换，中介者是各个对象不需要显示的相互作用，从而实现了耦合松散，而且可以独立的改变他们之间的交换。</strong></p><h3 id="5-3、模式优点"><a href="#5-3、模式优点" class="headerlink" title="5.3、模式优点"></a>5.3、模式优点</h3><ol><li>将系统按功能分割成更小的对象，符合类的最小设计原则</li><li>对关联对象的集中控制</li><li>减小类的耦合程度，明确类之间的相互关系：当类之间的关系过于复杂时，其中任何一个类的修改都会影响到其他类，不符合类的设计的开闭原则 ，而Mediator模式将原来相互依存的多对多的类之间的关系简化为Mediator控制类与其他关联类的一对多的关系，当其中一个类修改时，可以对其他关联类不产生影响（即使有修改，也集中在Mediator控制类）。</li><li>有利于提高类的重用性</li></ol><h3 id="5-4、案例"><a href="#5-4、案例" class="headerlink" title="5.4、案例"></a>5.4、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> sex, <span class="type">int</span> condit)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">m_sex = sex;</span><br><span class="line">m_condition = condit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getCondit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_condition;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getParter</span><span class="params">(Person *p)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">stringm_name;<span class="comment">//</span></span><br><span class="line"><span class="type">int</span>m_sex;  <span class="comment">//1男  2女</span></span><br><span class="line"><span class="type">int</span>m_condition; <span class="comment">//123456789;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="built_in">Man</span>(string name, <span class="type">int</span> sex, <span class="type">int</span> condit):<span class="built_in">Person</span>(name, sex, condit)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getParter</span><span class="params">(Person *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">getSex</span>() == p-&gt;<span class="built_in">getSex</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No No No 我不是同性恋&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">getCondit</span>() == p-&gt;<span class="built_in">getCondit</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; 和 &quot;</span> &lt;&lt; p-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;绝配&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; 和 &quot;</span> &lt;&lt; p-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;不配&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="built_in">Woman</span>(string name, <span class="type">int</span> sex, <span class="type">int</span> condit):<span class="built_in">Person</span>(name, sex, condit)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getParter</span><span class="params">(Person *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">getSex</span>() == p-&gt;<span class="built_in">getSex</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No No No 我不是同性恋&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">getCondit</span>() == p-&gt;<span class="built_in">getCondit</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; 和 &quot;</span> &lt;&lt; p-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;绝配&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; 和 &quot;</span> &lt;&lt; p-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;不配&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上  Woman  Man类的太紧密 需要解耦合</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main1901</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Woman *w1 = <span class="keyword">new</span> <span class="built_in">Woman</span>(<span class="string">&quot;小芳&quot;</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">Man *m1 = <span class="keyword">new</span> <span class="built_in">Man</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">Man *m2 = <span class="keyword">new</span> <span class="built_in">Man</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">w1-&gt;<span class="built_in">getParter</span>(m1);</span><br><span class="line">w1-&gt;<span class="built_in">getParter</span>(m2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> w1;</span><br><span class="line"><span class="keyword">delete</span> m1;</span><br><span class="line"><span class="keyword">delete</span> m2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mediator</span> ;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person2</span>(string name, <span class="type">int</span> sex, <span class="type">int</span> condition, Mediator *m)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">m_sex = sex;</span><br><span class="line">m_condition = condition;</span><br><span class="line">m_m = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getCondit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_condition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mediator *<span class="title">getMediator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getParter</span><span class="params">(Person2 *p)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">stringm_name;<span class="comment">//</span></span><br><span class="line"><span class="type">int</span>m_sex;  <span class="comment">//1男  2女</span></span><br><span class="line"><span class="type">int</span>m_condition; <span class="comment">//123456789;</span></span><br><span class="line">Mediator *m_m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mediator</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Mediator</span>()</span><br><span class="line">&#123;</span><br><span class="line">pMan = <span class="literal">NULL</span>;</span><br><span class="line">pWoman = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setWoman</span><span class="params">(Person2 *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pWoman = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setMan</span><span class="params">(Person2 *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pMan = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getPartner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pMan-&gt;<span class="built_in">getSex</span>() == pWoman-&gt;<span class="built_in">getSex</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No No No 我不是同性恋&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pMan-&gt;<span class="built_in">getCondit</span>() == pWoman-&gt;<span class="built_in">getCondit</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; pMan-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; 和 &quot;</span> &lt;&lt; pWoman-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;绝配&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; pMan-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; 和 &quot;</span> &lt;&lt; pWoman-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;不配&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Person2*pMan;</span><br><span class="line">Person2*pWoman;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman2</span> : <span class="keyword">public</span> Person2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Woman2</span>(string name, <span class="type">int</span> sex, <span class="type">int</span> condition, Mediator *m) : <span class="built_in">Person2</span>(name, sex, condition, m)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getParter</span><span class="params">(Person2 *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">getMediator</span>()-&gt;<span class="built_in">setWoman</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">getMediator</span>()-&gt;<span class="built_in">setMan</span>(p);</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">getMediator</span>()-&gt;<span class="built_in">getPartner</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man2</span> : <span class="keyword">public</span> Person2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Man2</span>(string name, <span class="type">int</span> sex, <span class="type">int</span> condition, Mediator *m) : <span class="built_in">Person2</span>(name, sex, condition, m)</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getParter</span><span class="params">(Person2 *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">getMediator</span>()-&gt;<span class="built_in">setMan</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">getMediator</span>()-&gt;<span class="built_in">setWoman</span>(p);</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">getMediator</span>()-&gt;<span class="built_in">getPartner</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main1902</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Mediator *mediator = <span class="keyword">new</span> Mediator;</span><br><span class="line">Woman2 *w1 = <span class="keyword">new</span> <span class="built_in">Woman2</span>(<span class="string">&quot;小芳&quot;</span>, <span class="number">2</span>, <span class="number">4</span>, mediator);</span><br><span class="line">Man2 *m1 = <span class="keyword">new</span> <span class="built_in">Man2</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">1</span>, <span class="number">3</span>, mediator);</span><br><span class="line">Man2 *m2 = <span class="keyword">new</span> <span class="built_in">Man2</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">1</span>, <span class="number">4</span>, mediator);</span><br><span class="line"></span><br><span class="line">w1-&gt;<span class="built_in">getParter</span>(m1);</span><br><span class="line">w1-&gt;<span class="built_in">getParter</span>(m2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> w1;</span><br><span class="line"><span class="keyword">delete</span> m1;</span><br><span class="line"><span class="keyword">delete</span> m2;</span><br><span class="line"><span class="keyword">delete</span> mediator;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//main1901();   //问题的引出</span></span><br><span class="line"><span class="built_in">main1902</span>();     <span class="comment">//用中介者模式 进行优化</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、观察者模式"><a href="#6、观察者模式" class="headerlink" title="6、观察者模式"></a>6、观察者模式</h2><h3 id="6-1、概念"><a href="#6-1、概念" class="headerlink" title="6.1、概念"></a>6.1、概念</h3><p>Observer模式是行为模式之一，它的作用是当一个对象的状态发生变化时，能够自动通知其他关联对象，自动刷新对象状态。</p><p>Observer模式提供给关联对象一种同步通信的手段，使某个对象与依赖它的其他对象之间保持状态同步。</p><h3 id="6-2、角色和职责"><a href="#6-2、角色和职责" class="headerlink" title="6.2、角色和职责"></a>6.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631adaeb16f2c2beb16f5adc.png"></p><ol><li>Subject（被观察者）<br>被观察的对象。当需要被观察的状态发生变化时，需要通知队列中所有观察者对象。Subject需要维持（添加，删除，通知）一个观察者对象的队列列表。</li><li>ConcreteSubject<br>被观察者的具体实现。包含一些基本的属性状态及其他操作。</li><li>Observer（观察者）<br>接口或抽象类。当Subject的状态发生变化时，Observer对象将通过一个callback函数得到通知。</li><li>ConcreteObserver<br>观察者的具体实现。得到通知后将完成一些具体的业务逻辑处理。</li></ol><h3 id="6-3、典型应用"><a href="#6-3、典型应用" class="headerlink" title="6.3、典型应用"></a>6.3、典型应用</h3><ul><li>侦听事件驱动程序设计中的外部事件</li><li>侦听&#x2F;监视某个对象的状态变化</li><li>发布者&#x2F;订阅者(publisher&#x2F;subscriber)模型中，当一个外部事件（新的产品，消息的出现等等）被触发时，通知邮件列表中的订阅者</li></ul><p><strong>适用于：<br>定义对象间一种一对多的依赖关系，使得每一个对象改变状态，则所有依赖于他们的对象都会得到通知。</strong></p><h3 id="6-4、案例"><a href="#6-4、案例" class="headerlink" title="6.4、案例"></a>6.4、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用场景：定义了一种一对多的关系，让多个观察对象（公司员工）同时监听一个主题对象（秘书），主题对象状态发生变化时，会通知所有的观察者，使它们能够更新自己。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vector&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Secretary</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//玩游戏的同事类（观察者）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlayserObserver</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">PlayserObserver</span>(string name, Secretary *secretary)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">m_secretary = secretary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(string action)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;观察者收到action:&quot;</span> &lt;&lt; action &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">stringm_name;</span><br><span class="line">Secretary*m_secretary;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//秘书类（主题对象，通知者）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Secretary</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addObserver</span><span class="params">(PlayserObserver *o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Notify</span><span class="params">(string action)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;PlayserObserver *&gt;::iterator it= v.<span class="built_in">begin</span>(); it!=v.<span class="built_in">end</span>(); it++ )</span><br><span class="line">&#123;</span><br><span class="line">(*it)-&gt;<span class="built_in">update</span>(action);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setAction</span><span class="params">(string action)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_action = action;</span><br><span class="line"><span class="built_in">Notify</span>(m_action);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_action;</span><br><span class="line">vector&lt;PlayserObserver *&gt; v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//subject 被观察者</span></span><br><span class="line">Secretary *s1 = <span class="keyword">new</span> Secretary;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的观察者 被通知对象</span></span><br><span class="line">PlayserObserver *po1 = <span class="keyword">new</span> <span class="built_in">PlayserObserver</span>(<span class="string">&quot;小张&quot;</span>, s1);</span><br><span class="line"><span class="comment">//PlayserObserver *po2 = new PlayserObserver(&quot;小李&quot;, s1);</span></span><br><span class="line">s1-&gt;<span class="built_in">addObserver</span>(po1);</span><br><span class="line"><span class="comment">//s1-&gt;addObserver(po2);</span></span><br><span class="line">s1-&gt;<span class="built_in">setAction</span>(<span class="string">&quot;老板来了&quot;</span>);</span><br><span class="line">s1-&gt;<span class="built_in">setAction</span>(<span class="string">&quot;老板走了&quot;</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、备忘录模式"><a href="#7、备忘录模式" class="headerlink" title="7、备忘录模式"></a>7、备忘录模式</h2><h3 id="7-1、概念"><a href="#7-1、概念" class="headerlink" title="7.1、概念"></a>7.1、概念</h3><p>Memento模式也叫备忘录模式，是行为模式之一，它的作用是保存对象的内部状态，并在需要的时候（undo&#x2F;rollback）恢复对象以前的状态。</p><h3 id="7-2、应用场景"><a href="#7-2、应用场景" class="headerlink" title="7.2、应用场景"></a>7.2、应用场景</h3><p>如果一个对象需要保存状态并可通过undo或rollback等操作恢复到以前的状态时，可以使用Memento模式。<br>1）一个类需要保存它的对象的状态（相当于Originator角色）<br>2）设计一个类，该类只是用来保存上述对象的状态（相当于Memento角色）<br>3）需要的时候，Caretaker角色要求Originator返回一个Memento并加以保存<br>4）undo或rollback操作时，通过Caretaker保存的Memento恢复Originator对象的状态</p><h3 id="7-3、角色和职责"><a href="#7-3、角色和职责" class="headerlink" title="7.3、角色和职责"></a>7.3、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631adfb216f2c2beb1750708.png"></p><ol><li>Originator（原生者）<br>需要被保存状态以便恢复的那个对象。</li><li>Memento（备忘录）<br>该对象由Originator创建，主要用来保存Originator的内部状态。</li><li>Caretaker（管理者）<br>负责在适当的时间保存&#x2F;恢复Originator对象的状态。</li></ol><p><strong>适用于：<br>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样就可以将以后的对象状态恢复到先前保存的状态。<br>适用于功能比较复杂的，但需要记录或维护属性历史的类；或者需要保存的属性只是众多属性中的一小部分时Originator可以根据保存的Memo还原到前一状态。</strong></p><h3 id="7-4、案例"><a href="#7-4、案例" class="headerlink" title="7.4、案例"></a>7.4、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MememTo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MememTo</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span>  age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">stringm_name;</span><br><span class="line"><span class="type">int</span>m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span>  age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;age: &quot;</span> &lt;&lt; m_age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建备份</span></span><br><span class="line"><span class="function">MememTo *<span class="title">createMememTo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">MememTo</span>(m_name, m_age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复备份</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetMememTo</span><span class="params">(MememTo *memto)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_name = memto-&gt;<span class="built_in">getName</span>();</span><br><span class="line">m_age = memto-&gt;<span class="built_in">getAge</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">stringm_name;</span><br><span class="line"><span class="type">int</span>m_age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Caretaker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Caretaker</span>(MememTo *mem)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_memto = mem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">MememTo *<span class="title">getMememTo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_memto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setMememTo</span><span class="params">(MememTo *mem)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_memto = mem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">MememTo *m_memto;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main23_01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person *p = <span class="keyword">new</span> <span class="built_in">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">p-&gt;<span class="built_in">printT</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建备份</span></span><br><span class="line">Caretaker *ct = <span class="keyword">new</span> <span class="built_in">Caretaker</span>(p-&gt;<span class="built_in">createMememTo</span>());</span><br><span class="line"></span><br><span class="line">p-&gt;<span class="built_in">setAge</span>(<span class="number">28</span>);</span><br><span class="line">p-&gt;<span class="built_in">printT</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复信息</span></span><br><span class="line">p-&gt;<span class="built_in">SetMememTo</span>(ct-&gt;<span class="built_in">getMememTo</span>());</span><br><span class="line">p-&gt;<span class="built_in">printT</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">delete</span> ct-&gt;<span class="built_in">getMememTo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main23_02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person *p = <span class="keyword">new</span> <span class="built_in">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">p-&gt;<span class="built_in">printT</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建备份</span></span><br><span class="line">MememTo * membak = p-&gt;<span class="built_in">createMememTo</span>();</span><br><span class="line">p-&gt;<span class="built_in">setAge</span>(<span class="number">28</span>);</span><br><span class="line">p-&gt;<span class="built_in">printT</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复信息</span></span><br><span class="line">p-&gt;<span class="built_in">SetMememTo</span>(membak);</span><br><span class="line">p-&gt;<span class="built_in">printT</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">delete</span> membak;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//main23_01();</span></span><br><span class="line"><span class="built_in">main23_02</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、访问者模式"><a href="#8、访问者模式" class="headerlink" title="8、访问者模式"></a>8、访问者模式</h2><h3 id="8-1、概念"><a href="#8-1、概念" class="headerlink" title="8.1、概念"></a>8.1、概念</h3><p>Visitor模式也叫访问者模式，是行为模式之一，它分离对象的数据和行为，使用Visitor模式，可以不修改已有类的情况下，增加新的操作角色和职责。</p><h3 id="8-2、角色和职责"><a href="#8-2、角色和职责" class="headerlink" title="8.2、角色和职责"></a>8.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631ae19e16f2c2beb1774c72.png"></p><ol><li>抽象访问者（Visitor）角色<br>声明了一个或者多个访问操作，形成所有的具体元素角色必须实现的接口。</li><li>具体访问者（ConcreteVisitor）角色<br>实现抽象访问者角色所声明的接口，也就是抽象访问者所声明的各个访问操作。</li><li>抽象节点（Element）角色<br>声明一个接受操作，接受一个访问者对象作为一个参量。</li><li>具体节点（ConcreteElement）角色<br>实现了抽象元素所规定的接受操作。</li><li>结构对象（ObiectStructure）角色<br>有如下的一些责任，可以遍历结构中的所有元素；如果需要，提供一个高层次的接口让访问者对象可以访问每一个元素；如果需要，可以设计成一个复合对象或者一个聚集，如列（List）或集合（Set）。</li></ol><p><strong>适用于：<br>把数据结构 和 作用于数据结构上的操作 进行解耦合;<br>适用于数据结构比较稳定的场合</strong></p><h3 id="8-3、模式优缺点"><a href="#8-3、模式优缺点" class="headerlink" title="8.3、模式优缺点"></a>8.3、模式优缺点</h3><p>访问者模式有如下的优点：</p><ol><li><p>访问者模式使得增加新的操作变得很容易。如果一些操作依赖于一个复杂的结构对象的话，那么一般而言，增加新的操作会很复杂。而使用访问者模式，增加新的操作就意味着增加一个新的访问者类，因此，变得很容易。</p></li><li><p>访问者模式将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。</p></li><li><p>访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。迭代子只能访问属于同一个类型等级结构的成员对象，而不能访问属于不同等级结构的对象。访问者模式可以做到这一点。</p></li><li><p>积累状态。每一个单独的访问者对象都集中了相关的行为，从而也就可以在访问的过程中将执行操作的状态积累在自己内部，而不是分散到很多的节点对象中。这是有益于系统维护的优点。</p></li></ol><p>访问者模式有如下的缺点：</p><ol><li><p>增加新的节点类变得很困难。每增加一个新的节点都意味着要在抽象访问者角色中增加一个新的抽象操作，并在每一个具体访问者类中增加相应的具体操作。</p></li><li><p>破坏封装。访问者模式要求访问者对象访问并调用每一个节点对象的操作，这隐含了一个对所有节点对象的要求：它们必须暴露一些自己的操作和内部状态。不然，访问者的访问就变得没有意义。由于访问者对象自己会积累访问操作所需的状态，从而使这些状态不再存储在节点对象中，这也是破坏封装的。</p></li></ol><h3 id="8-4、案例"><a href="#8-4、案例" class="headerlink" title="8.4、案例"></a>8.4、案例</h3><p>案例需求：  </p><p>比如有一个公园，有一到多个不同的组成部分；该公园存在多个访问者：清洁工A负责打扫公园的A部分，清洁工B负责打扫公园的B部分，公园的管理者负责检点各项事务是否完成，上级领导可以视察公园等等。也就是说，对于同一个公园，不同的访问者有不同的行为操作，而且访问者的种类也可能需要根据时间的推移而变化（行为的扩展性）。  </p><p>根据软件设计的开闭原则（对修改关闭，对扩展开放），我们怎么样实现这种需求呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ParkElement</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//不同的访问者 访问公园完成不同的动作 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visitor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">visit</span><span class="params">(ParkElement *park)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParkElement</span> <span class="comment">//每一个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor *v)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParkA</span> : <span class="keyword">public</span> ParkElement</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v-&gt;<span class="built_in">visit</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParkB</span> : <span class="keyword">public</span> ParkElement</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v-&gt;<span class="built_in">visit</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Park</span>  : <span class="keyword">public</span> ParkElement</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Park</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_list.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPart</span><span class="params">(ParkElement *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_list.<span class="built_in">push_back</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( list&lt;ParkElement *&gt;::iterator it=m_list.<span class="built_in">begin</span>(); it != m_list.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">(*it)-&gt;<span class="built_in">accept</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">list&lt;ParkElement *&gt; m_list;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VisitorA</span> : <span class="keyword">public</span> Visitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">visit</span><span class="params">(ParkElement *park)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清洁工A访问公园A部分，打扫卫生完毕&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VisitorB</span> : <span class="keyword">public</span> Visitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">visit</span><span class="params">(ParkElement *park)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清洁工B 访问 公园B 部分，打扫卫生完毕&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VisitorManager</span> : <span class="keyword">public</span> Visitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">visit</span><span class="params">(ParkElement *park)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;管理员 检查整个公园卫生打扫情况&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">VisitorA *visitorA = <span class="keyword">new</span> VisitorA;</span><br><span class="line">VisitorB *visitorB = <span class="keyword">new</span> VisitorB;</span><br><span class="line"></span><br><span class="line">ParkA *partA = <span class="keyword">new</span> ParkA;</span><br><span class="line">ParkB *partB = <span class="keyword">new</span> ParkB;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公园接受访问者a访问</span></span><br><span class="line">partA-&gt;<span class="built_in">accept</span>(visitorA);</span><br><span class="line">partB-&gt;<span class="built_in">accept</span>(visitorB);</span><br><span class="line"></span><br><span class="line">VisitorManager *visitorManager = <span class="keyword">new</span> VisitorManager;</span><br><span class="line">Park * park = <span class="keyword">new</span> Park;</span><br><span class="line">park-&gt;<span class="built_in">setPart</span>(partA);</span><br><span class="line">park-&gt;<span class="built_in">setPart</span>(partB);</span><br><span class="line">park-&gt;<span class="built_in">accept</span>(visitorManager);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//客户去银行办理业务</span></span><br><span class="line"><span class="comment">//m个客户</span></span><br><span class="line"><span class="comment">//n个柜员 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将要 对象和要处理的操作分开，不同的柜员可以办理不同来访者的业务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Element</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问者访问柜员 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visitor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">visit</span><span class="params">(Element *element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//柜员接受客户访问</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Element</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor *v)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//柜员A 员工</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmployeeA</span> : <span class="keyword">public</span> Element</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">EmployeeA</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v-&gt;<span class="built_in">visit</span>(<span class="keyword">this</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//柜员B 员工</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmployeeB</span> : <span class="keyword">public</span> Element</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">EmployeeB</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v-&gt;<span class="built_in">visit</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VisitorA</span> : <span class="keyword">public</span> Visitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">visit</span><span class="params">(Element *element)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过&quot;</span> &lt;&lt; element-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;做A业务&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VisitorB</span> : <span class="keyword">public</span> Visitor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">visit</span><span class="params">(Element *element)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过&quot;</span> &lt;&lt; element-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;做B业务&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main26_01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EmployeeA *eA = <span class="keyword">new</span> <span class="built_in">EmployeeA</span>(<span class="string">&quot;柜员A&quot;</span>);</span><br><span class="line"></span><br><span class="line">VisitorA *vA = <span class="keyword">new</span> VisitorA;</span><br><span class="line">VisitorB *vB = <span class="keyword">new</span> VisitorB;</span><br><span class="line"></span><br><span class="line">eA-&gt;<span class="built_in">accept</span>(vA);</span><br><span class="line">eA-&gt;<span class="built_in">accept</span>(vB);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> eA;</span><br><span class="line"><span class="keyword">delete</span> vA;</span><br><span class="line"><span class="keyword">delete</span> vB;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//柜员B 员工</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employees</span> : <span class="keyword">public</span> Element</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Employees</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_list = <span class="keyword">new</span> list&lt;Element *&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">accept</span><span class="params">(Visitor *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (list&lt;Element *&gt;::iterator it = m_list-&gt;<span class="built_in">begin</span>(); it != m_list-&gt;<span class="built_in">end</span>(); it++  )</span><br><span class="line">&#123;</span><br><span class="line">(*it)-&gt;<span class="built_in">accept</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addElement</span><span class="params">(Element *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_list-&gt;<span class="built_in">push_back</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeElement</span><span class="params">(Element *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_list-&gt;<span class="built_in">remove</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">list&lt;Element *&gt; *m_list;</span><br><span class="line">string m_name;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main26_02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EmployeeA *eA = <span class="keyword">new</span> <span class="built_in">EmployeeA</span>(<span class="string">&quot;柜员A&quot;</span>);</span><br><span class="line">EmployeeA *eB= <span class="keyword">new</span> <span class="built_in">EmployeeA</span>(<span class="string">&quot;柜员B&quot;</span>);</span><br><span class="line"></span><br><span class="line">Employees *es = <span class="keyword">new</span> Employees;</span><br><span class="line">es-&gt;<span class="built_in">addElement</span>(eA);</span><br><span class="line">es-&gt;<span class="built_in">addElement</span>(eB);</span><br><span class="line">VisitorA *vA = <span class="keyword">new</span> VisitorA;</span><br><span class="line">VisitorB *vB = <span class="keyword">new</span> VisitorB;</span><br><span class="line"></span><br><span class="line">es-&gt;<span class="built_in">accept</span>(vA);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">es-&gt;<span class="built_in">accept</span>(vB);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> eA;</span><br><span class="line"><span class="keyword">delete</span> eB </span><br><span class="line">;</span><br><span class="line"><span class="keyword">delete</span> vA;</span><br><span class="line"><span class="keyword">delete</span> vB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//main26_01();</span></span><br><span class="line"><span class="built_in">main26_02</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、状态模式"><a href="#9、状态模式" class="headerlink" title="9、状态模式"></a>9、状态模式</h2><h3 id="9-1、概念"><a href="#9-1、概念" class="headerlink" title="9.1、概念"></a>9.1、概念</h3><p>State模式也叫状态模式，是行为设计模式的一种。State模式允许通过改变对象的内部状态而改变对象的行为，这个对象表现得就好像修改了它的类一样。</p><p>状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂是的情况。把状态的判断逻辑转移到表现不同状态的一系列类当中，可以把复杂的判断逻辑简化。</p><h3 id="9-2、角色和职责"><a href="#9-2、角色和职责" class="headerlink" title="9.2、角色和职责"></a>9.2、角色和职责</h3><blockquote><p>每个人、事物在不同的状态下会有不同表现（动作），而一个状态又会在不同的表现下转移到下一个不同的状态（State）。最简单的一个生活中的例子就是：地铁入口处，如果你放入正确的地铁票，门就会打开让你通过。在出口出也是验票，如果正确你就可以ok，否则就不让你通过（如果你动作野蛮，或许会有报警（Alarm））。<br>有限状态自动机（FSM）也是一个典型的状态不同，对输入有不同的相应（状态转移）。通常我们在实现这类系统会使用到很多的Switch&#x2F;Case语句，Case某种状态，发生什么动作，Case另外一种状态，则发生另外一种状态。但是这种实现方式至少有以下两个问题：</p><ol><li>当状态数目不是很多的时候，Switch&#x2F;Case可能可以搞定。但是当状态数目很多的时候（实际系统中也正是如此），维护一大组的Switch&#x2F;Case语句将是一件异常困难并且容易出错的事情。</li><li>状态逻辑和动作实现没有分离。在很多的系统实现中，动作的实现代码直接写在状态的逻辑当中。这带来的后果就是系统的扩展性和维护得不到保证。</li></ol></blockquote><p><img src="https://pic.imgdb.cn/item/631aead816f2c2beb1835a37.png"></p><ol><li>Context：用户对象<br>拥有一个State类型的成员，以标识对象的当前状态； </li><li>State：接口或基类<br>封装与Context的特定状态相关的行为； </li><li>ConcreteState：接口实现类或子类<br>实现了一个与Context某个状态相关的行为。</li></ol><p><strong>适用于：<br>对象的行为，依赖于它所处的当前状态。行为随状态改变而改变的场景。</strong></p><p><strong>适用于：通过用户的状态来改变对象的行为。</strong></p><h3 id="9-3、案例"><a href="#9-3、案例" class="headerlink" title="9.3、案例"></a>9.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">doSomeThing</span><span class="params">(Worker *w)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Worker</span>();</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHour</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_hour;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setHour</span><span class="params">(<span class="type">int</span> hour)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_hour = hour;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">State* <span class="title">getCurrentState</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_currstate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setCurrentState</span><span class="params">(State* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_currstate = state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doSomeThing</span><span class="params">()</span> <span class="comment">//</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_currstate-&gt;<span class="built_in">doSomeThing</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span>m_hour;</span><br><span class="line">State*m_currstate; <span class="comment">//对象的当前状态</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State1</span> : <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">doSomeThing</span><span class="params">(Worker *w)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State2</span>  : <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">doSomeThing</span><span class="params">(Worker *w)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">State1::doSomeThing</span><span class="params">(Worker *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (w-&gt;<span class="built_in">getHour</span>() == <span class="number">7</span> || w-&gt;<span class="built_in">getHour</span>()==<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;吃早饭&quot;</span> &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">delete</span> w-&gt;<span class="built_in">getCurrentState</span>();          <span class="comment">//状态1 不满足 要转到状态2</span></span><br><span class="line">w-&gt;<span class="built_in">setCurrentState</span>(<span class="keyword">new</span> State2 );</span><br><span class="line">w-&gt;<span class="built_in">getCurrentState</span>()-&gt;<span class="built_in">doSomeThing</span>(w); <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">State2::doSomeThing</span><span class="params">(Worker *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (w-&gt;<span class="built_in">getHour</span>() == <span class="number">9</span> || w-&gt;<span class="built_in">getHour</span>()==<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;工作&quot;</span> &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> w-&gt;<span class="built_in">getCurrentState</span>();    <span class="comment">//状态2 不满足 要转到状态3 后者恢复到初始化状态</span></span><br><span class="line">w-&gt;<span class="built_in">setCurrentState</span>(<span class="keyword">new</span> State1); <span class="comment">//恢复到当初状态</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前时间点：&quot;</span> &lt;&lt; w-&gt;<span class="built_in">getHour</span>() &lt;&lt; <span class="string">&quot;未知状态&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Worker::<span class="built_in">Worker</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_currstate = <span class="keyword">new</span> State1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Worker *w1 = <span class="keyword">new</span> Worker;</span><br><span class="line">w1-&gt;<span class="built_in">setHour</span>(<span class="number">7</span>);</span><br><span class="line">w1-&gt;<span class="built_in">doSomeThing</span>();</span><br><span class="line"></span><br><span class="line">w1-&gt;<span class="built_in">setHour</span>(<span class="number">9</span>);</span><br><span class="line">w1-&gt;<span class="built_in">doSomeThing</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> w1;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、解释模式"><a href="#10、解释模式" class="headerlink" title="10、解释模式"></a>10、解释模式</h2><h3 id="10-1、概念"><a href="#10-1、概念" class="headerlink" title="10.1、概念"></a>10.1、概念</h3><p>一些应用提供了内建（Build-In）的脚本或者宏语言来让用户可以定义他们能够在系统中进行的操作。Interpreter模式的目的就是使用一个解释器为用户提供一个一门定义语言的语法表示的解释器，然后通过这个解释器来解释语言中的句子。</p><h3 id="10-2、角色和职责"><a href="#10-2、角色和职责" class="headerlink" title="10.2、角色和职责"></a>10.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631af13816f2c2beb18aea2f.png"></p><ol><li>Context<br>解释器上下文环境类。用来存储解释器的上下文环境，比如需要解释的文法等。</li><li>AbstractExpression<br>解释器抽象类。</li><li>ConcreteExpression<br>解释器具体实现类。</li></ol><h3 id="10-3、案例"><a href="#10-3、案例" class="headerlink" title="10.3、案例"></a>10.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Context</span>(<span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setNum</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setRes</span><span class="params">(<span class="type">int</span> res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_res = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getRes</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line"><span class="type">int</span> m_res;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expression</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">interpreter</span><span class="params">(Context *context)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlusExpression</span> : <span class="keyword">public</span> Expression</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">interpreter</span><span class="params">(Context *context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num = context-&gt;<span class="built_in">getNum</span>();</span><br><span class="line">num ++ ;</span><br><span class="line">context-&gt;<span class="built_in">setNum</span>(num);</span><br><span class="line">context-&gt;<span class="built_in">setRes</span>(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinusExpression</span> : <span class="keyword">public</span> Expression</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">interpreter</span><span class="params">(Context *context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num = context-&gt;<span class="built_in">getNum</span>();</span><br><span class="line">num -- ;</span><br><span class="line">context-&gt;<span class="built_in">setNum</span>(num);</span><br><span class="line">context-&gt;<span class="built_in">setRes</span>(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Context *pcxt = <span class="keyword">new</span> <span class="built_in">Context</span>(<span class="number">10</span>);</span><br><span class="line">Expression *e1 = <span class="keyword">new</span> PlusExpression;</span><br><span class="line">e1-&gt;<span class="built_in">interpreter</span>(pcxt);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;PlusExpression:&quot;</span> &lt;&lt; pcxt-&gt;<span class="built_in">getRes</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Expression *e2 = <span class="keyword">new</span> MinusExpression;</span><br><span class="line">e2-&gt;<span class="built_in">interpreter</span>(pcxt);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;MinusExpression:&quot;</span> &lt;&lt; pcxt-&gt;<span class="built_in">getRes</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> e2;</span><br><span class="line"><span class="keyword">delete</span> e1;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、迭代器模式"><a href="#11、迭代器模式" class="headerlink" title="11、迭代器模式"></a>11、迭代器模式</h2><h3 id="11-1、概念"><a href="#11-1、概念" class="headerlink" title="11.1、概念"></a>11.1、概念</h3><p>Iterator模式也叫迭代模式，是行为模式之一，它把对容器中包含的内部对象的访问委让给外部类，使用Iterator（遍历）按顺序进行遍历访问的设计模式。</p><p>在应用Iterator模式之前，首先应该明白Iterator模式用来解决什么问题。或者说，如果不使用Iterator模式，会存在什么问题。</p><ol><li>由容器自己实现顺序遍历。直接在容器类里直接添加顺序遍历方法</li><li>让调用者自己实现遍历。直接暴露数据细节给外部。<br>以上方法1与方法2都可以实现遍历，这样有什么问题呢？</li><li>容器类承担了太多功能：一方面需要提供添加删除等本身应有的功能；一方面还需要提供遍历访问功能。</li><li>往往容器在实现遍历的过程中，需要保存遍历状态，当跟元素的添加删除等功能夹杂在一起，很容易引起混乱和程序运行错误等。</li></ol><p>Iterator模式就是为了有效地处理按顺序进行遍历访问的一种设计模式，简单地说，Iterator模式提供一种有效的方法，可以屏蔽聚集对象集合的容器类的实现细节，而能对容器内包含的对象元素按顺序进行有效的遍历访问。所以，Iterator模式的应用场景可以归纳为满足以下几个条件：</p><ul><li>访问容器中包含的内部对象 </li><li>按顺序访问</li></ul><h3 id="11-2、角色和职责"><a href="#11-2、角色和职责" class="headerlink" title="11.2、角色和职责"></a>11.2、角色和职责</h3><p>GOOD：提供一种方法顺序访问一个聚敛对象的各个元素，而又不暴露该对象的内部表示。<br>为遍历不同的聚集结构提供如开始，下一个，是否结束，当前一项等统一接口。</p><p><img src="https://pic.imgdb.cn/item/631af6e216f2c2beb192360e.png"></p><p><img src="https://pic.imgdb.cn/item/631af6f316f2c2beb1924a8e.png"></p><ol><li><p>Iterator（迭代器接口）：<br>该接口必须定义实现迭代功能的最小定义方法集<br>比如提供hasNext()和next()方法。</p></li><li><p>ConcreteIterator（迭代器实现类）：<br>迭代器接口Iterator的实现类。可以根据具体情况加以实现。</p></li><li><p>Aggregate（容器接口）：<br>定义基本功能以及提供类似Iterator iterator()的方法。</p></li><li><p>concreteAggregate（容器实现类）：<br>容器接口的实现类。必须实现Iterator iterator()方法。</p></li></ol><p><strong>在迭代器中持有一个集合的引用；所以通过迭代器，就可以访问集合</strong></p><h3 id="11-3、案例"><a href="#11-3、案例" class="headerlink" title="11.3、案例"></a>11.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Object ;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 5 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意类的顺序 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyIterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">First</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Next</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">IsDone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Object <span class="title">CurrentItem</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Aggregate</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Object <span class="title">getItem</span><span class="params">(<span class="type">int</span> index)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> MyIterator *<span class="title">CreateIterator</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getSize</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContreteIterator</span> : <span class="keyword">public</span> MyIterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ContreteIterator</span>(Aggregate *ag) </span><br><span class="line">&#123;</span><br><span class="line">_ag = ag;</span><br><span class="line">_idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">ContreteIterator</span>()</span><br><span class="line">&#123;</span><br><span class="line">_ag = <span class="literal">NULL</span>;</span><br><span class="line">_idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">First</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Next</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_idx &lt;_ag-&gt;<span class="built_in">getSize</span>())</span><br><span class="line">&#123;</span><br><span class="line">_idx ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">IsDone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (_idx == _ag-&gt;<span class="built_in">getSize</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Object <span class="title">CurrentItem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _ag-&gt;<span class="built_in">getItem</span>(_idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span>_idx;</span><br><span class="line">Aggregate*_ag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteAggregate</span> : <span class="keyword">public</span> Aggregate</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ConcreteAggregate</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;SIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line">object[i] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">ConcreteAggregate</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Object <span class="title">getItem</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> object[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> MyIterator *<span class="title">CreateIterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ContreteIterator</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> SIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Object object[SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main21</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 创建一个集合</span></span><br><span class="line">Aggregate *ag = <span class="keyword">new</span> <span class="built_in">ConcreteAggregate</span>();</span><br><span class="line"><span class="comment">// 创建一个遍历这个集合的 迭代器</span></span><br><span class="line">MyIterator *it = ag-&gt;<span class="built_in">CreateIterator</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过迭代器 遍历 集合</span></span><br><span class="line"><span class="keyword">for</span> (; !(it-&gt;<span class="built_in">IsDone</span>()); it-&gt;<span class="built_in">Next</span>() )</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; it-&gt;<span class="built_in">CurrentItem</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清理相关资源 </span></span><br><span class="line"><span class="keyword">delete</span> it;</span><br><span class="line"><span class="keyword">delete</span> ag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">main21</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EngPerson</span><br><span class="line">&#123;</span><br><span class="line">Public:</span><br><span class="line"><span class="function">Void <span class="title">dowork1</span><span class="params">(Car *car)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Car. <span class="built_in">Run</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Void <span class="title">dowork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_car.<span class="built_in">run</span>()</span><br><span class="line">&#125;</span><br><span class="line">Private:</span><br><span class="line">Car m_car;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;设计模式-行为型模式&quot;&gt;&lt;a href=&quot;#设计模式-行为型模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-行为型模式&quot;&gt;&lt;/a&gt;设计模式-行为型模式&lt;/h1&gt;&lt;h2 id=&quot;1、模板模式&quot;&gt;&lt;a href=&quot;#1、模板模式&quot; class=&quot;headerlink&quot; title=&quot;1、模板模式&quot;&gt;&lt;/a&gt;1、模板模式&lt;/h2&gt;&lt;h3 id=&quot;1-1、概念&quot;&gt;&lt;a href=&quot;#1-1、概念&quot; class=&quot;headerlink&quot; title=&quot;1.1、概念&quot;&gt;&lt;/a&gt;1.1、概念&lt;/h3&gt;&lt;p&gt;Template Method模式也叫模板方法模式，是行为模式之一，它把具有特定步骤算法中的某些必要的处理委让给抽象方法，通过子类继承对抽象方法的不同实现改变整个算法的行为。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-结构型模式</title>
    <link href="http://example.com/2022/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-07T03:06:47.000Z</published>
    <updated>2022-09-09T02:20:41.694Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="设计模式-结构型模式"><a href="#设计模式-结构型模式" class="headerlink" title="设计模式-结构型模式"></a>设计模式-结构型模式</h1><h2 id="1、代理模式"><a href="#1、代理模式" class="headerlink" title="1、代理模式"></a>1、代理模式</h2><h3 id="1-1、概念"><a href="#1-1、概念" class="headerlink" title="1.1、概念"></a>1.1、概念</h3><p>Proxy模式又叫做代理模式，是构造型的设计模式之一，它可以为其他对象提供一种代理（Proxy）以控制对这个对象的访问。<span id="more"></span></p><p>所谓代理，是指具有与代理元（被代理的对象）具有相同的接口的类，客户端必须通过代理与被代理的目标类交互，而代理一般在交互的过程中（交互前后），进行某些特别的处理。</p><h3 id="1-2、类图角色和职责"><a href="#1-2、类图角色和职责" class="headerlink" title="1.2、类图角色和职责"></a>1.2、类图角色和职责</h3><p><img src="https://pic.imgdb.cn/item/6319ada616f2c2beb12d6709.png"></p><p><img src="https://pic.imgdb.cn/item/6319adcb16f2c2beb12d9036.png"></p><p><img src="https://pic.imgdb.cn/item/6319add816f2c2beb12d9fb3.png"></p><ol><li>subject（抽象主题角色）：<br>真实主题与代理主题的共同接口。</li><li>RealSubject（真实主题角色）：<br> 定义了代理角色所代表的真实对象。 </li><li>Proxy（代理主题角色）：<br>含有对真实主题角色的引用，代理角色通常在将客户端调用传递给真是主题对象之前或者之后执行某些操作，而不是单纯返回真实的对象。</li></ol><p><strong>适合于：<br>为其他对象提供一种代理以控制对这个对象的访问。</strong></p><h3 id="1-3、理论模板"><a href="#1-3、理论模板" class="headerlink" title="1.3、理论模板"></a>1.3、理论模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//理论模型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Interface</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Request</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealClass</span> : <span class="keyword">public</span> Interface</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Request</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;真实的请求&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyClass</span> : <span class="keyword">public</span> Interface</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">RealClass* m_realClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Request</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_realClass= <span class="keyword">new</span> <span class="built_in">RealClass</span>();</span><br><span class="line">m_realClass-&gt;<span class="built_in">Request</span>();</span><br><span class="line"><span class="keyword">delete</span> m_realClass;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">客户端：</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ProxyClass* test=<span class="keyword">new</span> <span class="built_in">ProxyClass</span>();</span><br><span class="line">test-&gt;<span class="built_in">Request</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4、案例"><a href="#1-4、案例" class="headerlink" title="1.4、案例"></a>1.4、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a包含了一个类b，类b实现了某一个协议（一套接口）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppProtocol</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">ApplicationDidFinsh</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//协议实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppDelegate</span> : <span class="keyword">public</span> AppProtocol</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AppDelegate</span>()</span><br><span class="line">&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">ApplicationDidFinsh</span><span class="params">()</span>  <span class="comment">//cocos2dx函数的入口点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;ApplicationDidFinsh do...\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Application是代理类，在代理类中包含一个真正的实体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Application</span>()</span><br><span class="line">&#123;</span><br><span class="line">ap = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ap = <span class="keyword">new</span> <span class="built_in">AppDelegate</span>();</span><br><span class="line">ap-&gt;<span class="built_in">ApplicationDidFinsh</span>();</span><br><span class="line"><span class="keyword">delete</span> ap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">AppDelegate *ap;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//好处：main函数不需要修改了。只需要修改协议实现类</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Application *app = <span class="keyword">new</span> <span class="built_in">Application</span>();</span><br><span class="line">app-&gt;<span class="built_in">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (app == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(app);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例2 cocos2d-x中应用程序代理类</span></span><br><span class="line"><span class="comment">//出版社被代理对象，要卖书</span></span><br><span class="line"><span class="comment">//淘宝、当当网（网上书店），代理对象</span></span><br><span class="line"><span class="comment">//客户端通过当当网进行买书。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">subject（抽象主题角色）：</span></span><br><span class="line"><span class="comment">真实主题与代理主题的共同接口。</span></span><br><span class="line"><span class="comment">RealSubject（真实主题角色）：</span></span><br><span class="line"><span class="comment">定义了代理角色所代表的真实对象。 </span></span><br><span class="line"><span class="comment">Proxy（代理主题角色）：</span></span><br><span class="line"><span class="comment">含有对真实主题角色的引用，代理角色通常在将客户端调用传递给真是主题对象之前或者之后执行某些操作，而不是单纯返回真实的对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提示：a中包含b类；a、b类实现协议类protocol </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Subject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SaleBook</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">RealSubject</span> : <span class="keyword">public</span> Subject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SaleBook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;实体店买书....\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProxyTaoBao</span> : <span class="keyword">public</span> Subject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SaleBook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">Double11</span>();</span><br><span class="line">RealSubject rs;</span><br><span class="line">rs.<span class="built_in">SaleBook</span>();</span><br><span class="line"><span class="built_in">Double11</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Double11</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Double11 打折 半价&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProxyTaoBao2</span> : <span class="keyword">public</span> Subject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetRealSubject</span><span class="params">(RealSubject *rs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_s = rs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">SaleBook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Double11</span>();</span><br><span class="line">m_s-&gt;<span class="built_in">SaleBook</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Double11</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Double11 打折 半价&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">RealSubject *m_s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ProxyTaoBao *ptb = <span class="keyword">new</span> ProxyTaoBao;</span><br><span class="line">ptb-&gt;<span class="built_in">SaleBook</span>();</span><br><span class="line"><span class="keyword">delete</span> ptb;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、装饰模式"><a href="#2、装饰模式" class="headerlink" title="2、装饰模式"></a>2、装饰模式</h2><h3 id="2-1、概念"><a href="#2-1、概念" class="headerlink" title="2.1、概念"></a>2.1、概念</h3><p>装饰（ Decorator ）模式又叫做包装模式。通过一种对客户端透明的方式来扩展对象的功能，是继承关系的一个替换方案。</p><p>装饰模式就是把要添加的附加功能分别放在单独的类中，并让这个类包含它要装饰的对象，当需要执行时，客户端就可以有选择地、按顺序地使用装饰功能包装对象。</p><h3 id="2-2、类图角色和职责"><a href="#2-2、类图角色和职责" class="headerlink" title="2.2、类图角色和职责"></a>2.2、类图角色和职责</h3><p><img src="https://pic.imgdb.cn/item/6319b27f16f2c2beb1341a4b.png"></p><p><img src="https://pic.imgdb.cn/item/6319b29216f2c2beb1342e73.png"></p><p><strong>适用于：<br>装饰者模式（Decorator Pattern）动态的给一个对象添加一些额外的职责。就增加功能来说，此模式比生成子类更为灵活。</strong></p><h3 id="2-3、案例"><a href="#2-3、案例" class="headerlink" title="2.3、案例"></a>2.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunCar</span> : <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;可以跑&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SwimCarDirector</span> : <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SwimCarDirector</span>(Car *p)</span><br><span class="line">&#123;</span><br><span class="line">m_p = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;可以游&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_p-&gt;<span class="built_in">show</span>();</span><br><span class="line"><span class="built_in">swim</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Car *m_p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlyCarDirector</span> : <span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FlyCarDirector</span>(Car *p)</span><br><span class="line">&#123;</span><br><span class="line">m_p = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;可以飞&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_p-&gt;<span class="built_in">show</span>();</span><br><span class="line"><span class="built_in">fly</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Car *m_p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Car *runcar = <span class="literal">NULL</span>;</span><br><span class="line">runcar = <span class="keyword">new</span> RunCar;</span><br><span class="line">runcar-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;车开始装饰swim&quot;</span>&lt;&lt;endl;</span><br><span class="line">SwimCarDirector *swimCar = <span class="keyword">new</span> <span class="built_in">SwimCarDirector</span>(runcar);</span><br><span class="line">swimCar-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;车开始装饰fly&quot;</span>&lt;&lt;endl;</span><br><span class="line">FlyCarDirector *flyCar = <span class="keyword">new</span> <span class="built_in">FlyCarDirector</span>(swimCar);</span><br><span class="line">flyCar-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> flyCar;</span><br><span class="line"><span class="keyword">delete</span> swimCar;</span><br><span class="line"><span class="keyword">delete</span> runcar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、适配器模式"><a href="#3、适配器模式" class="headerlink" title="3、适配器模式"></a>3、适配器模式</h2><h3 id="3-1、概念"><a href="#3-1、概念" class="headerlink" title="3.1、概念"></a>3.1、概念</h3><p>Adapter模式也叫适配器模式，是构造型模式之一，通过Adapter模式可以改变已有类（或外部类）的接口形式。</p><h3 id="3-2、角色和职责"><a href="#3-2、角色和职责" class="headerlink" title="3.2、角色和职责"></a>3.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631a8e7416f2c2beb115fb54.png"></p><p><strong>适用于：<br>是将一个类的接口转换成客户希望的另外一个接口。使得原来由于接口不兼容而不能一起工作的那些类可以一起工作。</strong></p><h3 id="3-3、案例"><a href="#3-3、案例" class="headerlink" title="3.3、案例"></a>3.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Current18v</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use18vCurrent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;使用18v的交流电&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Current220v</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use220vCurrent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;使用220v的交流电&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span>: <span class="keyword">public</span> Current18v</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Adapter</span>(Current220v* p220v)</span><br><span class="line">    &#123;</span><br><span class="line">        m_p220v = p220v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use18vCurrent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;adapter中使用电流&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_p220v-&gt;<span class="built_in">use220vCurrent</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Current220v* m_p220v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Current220v* p220v = <span class="keyword">new</span> Current220v;</span><br><span class="line">    Adapter* padapter = <span class="keyword">new</span> <span class="built_in">Adapter</span>(p220v);</span><br><span class="line">    padapter-&gt;<span class="built_in">use18vCurrent</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> p220v;</span><br><span class="line">    <span class="keyword">delete</span> padapter;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>适配器模式与装饰器模式的区别</strong></em><br>装饰器与适配器都有一个别名叫做 包装模式(Wrapper)，它们看似都是起到包装一个类或对象的作用，但是使用它们的目的很不一一样。<br><em>适配器模式的意义是要将一个接口转变成另一个接口，它的目的是通过改变接口来达到<strong>重复使用</strong>的目的。<br>而装饰器模式不是要改变被装饰对象的接口，而是恰恰要保持原有的接口，但是<strong>增强原有对象的功能</strong>，或者改变原有对象的处理方式而<strong>提升性能</strong>。所以这两个模式设计的目的是不同的。</em></p><h2 id="4、组合模式"><a href="#4、组合模式" class="headerlink" title="4、组合模式"></a>4、组合模式</h2><h3 id="4-1、概念"><a href="#4-1、概念" class="headerlink" title="4.1、概念"></a>4.1、概念</h3><p>Composite模式也叫组合模式，是构造型的设计模式之一。通过递归手段来构造树形的对象结构，并可以通过一个对象来访问整个对象树。</p><h3 id="4-2、角色和职责"><a href="#4-2、角色和职责" class="headerlink" title="4.2、角色和职责"></a>4.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631a963f16f2c2beb11cfa29.png"></p><ol><li>Component （树形结构的节点抽象）</li></ol><ul><li>为所有的对象定义统一的接口（公共属性，行为等的定义）</li><li>提供管理子节点对象的接口方法</li><li>[可选]提供管理父节点对象的接口方法</li></ul><ol start="2"><li><p>Leaf （树形结构的叶节点）<br>Component的实现子类</p></li><li><p>Composite（树形结构的枝节点）<br>Component的实现子类</p></li></ol><p><strong>适用于：<br>单个对象和组合对象的使用具有一致性。将对象组合成树形结构以表示“部分–整体”</strong></p><h3 id="4-3、案例"><a href="#4-3、案例" class="headerlink" title="4.3、案例"></a>4.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IFile</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">add</span><span class="params">(IFile *ifile)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">remove</span><span class="params">(IFile *ifile)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> list&lt;IFile *&gt;* <span class="title">getChild</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">File</span> : <span class="keyword">public</span> IFile</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">File</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">m_list = <span class="literal">NULL</span>;</span><br><span class="line">m_name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">m_name = name;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">File</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_list != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">add</span><span class="params">(IFile *ifile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">remove</span><span class="params">(IFile *ifile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> list&lt;IFile *&gt;* <span class="title">getChild</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">list&lt;IFile *&gt; *m_list;</span><br><span class="line">stringm_name;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Folder</span> : <span class="keyword">public</span> IFile</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Folder</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">m_list = <span class="keyword">new</span> list&lt;IFile *&gt;;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Folder</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_list == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">add</span><span class="params">(IFile *ifile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_list-&gt;<span class="built_in">push_back</span>(ifile);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">remove</span><span class="params">(IFile *ifile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_list-&gt;<span class="built_in">remove</span>(ifile);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> list&lt;IFile *&gt;* <span class="title">getChild</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">list&lt;IFile *&gt; *m_list;</span><br><span class="line">stringm_name;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showTree</span><span class="params">(IFile *ifile, <span class="type">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list&lt;IFile *&gt; *l = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;level; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">ifile-&gt;<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">l = ifile-&gt;<span class="built_in">getChild</span>();</span><br><span class="line"><span class="keyword">if</span> (l != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (list&lt;IFile *&gt;::iterator it=l-&gt;<span class="built_in">begin</span>(); it!=l-&gt;<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( (*it)-&gt;<span class="built_in">getChild</span>() == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=level; i++) <span class="comment">//注意 &lt;= </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">(*it)-&gt;<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">showTree</span>((*it), level + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Folder *root = <span class="keyword">new</span> <span class="built_in">Folder</span>(<span class="string">&quot;C:&quot;</span>);</span><br><span class="line"></span><br><span class="line">Folder *dir1 = <span class="keyword">new</span> <span class="built_in">Folder</span>(<span class="string">&quot;111dir&quot;</span>);</span><br><span class="line">File *txt1 = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">&quot;aaa.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">Folder *dir12 = <span class="keyword">new</span> <span class="built_in">Folder</span>(<span class="string">&quot;222dir&quot;</span>);</span><br><span class="line"><span class="comment">//dir12-&gt;display();</span></span><br><span class="line">File *txt12 = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">&quot;222.txt&quot;</span>);</span><br><span class="line"><span class="comment">//txt12-&gt;display();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root-&gt;<span class="built_in">display</span>();</span><br><span class="line">root-&gt;<span class="built_in">add</span>(dir1);</span><br><span class="line">root-&gt;<span class="built_in">add</span>(txt1);</span><br><span class="line"></span><br><span class="line">dir1-&gt;<span class="built_in">add</span>(dir12);</span><br><span class="line">dir1-&gt;<span class="built_in">add</span>(txt12);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">list&lt;IFile *&gt; *l = dir1-&gt;getChild();</span></span><br><span class="line"><span class="comment">for (list&lt;IFile *&gt;::iterator it=l-&gt;begin(); it!=l-&gt;end(); it++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">(*it)-&gt;display();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//开发一个递归函数 现在根结点下的所有子结点</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;测试递归函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">showTree</span>(root, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> txt12;</span><br><span class="line"><span class="keyword">delete</span> dir12;</span><br><span class="line"><span class="keyword">delete</span> dir1;</span><br><span class="line"><span class="keyword">delete</span> txt1;</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、桥接模式"><a href="#5、桥接模式" class="headerlink" title="5、桥接模式"></a>5、桥接模式</h2><h3 id="5-1、概念"><a href="#5-1、概念" class="headerlink" title="5.1、概念"></a>5.1、概念</h3><p>Bridge模式又叫做桥接模式，是构造型的设计模式之一。Bridge模式基于类的最小设计原则，通过使用封装，聚合以及继承等行为来让不同的类承担不同的责任。特的主要特点是把抽象（abstraction）与行为实现（implementation）分离开来，从而可以保持各部分的独立性以及应对它们的功能扩展。</p><h3 id="5-2、角色和职责"><a href="#5-2、角色和职责" class="headerlink" title="5.2、角色和职责"></a>5.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631a9a5716f2c2beb120ded3.png"></p><ol><li>Client<br>Bridge模式的使用者</li><li>Abstraction<br>抽象类接口（接口或抽象类）维护对行为实现（Implementor）的引用</li><li>Refined Abstraction<br>Abstraction子类</li><li>Implementor<br>行为实现类接口 (Abstraction接口定义了基于Implementor接口的更高层次的操作)</li><li>ConcreteImplementor<br>Implementor子类</li></ol><p><strong>适用于：<br>桥接模式（Bridge Pattern）是将抽象部分与实现部分分离（解耦合），使它们都可以独立的变化。</strong></p><h3 id="5-3、案例"><a href="#5-3、案例" class="headerlink" title="5.3、案例"></a>5.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//车 安装 发动机 ；不同型号的车，安装不同型号的发动机</span></span><br><span class="line"><span class="comment">//图形 填 颜色 ；不同形状的图形，填充上 不同的颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将“车 安装 发动机”这个抽象 和 实现进行分离；两个名字 就设计两个类；</span></span><br><span class="line"><span class="comment">//将“图形 填 颜色”这个抽象 和 实现 进行分离，两个名字，就设计两个类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCar1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW5</span> : <span class="keyword">public</span> MyCar1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;BMW5 3500CC&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW6</span> : <span class="keyword">public</span> MyCar1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;BMW6 4000CC&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jeep11</span> : <span class="keyword">public</span> MyCar1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Jeep11 1100CC&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jeep12</span> : <span class="keyword">public</span> MyCar1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Jeep12 1200CC&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同的车型，不同型号，安装不同类型的发动机，会引起子类的泛滥</span></span><br><span class="line"><span class="comment">//问题引出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main1601</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Jeep12 *j12 = <span class="keyword">new</span> Jeep12;</span><br><span class="line">j12-&gt;<span class="built_in">installEngine</span>();</span><br><span class="line"><span class="keyword">delete</span> j12;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCar2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine3500</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine4000</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine1100</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine1200</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW</span> : <span class="keyword">public</span> MyCar2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine3500</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3500CC&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine4000</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4000CC&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine1100</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1100CC&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine1200</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1200CC&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样的设计 不符合开闭原则</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main1602</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BMW *bmw5 = <span class="keyword">new</span> BMW;</span><br><span class="line">bmw5-&gt;<span class="built_in">installEngine3500</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//需要把“安装发动机”这个事，做很好的分解；把抽象 和 行为实现 分开</span></span><br><span class="line"><span class="comment">//发动机是一个名次，专门抽象成一个类；类中含有一个成员函数，安装发动机</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engine4000</span> : <span class="keyword">public</span> Engine</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;安装发动机 Engine4000&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engine3500</span> : <span class="keyword">public</span> Engine</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;安装发动机 Engine 3500&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Car</span>(Engine *pengine)</span><br><span class="line">&#123;</span><br><span class="line">m_engine = pengine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Engine *m_engine;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BMW7</span> :<span class="keyword">public</span> Car</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BMW7</span>(Engine *p) : <span class="built_in">Car</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意车的安装  和 发动机的安装 不同之处</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">installEngine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;BMW7 &quot;</span> ; </span><br><span class="line">m_engine-&gt;<span class="built_in">installEngine</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main163</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Engine4000 *e4000 = <span class="keyword">new</span> Engine4000;</span><br><span class="line">BMW7 *bmw7 = <span class="keyword">new</span> <span class="built_in">BMW7</span>(e4000);</span><br><span class="line">bmw7-&gt;<span class="built_in">installEngine</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> bmw7;</span><br><span class="line"><span class="keyword">delete</span> e4000;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//main1601();</span></span><br><span class="line"><span class="comment">//main1602();</span></span><br><span class="line"><span class="built_in">main163</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、外观模式"><a href="#6、外观模式" class="headerlink" title="6、外观模式"></a>6、外观模式</h2><h3 id="6-1、概念"><a href="#6-1、概念" class="headerlink" title="6.1、概念"></a>6.1、概念</h3><p>Facade模式也叫外观模式，是由GoF提出的23种设计模式中的一种。Facade模式为一组具有类似功能的类群，比如类库、子系统等等，提供一个一致的简单的界面。这个一致的简单的界面被称作facade。</p><h3 id="6-2、角色和职责"><a href="#6-2、角色和职责" class="headerlink" title="6.2、角色和职责"></a>6.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631a9e9816f2c2beb1255057.png"></p><ol><li>Façade<br>为调用方, 定义简单的调用接口。</li><li>Clients<br>调用者。通过Facade接口调用提供某功能的内部类群。</li><li>Packages<br>功能提供者。指提供功能的类群（模块或子系统）</li></ol><p><strong>适用于：<br>为子系统中统一一套接口，让子系统更加容易使用。</strong></p><h3 id="6-3、案例"><a href="#6-3、案例" class="headerlink" title="6.3、案例"></a>6.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SystemA</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doThing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;systemA do....&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SystemB</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doThing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;systemB do....&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SystemC</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doThing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;systemC do....&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Facade</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Facade</span>()</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="keyword">new</span> SystemA;</span><br><span class="line">b = <span class="keyword">new</span> SystemB;</span><br><span class="line">c = <span class="keyword">new</span> SystemC;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Facade</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line"><span class="keyword">delete</span> b;</span><br><span class="line"><span class="keyword">delete</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doThing</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a-&gt;<span class="built_in">doThing</span>();</span><br><span class="line">b-&gt;<span class="built_in">doThing</span>();</span><br><span class="line">c-&gt;<span class="built_in">doThing</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">SystemA *a;</span><br><span class="line">SystemB *b;</span><br><span class="line">SystemC *c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SystemA *a = new SystemA;</span></span><br><span class="line"><span class="comment">SystemB *b = new SystemB;</span></span><br><span class="line"><span class="comment">SystemC *c = new SystemC;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a-&gt;doThing();</span></span><br><span class="line"><span class="comment">b-&gt;doThing();</span></span><br><span class="line"><span class="comment">c-&gt;doThing();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">delete a;</span></span><br><span class="line"><span class="comment">delete b;</span></span><br><span class="line"><span class="comment">delete c;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Facade *f = <span class="keyword">new</span> Facade;</span><br><span class="line">f-&gt;<span class="built_in">doThing</span>();</span><br><span class="line"><span class="keyword">delete</span> f;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、享元模式"><a href="#7、享元模式" class="headerlink" title="7、享元模式"></a>7、享元模式</h2><h3 id="7-1、概念"><a href="#7-1、概念" class="headerlink" title="7.1、概念"></a>7.1、概念</h3><p>Flyweight模式也叫享元模式，是构造型模式之一，它通过与其他类似对象共享数据来减小内存占用。</p><blockquote><p>在面向对象系统的设计和实现中，创建对象是最为常见的操作。这里面就有一个问题：如果一个应用程序使用了太多的对象，就会造成很大的存储开销。特别是对于大量轻量级（细粒度）的对象，比如在文档编辑器的设计过程中，我们如果为每个字母创建一个对象的话，系统可能会因为大量的对象而造成存储开销的浪费。例如一个字母“a”在文档种出现了100000次，而实际上我们可以让这十万个字母“a”共享一个对象，当然因为在不同的位置可能字母“a”有不同的显示效果（例如字体和大小等设置不同），在这种情况我们可以将对象的状态分为“外部状态”和“内部状态”，将可以被共享（不会变化）的状态作为内部状态存储在对象中，而外部对象（例如上面提到的字体、大小等）我们可以在适当的时候将外部对象置为参数传递给对象（例如在显示的时候，将字体、大小等信息传递给对象）。</p></blockquote><h3 id="7-2、角色和职责"><a href="#7-2、角色和职责" class="headerlink" title="7.2、角色和职责"></a>7.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/631aa25a16f2c2beb129a6b3.png"></p><ol><li>抽象享元角色：<br>所有具体享元类的父类，规定一些需要实现的公共接口。</li><li>具体享元角色：<br>抽象享元角色的具体实现类，并实现了抽象享元角色规定的方法。</li><li>享元工厂角色：<br>负责创建和管理享元角色。</li></ol><p><strong>使用场景：<br>是以共享的方式，高效的支持大量的细粒度的对象。</strong></p><h3 id="7-3、案例"><a href="#7-3、案例" class="headerlink" title="7.3、案例"></a>7.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;map&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age, <span class="type">int</span> sex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">stringname;</span><br><span class="line"><span class="type">int</span>age;</span><br><span class="line"><span class="type">int</span>sex; <span class="comment">//1男 2女</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Teacher</span>(string id, string name, <span class="type">int</span> age, <span class="type">int</span> sex) : <span class="built_in">Person</span>(name, age, sex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;id:&quot;</span> &lt;&lt;id &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt;name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;age:&quot;</span> &lt;&lt;age &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;sex:&quot;</span> &lt;&lt;sex &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TeacherFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TeacherFactory</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_tpool.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">TeacherFactory</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//内存管理 永远是c++程序员的痛</span></span><br><span class="line"><span class="keyword">while</span> (!m_tpool.<span class="built_in">empty</span>()) <span class="comment">//在工厂中创建老师结点，在工厂中销毁老师结点</span></span><br><span class="line">&#123;</span><br><span class="line">Teacher *tmp = <span class="literal">NULL</span>;</span><br><span class="line">map&lt;string, Teacher *&gt;::iterator it = m_tpool.<span class="built_in">begin</span>();</span><br><span class="line">tmp = it-&gt;second;</span><br><span class="line">m_tpool.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="keyword">delete</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过Teacher的pool，来存放老师结点，在TeacherFactory中创建老师、销毁老师</span></span><br><span class="line"><span class="function">Teacher *<span class="title">getTeacher</span><span class="params">(string tid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stringname;</span><br><span class="line"><span class="type">int</span>age;</span><br><span class="line"><span class="type">int</span>sex;</span><br><span class="line"></span><br><span class="line">Teacher *tmp = <span class="literal">NULL</span>;</span><br><span class="line">map&lt;string, Teacher*&gt;::iterator it =  m_tpool.<span class="built_in">find</span>(tid);</span><br><span class="line"><span class="keyword">if</span> (it == m_tpool.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;id为: &quot;</span> &lt;&lt; tid &lt;&lt; <span class="string">&quot; 的老师不存在,系统为你创建该老师，请输入以下信息&quot;</span> &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入老师姓名：&quot;</span>;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入老师年龄：&quot;</span>;</span><br><span class="line">cin &gt;&gt; age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入老师性别 1男 2女：&quot;</span>;</span><br><span class="line">cin &gt;&gt; sex;</span><br><span class="line">tmp = <span class="keyword">new</span> <span class="built_in">Teacher</span>(tid, name, age, sex);</span><br><span class="line">m_tpool.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, Teacher*&gt;(tid, tmp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = (it-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">map&lt;string, Teacher *&gt; m_tpool;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher *t1 = new Teacher(&quot;001&quot;, &quot;小李&quot;, 30, 1);</span></span><br><span class="line"><span class="comment">Teacher *t2 = new Teacher(&quot;002&quot;, &quot;小张&quot;, 30, 1);</span></span><br><span class="line"><span class="comment">Teacher *t3 = new Teacher(&quot;001&quot;, &quot;小李&quot;, 30, 1);</span></span><br><span class="line"><span class="comment">Teacher *t4 = new Teacher(&quot;004&quot;, &quot;小吴&quot;, 30, 1);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot;t1 t3的 工号一样，但是也不是同一个人 &quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">delete t1;</span></span><br><span class="line"><span class="comment">delete t2;</span></span><br><span class="line"><span class="comment">delete t3;</span></span><br><span class="line"><span class="comment">delete t4;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">TeacherFactory *teacherFactory = <span class="keyword">new</span> TeacherFactory;</span><br><span class="line">Teacher *t1 = teacherFactory-&gt;<span class="built_in">getTeacher</span>(<span class="string">&quot;001&quot;</span>);</span><br><span class="line">t1-&gt;<span class="built_in">printT</span>();</span><br><span class="line"></span><br><span class="line">Teacher *t2 = teacherFactory-&gt;<span class="built_in">getTeacher</span>(<span class="string">&quot;001&quot;</span>);</span><br><span class="line">t2-&gt;<span class="built_in">printT</span>();</span><br><span class="line">    <span class="keyword">delete</span> teacherFactory;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;设计模式-结构型模式&quot;&gt;&lt;a href=&quot;#设计模式-结构型模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-结构型模式&quot;&gt;&lt;/a&gt;设计模式-结构型模式&lt;/h1&gt;&lt;h2 id=&quot;1、代理模式&quot;&gt;&lt;a href=&quot;#1、代理模式&quot; class=&quot;headerlink&quot; title=&quot;1、代理模式&quot;&gt;&lt;/a&gt;1、代理模式&lt;/h2&gt;&lt;h3 id=&quot;1-1、概念&quot;&gt;&lt;a href=&quot;#1-1、概念&quot; class=&quot;headerlink&quot; title=&quot;1.1、概念&quot;&gt;&lt;/a&gt;1.1、概念&lt;/h3&gt;&lt;p&gt;Proxy模式又叫做代理模式，是构造型的设计模式之一，它可以为其他对象提供一种代理（Proxy）以控制对这个对象的访问。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-创建型模式</title>
    <link href="http://example.com/2022/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-09-07T03:05:17.000Z</published>
    <updated>2022-09-08T08:10:16.745Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="设计模式-创建型模式"><a href="#设计模式-创建型模式" class="headerlink" title="设计模式-创建型模式"></a>设计模式-创建型模式</h1><h2 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h2><h3 id="1-1、概念"><a href="#1-1、概念" class="headerlink" title="1.1、概念"></a>1.1、概念</h3><p>单例模式是一种对象创建型模式，使用单例模式，可以保证为一个类只生成唯一的实例对象。也就是说，在整个程序空间中，该类只存在一个实例对象。</p><blockquote><p>GoF对单例模式的定义是：**保证一个类只有一个实例存在，同时提供能对该实例加以访问的全局访问方法。<span id="more"></span></p></blockquote><p><img src="https://pic.imgdb.cn/item/63193e5c16f2c2beb1b448b8.png"></p><h3 id="1-2、为什么使用单例模式"><a href="#1-2、为什么使用单例模式" class="headerlink" title="1.2、为什么使用单例模式"></a>1.2、为什么使用单例模式</h3><p>在应用系统开发中，我们常常有以下需求：</p><ul><li>在多个线程之间，比如初始化一次 socket 资源；比如servlet环境，共享同一个资源或者操作同一个对象；</li><li>在整个程序空间使用全局变量，共享资源；</li><li>大规模系统中，为了性能的考虑，需要节省对象的创建时间等等。</li></ul><p>因为 Singleton 模式可以保证为一个类只生成唯一的实力对象，所以这些情况，Singleton模式就派上用场了。</p><h3 id="1-3、实现单例模式的常用步骤"><a href="#1-3、实现单例模式的常用步骤" class="headerlink" title="1.3、实现单例模式的常用步骤"></a>1.3、实现单例模式的常用步骤</h3><ol><li>构造函数私有化</li><li>提供一个全局的静态方法（全局访问点）</li><li>在类中定义一个静态指针，指向本类的变量的静态变量指针</li></ol><h3 id="1-4、饿汉式单例和懒汉式"><a href="#1-4、饿汉式单例和懒汉式" class="headerlink" title="1.4、饿汉式单例和懒汉式"></a>1.4、饿汉式单例和懒汉式</h3><h4 id="1-4-1、懒汉式单例"><a href="#1-4-1、懒汉式单例" class="headerlink" title="1.4.1、懒汉式单例"></a>1.4.1、懒汉式单例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Singelton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Singelton</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_singer = <span class="literal">NULL</span>;</span><br><span class="line">m_count = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;构造函数Singelton ... do&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> Singelton *<span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_singer == <span class="literal">NULL</span> )          <span class="comment">//懒汉式：1 每次获取实例都要判断 2 多线程会有问题</span></span><br><span class="line">&#123;</span><br><span class="line">m_singer = <span class="keyword">new</span> Singelton;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m_singer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_count: &quot;</span> &lt;&lt; m_count &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Singelton *m_singer;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singelton *Singelton::m_singer = <span class="literal">NULL</span>;   <span class="comment">//懒汉式 并没有创建单例对象</span></span><br><span class="line"><span class="type">int</span> Singelton::m_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;演示 懒汉式&quot;</span> &lt;&lt; endl;</span><br><span class="line">Singelton *p1 = Singelton::<span class="built_in">getInstance</span>();   <span class="comment">//只有在使用的时候，才去创建对象。</span></span><br><span class="line">Singelton *p2 = Singelton::<span class="built_in">getInstance</span>();</span><br><span class="line"><span class="keyword">if</span> (p1 != p2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;不是同一个对象&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;是同一个对象&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">p1-&gt;<span class="built_in">printT</span>();</span><br><span class="line">p2-&gt;<span class="built_in">printT</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2、饿汉式单例"><a href="#1-4-2、饿汉式单例" class="headerlink" title="1.4.2、饿汉式单例"></a>1.4.2、饿汉式单例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Singelton2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Singelton2</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_singer = <span class="literal">NULL</span>;</span><br><span class="line">m_count = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;构造函数Singelton ... do&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> Singelton2 *<span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// if (m_singer == NULL )</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// m_singer = new Singelton2;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">return</span> m_singer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Singelton2::FreeInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_singer != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_singer;</span><br><span class="line">m_singer = <span class="literal">NULL</span>;</span><br><span class="line">m_count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_count: &quot;</span> &lt;&lt; m_count &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Singelton2 *m_singer;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singelton2 *Singelton2::m_singer = <span class="keyword">new</span> Singelton2;      <span class="comment">//不管你创建不创建实例，均把实例new出来</span></span><br><span class="line"><span class="type">int</span> Singelton2::m_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;演示 饿汉式&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Singelton2 *p1 = Singelton2::<span class="built_in">getInstance</span>();         <span class="comment">//只有在使用的时候，才去创建对象。</span></span><br><span class="line">Singelton2 *p2 = Singelton2::<span class="built_in">getInstance</span>();</span><br><span class="line"><span class="keyword">if</span> (p1 != p2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;不是同一个对象&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;是同一个对象&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">p1-&gt;<span class="built_in">printT</span>();</span><br><span class="line">p2-&gt;<span class="built_in">printT</span>();</span><br><span class="line">Singelton2::<span class="built_in">FreeInstance</span>();</span><br><span class="line">Singelton2::<span class="built_in">FreeInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5、多线程下的懒汉式单例和饿汉式单例"><a href="#1-5、多线程下的懒汉式单例和饿汉式单例" class="headerlink" title="1.5、多线程下的懒汉式单例和饿汉式单例"></a>1.5、多线程下的懒汉式单例和饿汉式单例</h3><p>&#x2F;&#x2F;</p><h3 id="1-6、多线程下懒汉式单例的-Double-Checked-Locking-优化"><a href="#1-6、多线程下懒汉式单例的-Double-Checked-Locking-优化" class="headerlink" title="1.6、多线程下懒汉式单例的 Double-Checked Locking 优化"></a>1.6、多线程下懒汉式单例的 Double-Checked Locking 优化</h3><p>&#x2F;&#x2F;双锁机制</p><h3 id="1-7、程序并发机制扩展阅读"><a href="#1-7、程序并发机制扩展阅读" class="headerlink" title="1.7、程序并发机制扩展阅读"></a>1.7、程序并发机制扩展阅读</h3><p>程序的并发执行往往带来与时间有关的错误，甚至引发灾难性的后果。这需要<br>引入同步机制。使用多进程与多线程时，有时需要协同两种或多种动作，此过程就<br>称同步（Synchronization）。引入同步机制的第一个原因是为了控制线程之间的资源<br>同步访问，因为多个线程在共享资源时如果发生访问冲突通常会带来不正确的后果。<br>例如，一个线程正在更新一个结构，同时另一个线程正试图读取同一个结构。结果，<br>我们将无法得知所读取的数据是新的还是旧的，或者是二者的混合。第二个原因是<br>有时要求确保线程之间的动作以指定的次序发生，如一个线程需要等待由另外一个<br>线程所引起的事件。</p><p>为了在多线程程序中解决同步问题，Windows提供了四种主要的同步对象，<br>每种对象相对于线程有两种状态——信号状态（signal state）和非信号状态（nonsignal<br>state）。当相关联的同步对象处于信号状态时，线程可以执行（访问共享资源），反<br>之必须等待。这四种同步对象是：</p><ol><li><strong>事件对象（Event）</strong>。事件对象作为标志在线程间传递信号。一个或多个线<br>程可等待一个事件对象，当指定的事件发生时，事件对象通知等待线程可以开始执<br>行。它有两种类型：自动重置（auto-reset）事件和手动重置（manual-reset）事件。</li><li><strong>临界区（Critical Section）</strong>。临界区对象通过提供一个进程内所有线程必须<br>共享的对象来控制线程。只有拥有那个对象的线程可以访问保护资源。在另一个线<br>程可以访问该资源之前，前一个线程必须释放临界区对象，以便新的线程可以索取<br>对象的访问权。</li><li><strong>互斥量（Mutex Semaphore）</strong>。互斥量的工作方式非常类似于临界区，只是<br>互斥量不仅保护一个进程内为多个线程使用的共享资源，而且还可以保护系统中两<br>个或多个进程之间的的共享资源。</li><li><strong>信号量（Semaphore）</strong>。信号量可以允许一个或有限个线程访问共享资源。<br>它是通过计数器来实现的，初始化时赋予计数器以可用资源数，当将信号量提供给<br>一个线程时，计数器的值减1，当一个线程释放它时，计数器值加1。当计数器值小<br>于等于0时，相应线程必须等待。信号量是Windows98同步系统的核心。从本质上<br>讲，互斥量是信号量的一种特殊形式。</li></ol><p>Windows&#x2F;NT还提供了另外一种Windows95没有的同步对象：可等待定时器<br>（Waitable Timer）。它可以封锁线程的执行，直到到达某一具体时间。这可以用于<br>后台任务。</p><p>同步问题是多线程编程中最复杂的问题，后面的linux系统编程中，还会有更深入的介绍。</p><h3 id="1-8、总结"><a href="#1-8、总结" class="headerlink" title="1.8、总结"></a>1.8、总结</h3><p>在很多人印象中，单例模式可能是23个设计模式中最简单的一个。如果不考虑多线程，的确如此，但是一旦要在多线程中运用，那么从我们的教程中可以了解到，它涉及到很多编译器，多线程，C++语言标准等方面的内容。本专题参考的资料如下：</p><ol><li>C++ Primer (Stanley B.Lippman),主要参考的是模板静态变量的初始化以及实例化。</li><li>MSDN,有关线程同步interlocked相关的知识。</li><li>Effective C++ 04条款(Scott Meyers) Non-Local-Static对象初始化顺序以及Meyers单例模式的实现。</li><li>Double-Checked Locking,Threads,Compiler Optimizations,and More（ScottMeyers），解释了由于编译器的优化，导致auto_ptr.reset函数不安全，shared_ptr有类似情况。我们避免使用reset函数。</li><li>C++全局和静态变量初始化顺序的研究(CSDN)。</li><li>四人帮的经典之作：设计模式</li><li>windows 核心编程(Jeffrey Richter)</li></ol><h2 id="2、简单工厂模式"><a href="#2、简单工厂模式" class="headerlink" title="2、简单工厂模式"></a>2、简单工厂模式</h2><h3 id="2-1、概念"><a href="#2-1、概念" class="headerlink" title="2.1、概念"></a>2.1、概念</h3><p>简单工厂模式属于类的创建型模式，又叫做静态工厂方法模式。通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><h3 id="2-2、模式中包含的角色及其职责"><a href="#2-2、模式中包含的角色及其职责" class="headerlink" title="2.2、模式中包含的角色及其职责"></a>2.2、模式中包含的角色及其职责</h3><ul><li><strong>工厂（Creator）角色</strong><br>简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以被外界直接调用，创建所需的产品对象。</li><li><strong>抽象（Product）角色</strong><br>简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li><li><strong>具体产品（Concrete Product）角色</strong><br>简单工厂模式所创建的具体实例对象</li></ul><p><img src="https://pic.imgdb.cn/item/6319813b16f2c2beb1f6dc82.png"></p><p>&#x2F;&#x2F;依赖: 一个类的对象 当另外一个类的函数参数 或者是 返回值</p><p><strong>简单工厂模式的优缺点：</strong><br>在这个模式中，工厂类是整个模式的关键所在。它包含必要的判断逻辑，能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。用户在使用时可以直接根据工厂类去创建所需的实例，而无需了解这些对象是如何创建以及如何组织的。有利于整个软件体系结构的优化。不难发现，简单工厂模式的缺点也正体现在其工厂类上，<strong>由于工厂类集中了所有实例的创建逻辑</strong>，所以“高内聚”方面做的并不好。另外，当系统中的具体产品类不断增多时，可能会出现要求工厂类也要做相应的修改，扩展性并不很好。</p><h3 id="2-3、案例"><a href="#2-3、案例" class="headerlink" title="2.3、案例"></a>2.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//思想：核心思想是用一个工厂，来根据输入的条件产生不同的类，然后根据不同类的virtual函数得到不同的结果。</span></span><br><span class="line"><span class="comment">//元素分析：</span></span><br><span class="line"><span class="comment">//抽象产品类：水果类</span></span><br><span class="line"><span class="comment">//具体的水果类：香蕉类、苹果类、梨子类</span></span><br><span class="line"><span class="comment">//优点 适用于不同情况创建不同的类时</span></span><br><span class="line"><span class="comment">//缺点 客户端必须要知道基类和工厂类，耦合性差  增加一个产品，需要修改工厂类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getFruit</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Banana</span>: <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getFruit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;香蕉&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pear</span>: <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getFruit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;梨子&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Fruit* <span class="title">Create</span><span class="params">(<span class="type">char</span>* name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Fruit* tmp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(name, <span class="string">&quot;pear&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = <span class="keyword">new</span> <span class="built_in">Pear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(name, <span class="string">&quot;banana&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = <span class="keyword">new</span> <span class="built_in">Banana</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fruit* pear = Factory::<span class="built_in">Creat</span>(<span class="string">&quot;pear&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pear == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;创建pear失败\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pear-&gt;<span class="built_in">getFruit</span>();</span><br><span class="line"></span><br><span class="line">    Fruit* banana = Factory::<span class="built_in">Creat</span>(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">    banana-&gt;<span class="built_in">getFruit</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、练习"><a href="#2-4、练习" class="headerlink" title="2.4、练习"></a>2.4、练习</h3><p>主要用于创建对象。新添加类时，不会影响以前的系统代码。<br>核心思想是用一个工厂来根据输入的条件产生不同的类，然后根据不同类的virtual函数得到不同的结果。<br><strong>GOOD</strong>: 适用于不同情况创建不同的类时<br><strong>BUG</strong>: 客户端必须要知道基类和工厂类，耦合性差</p><p><img src="https://pic.imgdb.cn/item/631989e516f2c2beb100e7fe.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//需求：</span></span><br><span class="line"><span class="comment">//模拟四则运算；</span></span><br><span class="line"><span class="comment">//用操作符工厂类生产操作符（加减乘除）, 进行结果运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运算符抽象类 COperation</span></span><br><span class="line"><span class="comment">//加减乘除具体的类(注意含有2个操作数)</span></span><br><span class="line"><span class="comment">//工厂类CCalculatorFactory </span></span><br><span class="line"><span class="comment">//核心思想 用一个工厂来根据输入的条件产生不同的类，然后根据不同类的virtual函数得到不同的结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">COperation</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> first;</span><br><span class="line"><span class="type">int</span> second;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">GetResult</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddOperation</span> : <span class="keyword">public</span> COperation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">GetResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubOperation</span> : <span class="keyword">public</span> COperation</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">GetResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> first - second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCalculatorFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> COperation*<span class="title">CreateOperation</span><span class="params">(<span class="type">char</span> cOperator)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">COperation * tmp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">switch</span>(cOperator)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">tmp = <span class="keyword">new</span> <span class="built_in">AddOperation</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">tmp = <span class="keyword">new</span> <span class="built_in">SubOperation</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">tmp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">COperation *op1 = CCalculatorFactory::<span class="built_in">CreateOperation</span>(<span class="string">&#x27;+&#x27;</span>);</span><br><span class="line">op1-&gt;first = <span class="number">10</span>;</span><br><span class="line">op1-&gt;second = <span class="number">20</span>;</span><br><span class="line">cout&lt;&lt;op1-&gt;<span class="built_in">GetResult</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">COperation *op2 = CCalculatorFactory::<span class="built_in">CreateOperation</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">op2-&gt;first = <span class="number">10</span>;</span><br><span class="line">op2-&gt;second = <span class="number">20</span>;</span><br><span class="line">cout&lt;&lt;op2-&gt;<span class="built_in">GetResult</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hello...\n&quot;</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、工厂模式"><a href="#3、工厂模式" class="headerlink" title="3、工厂模式"></a>3、工厂模式</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>工厂方法模式同样属于类的创建型模式又被称为多态工厂模式 。工厂方法模式的意义是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类当中。<br>核心工厂类不再负责产品的创建，这样核心类成为一个抽象工厂角色，仅负责具体工厂子类必须实现的接口，这样进一步抽象化的好处是使得工厂方法模式可以使系统在不修改具体工厂角色的情况下引进新的产品。</p><h3 id="3-2-类图角色和职责"><a href="#3-2-类图角色和职责" class="headerlink" title="3.2 类图角色和职责"></a>3.2 类图角色和职责</h3><ul><li><strong>抽象工厂（Creator）角色</strong><br>工厂方法模式的核心，任何工厂类都必须实现这个接口。</li><li><strong>具体工厂（ Concrete  Creator）角色</strong><br>具体工厂类是抽象工厂的一个实现，负责实例化产品对象。</li><li><strong>抽象（Product）角色</strong><br>工厂方法模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li><li><strong>具体产品（Concrete Product）角色</strong><br>工厂方法模式所创建的具体实例对象</li></ul><p><img src="https://pic.imgdb.cn/item/63198c8316f2c2beb103eebb.png"></p><p><img src="https://pic.imgdb.cn/item/63198c9416f2c2beb10401d4.png"></p><h3 id="3-3、工厂方法模式和简单工厂模式比较"><a href="#3-3、工厂方法模式和简单工厂模式比较" class="headerlink" title="3.3、工厂方法模式和简单工厂模式比较"></a>3.3、工厂方法模式和简单工厂模式比较</h3><p>工厂方法模式与简单工厂模式在结构上的不同不是很明显。工厂方法类的核心是一个抽象工厂类，而简单工厂模式把核心放在一个具体类上。</p><p>工厂方法模式之所以有一个别名叫多态性工厂模式是因为具体工厂类都有共同的接口，或者有共同的抽象父类。</p><p>当系统扩展需要添加新的产品对象时，仅仅需要添加一个具体对象以及一个具体工厂对象，原有工厂对象不需要进行任何修改，也不需要修改客户端，很好的符合了“开放－封闭”原则。而简单工厂模式在添加新产品对象后不得不修改工厂方法，扩展性不好。工厂方法模式退化后可以演变成简单工厂模式。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//“开放-封闭”通过添加代码的方式，不是通过修改代码的方式完成功能的增强。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sayname</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;fruit\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FruitFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getFruit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Fruit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//香蕉</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Banana</span>: <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sayname</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Banana\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//香蕉工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BananaFactory</span>: <span class="keyword">public</span> FruitFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getFruit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Banana;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//苹果</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> : <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sayname</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Apple \n&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//苹果工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleFactory</span> : <span class="keyword">public</span>  FruitFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getFruit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Apple;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FruitFactory* ff = <span class="literal">NULL</span>;</span><br><span class="line">    Fruit* fruit = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// banana</span></span><br><span class="line">    ff = <span class="keyword">new</span> <span class="built_in">BananaFactory</span>();</span><br><span class="line">    fruit = ff-&gt;<span class="built_in">getFruit</span>();</span><br><span class="line">    fruit-&gt;<span class="built_in">sayname</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> fruit;</span><br><span class="line">    <span class="keyword">delete</span> ff;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// apple</span></span><br><span class="line">    ff = <span class="keyword">new</span> <span class="built_in">AppleFactory</span>();</span><br><span class="line">    fruit = ff-&gt;<span class="built_in">gerFruit</span>();</span><br><span class="line">    fruit-&gt;<span class="built_in">sayname</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> fruit;</span><br><span class="line">    <span class="keyword">delete</span> ff;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello... \n;</span></span><br><span class="line"><span class="string">    system(&quot;</span>pause<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4、抽象工厂模式"><a href="#4、抽象工厂模式" class="headerlink" title="4、抽象工厂模式"></a>4、抽象工厂模式</h2><h3 id="4-1、概念"><a href="#4-1、概念" class="headerlink" title="4.1、概念"></a>4.1、概念</h3><p>抽象工厂模式是所有形态的工厂模式中最为抽象和最其一般性的。抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体类型的情况下，<strong>能够创建多个产品族的产品对象</strong>。</p><h3 id="4-2、产品族和产品等级结构"><a href="#4-2、产品族和产品等级结构" class="headerlink" title="4.2、产品族和产品等级结构"></a>4.2、产品族和产品等级结构</h3><p><img src="https://pic.imgdb.cn/item/631992ac16f2c2beb10b6008.png"></p><p><strong>备注：</strong><br>工厂模式：要么生产香蕉、要么生产苹果、要么生产西红柿；但是不能同时生产一个产品组。<br>抽象工厂：能同时生产一个产品族。&#x3D;&#x3D;&#x3D;》抽象工厂存在原因</p><p><strong>解释:</strong><br>具体工厂在开闭原则下, 能生产香蕉&#x2F;苹果&#x2F;梨子;  (产品等级结构)<br>抽象工厂:在开闭原则下, 能生产：南方香蕉&#x2F;苹果&#x2F;梨子 (产品族)  、北方香蕉&#x2F;苹果&#x2F;梨子</p><p><strong>重要区别：</strong><br>工厂模式只能生产一个产品。（要么香蕉、要么苹果）<br>抽象工厂可以一下生产一个产品族（里面有很多产品组成）</p><h3 id="4-3、模式中包含的角色机器职责"><a href="#4-3、模式中包含的角色机器职责" class="headerlink" title="4.3、模式中包含的角色机器职责"></a>4.3、模式中包含的角色机器职责</h3><ol><li><p>**抽象工厂（Creator）角色 **<br>抽象工厂模式的核心，包含对多个产品结构的声明，任何工厂类都必须实现这个接口。</p></li><li><p><strong>具体工厂（ Concrete  Creator）角色</strong><br>具体工厂类是抽象工厂的一个实现，负责实例化某个产品族中的产品对象。</p></li><li><p><strong>抽象（Product）角色</strong><br>抽象模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</p></li><li><p><strong>具体产品（Concrete Product）角色</strong><br>抽象模式所创建的具体实例对象</p></li></ol><p><img src="https://pic.imgdb.cn/item/6319938b16f2c2beb10d3e03.png"></p><p><img src="https://pic.imgdb.cn/item/6319939916f2c2beb10d552d.png"></p><h3 id="4-4、案例"><a href="#4-4、案例" class="headerlink" title="4.4、案例"></a>4.4、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sayname</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;fruit \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FruitFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getApple</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Fruit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getBanana</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Fruit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//南方香蕉</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SouthBanana</span>: <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sayname</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;South Banana \n&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//南方苹果</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SouthApple</span>: <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sayname</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;South Apple \n&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//北方香蕉</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NorthBanana</span> : <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sayname</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;North Banana \n&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//北方苹果</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NorthApple</span> : <span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sayname</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;North Apple \n&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SouthFruitFactory</span>: <span class="keyword">public</span> FruitFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getApple</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">SouthApple</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getBanana</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">SouthBanana</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NorthFruitFactory</span> : <span class="keyword">public</span> FruitFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getApple</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">NorthApple</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Fruit* <span class="title">getBanana</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">NorthBanana</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FruitFactory* ff = <span class="literal">NULL</span>;</span><br><span class="line">    Fruit* fruit = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    ff = <span class="keyword">new</span> <span class="built_in">SourthFruitFactory</span>();</span><br><span class="line">    fruit = ff-&gt;<span class="built_in">getApple</span>();</span><br><span class="line">    fruit-&gt;<span class="built_in">sayname</span>();</span><br><span class="line">    fruit = ff-&gt;<span class="built_in">getBanana</span>();</span><br><span class="line">fruit-&gt;<span class="built_in">sayname</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> fruit;</span><br><span class="line"><span class="keyword">delete</span> ff;</span><br><span class="line"></span><br><span class="line">ff = <span class="keyword">new</span> <span class="built_in">NorthFruitFactory</span>();</span><br><span class="line">fruit = ff-&gt;<span class="built_in">getApple</span>();</span><br><span class="line">fruit-&gt;<span class="built_in">sayname</span>();</span><br><span class="line">fruit = ff-&gt;<span class="built_in">getBanana</span>();</span><br><span class="line">fruit-&gt;<span class="built_in">sayname</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> fruit;</span><br><span class="line"><span class="keyword">delete</span> ff;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello....\n&quot;</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、建造者模式"><a href="#5、建造者模式" class="headerlink" title="5、建造者模式"></a>5、建造者模式</h2><h3 id="5-1、概念"><a href="#5-1、概念" class="headerlink" title="5.1、概念"></a>5.1、概念</h3><p>Builder模式也叫建造者模式或者生成器模式，是由GoF提出的23种设计模式中的一种。Builder模式是一种对象创建型模式之一，用来隐藏复合对象的创建过程，它把复合对象的创建过程加以抽象，通过子类继承和重载的方式，动态地创建具有复合属性的对象。</p><p>对象的创建：Builder模式是为对象的创建而设计的模式- 创建的是一个复合对象：被创建的对象为一个具有复合属性的复合对象- 关注对象创建的各部分的创建过程：不同的工厂（这里指builder生成器）对产品属性有不同的创建方法</p><h3 id="5-2、角色和职责"><a href="#5-2、角色和职责" class="headerlink" title="5.2、角色和职责"></a>5.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/63199fa016f2c2beb11bbfc7.png"></p><ol><li>Builder：为创建产品各个部分，统一抽象接口。</li><li>ConcreteBuilder：具体的创建产品的各个部分，部分A， 部分B，部分C。</li><li>Director：构造一个使用Builder接口的对象。</li><li>Product：表示被构造的复杂对象。<br>ConcreteBuilder创建该产品的内部表示并定义它的装配过程，包含定义组成部件的类，包括将这些部件装配成最终产品的接口。</li></ol><p><strong>适用情况：</strong><br>一个对象的构建比较复杂，将一个对象的构建(?)和对象的表示(?)进行分离。</p><h3 id="5-3、建造者模式和工厂模式的区别"><a href="#5-3、建造者模式和工厂模式的区别" class="headerlink" title="5.3、建造者模式和工厂模式的区别"></a>5.3、建造者模式和工厂模式的区别</h3><ul><li><p><strong>Factory模式中：</strong><br>1、 有一个抽象的工厂。<br>2、实现一个具体的工厂—汽车工厂。<br>3、工厂生产汽车A，得到汽车产品A。<br>4、工厂生产汽车B，得到汽车产品B。<br>这样做，实现了购买者和生产线的隔离。<strong>强调的是结果。</strong> </p></li><li><p><strong>Builder模式:</strong><br>1、引擎工厂生产引擎产品，得到汽车部件A。<br>2、轮胎工厂生产轮子产品，得到汽车部件B。<br>3、底盘工厂生产车身产品，得到汽车部件C。<br>4、将这些部件放到一起，形成刚好能够组装成一辆汽车的整体。<br>5、将这个整体送到汽车组装工厂，得到一个汽车产品。</p></li></ul><p>这样做，<strong>目的是为了实现复杂对象生产线和其部件的解耦。强调的是过程</strong></p><p>两者的区别在于：<br>Factory模式不考虑对象的组装过程，而直接生成一个我想要的对象。<br>Builder模式先一个个的创建对象的每一个部件，再统一组装成一个对象。<br>Factory模式所解决的问题是，工厂生产产品。<br>而Builder模式所解决的问题是工厂控制产品生成器组装各个部件的过程，然后从产品生成器中得到产品。<br>Builder模式不是很常用。模式本身就是一种思想。知道了就可以了。<br>设计模式就是一种思想。学习一个模式，花上一两个小时把此模式的意思理解了，就够了。其精华的所在会在以后工作的设计中逐渐体现出来。</p><h3 id="5-4、案例"><a href="#5-4、案例" class="headerlink" title="5.4、案例"></a>5.4、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键字：建公寓工程队 FlatBuild  别墅工程队 VillaBuild  设计者Director</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">House</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setFloor</span><span class="params">(string floor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_floor = floor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setWall</span><span class="params">(string wall)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_wall = wall;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDoor</span><span class="params">(string door)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_door = door;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">string <span class="title">getFloor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_floor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">setWall</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  m_wall;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">setDoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_door;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">stringm_floor;</span><br><span class="line">stringm_wall;</span><br><span class="line">stringm_door;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Builder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeFloor</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeWall</span><span class="params">()</span> </span>=  <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeDoor</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> House *<span class="title">GetHouse</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公寓</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlatBuild</span> : <span class="keyword">public</span> Builder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FlatBuild</span>()</span><br><span class="line">&#123;</span><br><span class="line">pHouse = <span class="keyword">new</span> House;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeFloor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pHouse-&gt;<span class="built_in">setFloor</span>(<span class="string">&quot;flat Door&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeWall</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pHouse-&gt;<span class="built_in">setWall</span>(<span class="string">&quot;flat Wall&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeDoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pHouse-&gt;<span class="built_in">setDoor</span>(<span class="string">&quot;flat Door&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> House *<span class="title">GetHouse</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> pHouse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">House *pHouse;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//别墅</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VillaBuild</span> : <span class="keyword">public</span> Builder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">VillaBuild</span>()</span><br><span class="line">&#123;</span><br><span class="line">pHouse = <span class="keyword">new</span> House;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeFloor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pHouse-&gt;<span class="built_in">setFloor</span>(<span class="string">&quot;villa floor&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeWall</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pHouse-&gt;<span class="built_in">setWall</span>(<span class="string">&quot;villa Wall&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeDoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pHouse-&gt;<span class="built_in">setDoor</span>(<span class="string">&quot;villa Door&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> House *<span class="title">GetHouse</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> pHouse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">House *pHouse;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Construct</span><span class="params">(Builder *builder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">builder-&gt;<span class="built_in">makeFloor</span>();</span><br><span class="line">builder-&gt;<span class="built_in">makeWall</span>();</span><br><span class="line">builder-&gt;<span class="built_in">makeDoor</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//客户直接造房子</span></span><br><span class="line">House *pHose = <span class="keyword">new</span> House;</span><br><span class="line">pHose-&gt;<span class="built_in">setDoor</span>(<span class="string">&quot;wbmDoor&quot;</span>);</span><br><span class="line">pHose-&gt;<span class="built_in">setFloor</span>(<span class="string">&quot;wbmFloor&quot;</span>);</span><br><span class="line">pHose-&gt;<span class="built_in">setWall</span>(<span class="string">&quot;wbmWall&quot;</span>);</span><br><span class="line"><span class="keyword">delete</span> pHose;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* //工程队直接造房子 </span></span><br><span class="line"><span class="comment">Builder *builder = new FlatBuild;</span></span><br><span class="line"><span class="comment">builder-&gt;makeFloor();</span></span><br><span class="line"><span class="comment">builder-&gt;makeWall();</span></span><br><span class="line"><span class="comment">builder-&gt;makeDoor();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指挥者（设计师）指挥 工程队 和 建房子</span></span><br><span class="line">Director *director = <span class="keyword">new</span> Director;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建公寓</span></span><br><span class="line">Builder *builder = <span class="keyword">new</span> FlatBuild;</span><br><span class="line">director-&gt;<span class="built_in">Construct</span>(builder); <span class="comment">//设计师 指挥 工程队干活</span></span><br><span class="line">House *house = builder-&gt;<span class="built_in">GetHouse</span>();</span><br><span class="line">cout &lt;&lt; house-&gt;<span class="built_in">getFloor</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> house;</span><br><span class="line"><span class="keyword">delete</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建别墅</span></span><br><span class="line">builder = <span class="keyword">new</span> VillaBuild;</span><br><span class="line">director-&gt;<span class="built_in">Construct</span>(builder); <span class="comment">//设计师 指挥 工程队干活</span></span><br><span class="line">house = builder-&gt;<span class="built_in">GetHouse</span>();</span><br><span class="line">cout &lt;&lt; house-&gt;<span class="built_in">getFloor</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> house;</span><br><span class="line"><span class="keyword">delete</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> director;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、原型模式"><a href="#6、原型模式" class="headerlink" title="6、原型模式"></a>6、原型模式</h2><h3 id="6-1、概念"><a href="#6-1、概念" class="headerlink" title="6.1、概念"></a>6.1、概念</h3><p>Prototype模式是一种对象创建型模式，它采取复制原型对象的方法来创建对象的实例。使用Prototype模式创建的实例，具有与原型一样的数据。</p><ol><li>由原型对象自身创建目标对象。也就是说，对象创建这一动作发自原型对象本身。</li><li>目标对象是原型对象的一个克隆。也就是说，通过Prototype模式创建的对象，不仅仅与原型对象具有相同的结构，还与原型对象具有相同的值。</li><li>根据对象克隆深度层次的不同，有浅度克隆与深度克隆。</li></ol><h3 id="6-2、角色和职责"><a href="#6-2、角色和职责" class="headerlink" title="6.2、角色和职责"></a>6.2、角色和职责</h3><p><img src="https://pic.imgdb.cn/item/6319a34916f2c2beb12114ed.png"></p><p>原型模式主要面对的问题是：“某些结构复杂的对象”的创建工作；由于需求的变化，这些对象经常面临着剧烈的变化，但是他们却拥有比较稳定一致的接口。<br>适用情况：<br><strong>一个复杂对象，具有自我复制功能，统一一套接口。</strong></p><h3 id="6-3、案例"><a href="#6-3、案例" class="headerlink" title="6.3、案例"></a>6.3、案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Person *<span class="title">Clone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printT</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaProgrammer</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">JavaProgrammer</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_age = <span class="number">0</span>;</span><br><span class="line">m_resume = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">JavaProgrammer</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line">m_resume = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">JavaProgrammer</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_resume!= <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(m_resume);</span><br><span class="line">m_resume = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Person *<span class="title">Clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">JavaProgrammer *p = <span class="keyword">new</span> JavaProgrammer;</span><br><span class="line">*p = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setResume</span><span class="params">(<span class="type">char</span> *resume)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_resume = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(resume) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_resume, resume);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;m_age:&quot;</span> &lt;&lt; m_age &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (m_resume != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; m_resume &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">stringm_name;</span><br><span class="line"><span class="type">int</span>m_age;</span><br><span class="line"><span class="type">char</span>*m_resume;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">JavaProgrammer <span class="title">javaperson1</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">javaperson1.<span class="built_in">setResume</span>(<span class="string">&quot;我是java程序员&quot;</span>);</span><br><span class="line">Person *p2 = javaperson1.<span class="built_in">Clone</span>();  <span class="comment">//对象具有自我复制功能 注意深拷贝和浅拷贝问题</span></span><br><span class="line">p2-&gt;<span class="built_in">printT</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p2;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;设计模式-创建型模式&quot;&gt;&lt;a href=&quot;#设计模式-创建型模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-创建型模式&quot;&gt;&lt;/a&gt;设计模式-创建型模式&lt;/h1&gt;&lt;h2 id=&quot;1、单例模式&quot;&gt;&lt;a href=&quot;#1、单例模式&quot; class=&quot;headerlink&quot; title=&quot;1、单例模式&quot;&gt;&lt;/a&gt;1、单例模式&lt;/h2&gt;&lt;h3 id=&quot;1-1、概念&quot;&gt;&lt;a href=&quot;#1-1、概念&quot; class=&quot;headerlink&quot; title=&quot;1.1、概念&quot;&gt;&lt;/a&gt;1.1、概念&lt;/h3&gt;&lt;p&gt;单例模式是一种对象创建型模式，使用单例模式，可以保证为一个类只生成唯一的实例对象。也就是说，在整个程序空间中，该类只存在一个实例对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GoF对单例模式的定义是：**保证一个类只有一个实例存在，同时提供能对该实例加以访问的全局访问方法。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-设计模式编程基础</title>
    <link href="http://example.com/2022/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-07T03:04:29.000Z</published>
    <updated>2022-09-07T06:46:48.762Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="设计模式-设计模式编程基础"><a href="#设计模式-设计模式编程基础" class="headerlink" title="设计模式-设计模式编程基础"></a>设计模式-设计模式编程基础</h1><h2 id="1、设计模式前言"><a href="#1、设计模式前言" class="headerlink" title="1、设计模式前言"></a>1、设计模式前言</h2><ul><li><strong>模式</strong><br>在一定环境中解决某一问题的方案，包括三个基本元素–问题，解决方案和环境。<br>大白话：在一定环境下，用固定套路解决问题。<span id="more"></span></li><li><strong>设计模式（Design pattern）</strong><br>是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；<br>设计模式是软件工程的基石脉络，如同大厦的结构一样。</li><li><strong>学习设计模式的意义</strong><br>提高职业素养，关注学员在行业内的长期发展。</li></ul><hr><ul><li><strong>“我眼中的设计模式”</strong><br>把简单的问题复杂化（标准化），把环境中的各个部分进行抽象、归纳、解耦合。<br>不是多神秘的东西，我们初学者也能学的会。要有信心。  </li><li><strong>学习设计模式的方法</strong>  <ul><li>对初学者：<br>积累案例，大于背类图。</li><li>初级开发人员：<br>多思考、多梳理，归纳总结；<br>尊重事物的认知规律，注意事物临界点的突破。不可浮躁。</li><li>中级开发人员：<br>合适的开发环境，寻找合适的设计模式，解决问题。<br>多应用，对经典组合设计模式的大量、自由的运用。要不断的追求。</li></ul></li></ul><hr><p><strong>设计模式的分类</strong><br>Gang of Four的“Design Patterns: Elements of Resualbel Software”书将设计模式归纳为三大类型，共23种。</p><ul><li><p><strong>创建型模式</strong>：通常和对象的创建有关，涉及到对象实例化的方式。<em>（共5种模式)</em></p></li><li><p><strong>结构型模式</strong>：描述的是如何组合类和对象以获得更大的结构。*(共7种模式)*</p></li><li><p><strong>行为型模式</strong>：用来对类或对象怎样交互和怎样分配职责进行描述。*(共11种模式)*</p></li><li><p><strong>创建型模式用来处理对象的创建过程，主要包含以下5种设计模式：</strong></p><ol><li>工厂方法模式（Factory Method Pattern）的用意是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中。</li><li>抽象工厂模式（Abstract Factory Pattern）的意图是提供一个创建一系列相关或者相互依赖的接口，而无需指定它们具体的类。</li><li>建造者模式（Builder Pattern）的意图是将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</li><li>原型模式（Prototype Pattern）是用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</li><li>单例模式（Singleton Pattern）是保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li></ol></li><li><p><strong>结构型模式用来处理类或者对象的组合，主要包含以下7种设计模式：</strong></p><ol><li>代理模式（Proxy Pattern）就是为其他对象提供一种代理以控制对这个对象的访问。</li><li>装饰者模式（Decorator Pattern）动态的给一个对象添加一些额外的职责。就增加功能来说，此模式比生成子类更加灵活。</li><li>适配器模式（Adapter Pattern）是将一个类的接口转化成客户希望的另外一个接口。使得原来由于接口不兼容而不能一起工作的那些类可以一起工作。</li><li>桥接模式（Bridge Pattern）是将抽象部分与实际部分分离，使它们都可以独立的变化。</li><li>组合模式（Composite Pattern）是将对象组合成树形结构以表示“部分–整体”的层次结构。使得用户对单个对象和组合对象的使用具有一致性。</li><li>外观模式（Facade Pattern）是为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li><li>享元模式（Flyweight Pattern）是以共享的方式高效的支持大量的细粒度的对象。</li></ol></li><li><p><strong>行为型模式用来对类或对象怎么交互和怎样分配职责进行描述，主要包含以下11中设计模式：</strong></p><ol><li>模板方法模式（Template Method Pattern）使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li><li>命令模式（Command Pattern）是将一个请求封装为一个对象，从而使你可用不同的请求对客户端进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</li><li>责任链模式（Chain of Responsibility Pattern），在该模式里，很多对象由每一个对象对其下家的引用而连接起来行成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。</li><li>策略模式（Strategy Pattern）就是准备一组算法，并将每一个算法封装起来，使得它们可以互换。</li><li>中介者模式（Mediator Pattern）就是定义一个中介对象来封装系列对象之间的交互。中介者使各个对象不需要显示的相互调用，从而使其耦合性松散，而且可以独立的改变他们之间的交互。</li><li>观察者模式（Observer Pattern）定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</li><li>备忘录模式（Memento Pattern）是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</li><li>访问者模式（Visitor Pattern）就是表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li><li>状态模式（State Pattern）就是对象的行为，依赖于它所处的状态。</li><li>解释器模式（Interpreter Pattern）就是描述了如何为简单的语言定义一个语法，如何在该语言中表示一个句子，以及如何解释这些句子。</li><li>迭代器模式（Iterator Pattern）是提供了一种方法顺序来访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</li></ol></li></ul><h2 id="2、设计模式基本原则"><a href="#2、设计模式基本原则" class="headerlink" title="2、设计模式基本原则"></a>2、设计模式基本原则</h2><p>最终目的：<strong>高内聚、低耦合</strong></p><ol><li><strong>开放封闭原则  (OCP,Open For Extension, Closed For Modification Principle)</strong><br>类的改动是通过增加代码进行的，而不是修改源代码。</li><li><strong>单一职责原则  (SRP,Single Responsibility Principle)</strong><br>类的职责要单一，对外只提供一种功能，而引起类变化的原因都应该只有一个。</li><li><strong>依赖倒置原则 (DIP,Dependence Inversion Principle)</strong><br>依赖于抽象(接口),不要依赖具体的实现(类)，也就是针对接口编程。</li><li><strong>接口隔离原则 (ISP,Interface Segegation Principle)</strong><br>不应该强迫客户的程序依赖他们不需要的接口方法。一个接口应该只提供一种对外功能，不应该把所有操作都封装到一个接口中去。</li><li><strong>里氏替换原则 (LSP, Liskov Substitution Principle)</strong><br>任何抽象类出现的地方都可以用他的实现类进行替换。实际就是虚拟机制，语言级别实现面向对象功能。</li><li><strong>优先使用组合而不是继承原则(CARP,Composite&#x2F;Aggregate Reuse Principle)</strong><br>如果使用继承，会导致父类的任何变换都可能影响到子类的行为。<br>如果使用对象组合，就降低了这种依赖关系。</li><li><strong>迪米特法则(LOD,Law of Demeter)</strong><br>一个对象应当对其他对象尽可能少的了解，从而降低各个对象之间的耦合，提高系统的可维护性。例如在一个程序中，各个模块之间相互调用时，通常会提供一个统一的接口来实现。这样其他模块不需要了解另外一个模块的内部实现细节，这样当一个模块内部的实现发生改变时，不会影响其他模块的使用。(黑盒原理)</li></ol><h2 id="3、案例图"><a href="#3、案例图" class="headerlink" title="3、案例图"></a>3、案例图</h2><h3 id="3-1、开闭原则案例"><a href="#3-1、开闭原则案例" class="headerlink" title="3.1、开闭原则案例"></a>3.1、开闭原则案例</h3><p><img src="https://pic.imgdb.cn/item/63183d7816f2c2beb1cbcc26.png"></p><h3 id="3-2、依赖倒转"><a href="#3-2、依赖倒转" class="headerlink" title="3.2、依赖倒转"></a>3.2、依赖倒转</h3><p><img src="https://pic.imgdb.cn/item/63183d9c16f2c2beb1cbf89f.png"></p><p><img src="https://pic.imgdb.cn/item/63183dac16f2c2beb1cc0bd5.png"></p><h3 id="3-3、迪米特法则"><a href="#3-3、迪米特法则" class="headerlink" title="3.3、迪米特法则"></a>3.3、迪米特法则</h3><h4 id="3-3-1、和陌生人说话"><a href="#3-3-1、和陌生人说话" class="headerlink" title="3.3.1、和陌生人说话"></a>3.3.1、和陌生人说话</h4><p><img src="https://pic.imgdb.cn/item/63183dbe16f2c2beb1cc23ff.png"></p><h4 id="3-3-2、不和陌生人说话"><a href="#3-3-2、不和陌生人说话" class="headerlink" title="3.3.2、不和陌生人说话"></a>3.3.2、不和陌生人说话</h4><p><img src="https://pic.imgdb.cn/item/63183e0f16f2c2beb1cc8b9a.png"></p><h4 id="3-3-3、与依赖倒转原则结合某人和抽象陌生人说话-让某人和陌生人进行解耦合"><a href="#3-3-3、与依赖倒转原则结合某人和抽象陌生人说话-让某人和陌生人进行解耦合" class="headerlink" title="3.3.3、与依赖倒转原则结合某人和抽象陌生人说话  让某人和陌生人进行解耦合"></a>3.3.3、与依赖倒转原则结合某人和抽象陌生人说话  让某人和陌生人进行解耦合</h4><p><img src="https://pic.imgdb.cn/item/63183e2516f2c2beb1cca55b.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;设计模式-设计模式编程基础&quot;&gt;&lt;a href=&quot;#设计模式-设计模式编程基础&quot; class=&quot;headerlink&quot; title=&quot;设计模式-设计模式编程基础&quot;&gt;&lt;/a&gt;设计模式-设计模式编程基础&lt;/h1&gt;&lt;h2 id=&quot;1、设计模式前言&quot;&gt;&lt;a href=&quot;#1、设计模式前言&quot; class=&quot;headerlink&quot; title=&quot;1、设计模式前言&quot;&gt;&lt;/a&gt;1、设计模式前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模式&lt;/strong&gt;&lt;br&gt;在一定环境中解决某一问题的方案，包括三个基本元素–问题，解决方案和环境。&lt;br&gt;大白话：在一定环境下，用固定套路解决问题。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>STL算法-常用算法介绍</title>
    <link href="http://example.com/2022/09/06/STL%E7%AE%97%E6%B3%95-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2022/09/06/STL%E7%AE%97%E6%B3%95-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-09-06T03:31:36.000Z</published>
    <updated>2022-09-07T09:29:05.713Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-常用算法介绍"><a href="#STL容器-常用算法介绍" class="headerlink" title="STL容器-常用算法介绍"></a>STL容器-常用算法介绍</h1><h2 id="1、常用的查找算法"><a href="#1、常用的查找算法" class="headerlink" title="1、常用的查找算法"></a>1、常用的查找算法</h2><h3 id="1-1、adjacent-find"><a href="#1-1、adjacent-find" class="headerlink" title="1.1、adjacent_find()"></a>1.1、adjacent_find()</h3><p>在iterator对标识元素范围内，查找一对相邻重复元素，找到则返回指向这对元素的第一个元素的迭代器。否则返回past-the-end。<span id="more"></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecInt;</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">adjacent_find</span>(vecInt.<span class="built_in">begin</span>(), vecInt.<span class="built_in">end</span>());<span class="comment">//*it == 2</span></span><br></pre></td></tr></table></figure><h3 id="1-2、binary-search"><a href="#1-2、binary-search" class="headerlink" title="1.2、binary_search()"></a>1.2、binary_search()</h3><p>在有序序列中查找value,找到则返回true。注意：在无序序列中，不可使用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; setInt;</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> bFind = <span class="built_in">binary_search</span>(setInt.<span class="built_in">begin</span>(),setInt.<span class="built_in">end</span>(),<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="1-3、count"><a href="#1-3、count" class="headerlink" title="1.3、count()"></a>1.3、count()</h3><p>利用等于操作符，把标志范围内的元素与输入值比较，返回相等的个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecInt;</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"><span class="type">int</span> iCount = <span class="built_in">count</span>(vecInt.<span class="built_in">begin</span>(),vecInt.<span class="built_in">end</span>(),<span class="number">2</span>);<span class="comment">//iCount==3</span></span><br></pre></td></tr></table></figure><h3 id="1-4、count-if"><a href="#1-4、count-if" class="headerlink" title="1.4、count_if()"></a>1.4、count_if()</h3><p>假设vector<int> vecIntA，vecIntA包含1,3,5,7,9元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先定义比较函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GreaterThree</span><span class="params">(<span class="type">int</span> iNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(iNum&gt;=<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iCount = <span class="built_in">count_if</span>(vecIntA.<span class="built_in">begin</span>(), vecIntA.<span class="built_in">end</span>(), GreaterThree);</span><br><span class="line"><span class="comment">//此时iCount == 4</span></span><br></pre></td></tr></table></figure><h3 id="1-5、find"><a href="#1-5、find" class="headerlink" title="1.5、find()"></a>1.5、find()</h3><ul><li><strong>find</strong>: 利用底层元素的等于操作符，对指定范围内的元素与输入值进行比较。当匹配时，结束搜索，返回该元素的迭代器。</li><li><strong>equal_range</strong>: 返回一对iterator，第一个表示lower_bound,第二个表示upper_bound。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecInt;</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find</span>(vecInt.<span class="built_in">begin</span>(), vecInt.<span class="built_in">end</span>(), <span class="number">5</span>);<span class="comment">//*it == 5</span></span><br></pre></td></tr></table></figure><h3 id="1-6、find-if"><a href="#1-6、find-if" class="headerlink" title="1.6、find_if()"></a>1.6、find_if()</h3><ul><li><strong>find_if</strong>: 使用输入的函数代替等于操作符执行find。返回被找到的元素的迭代器。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设vector&lt;<span class="type">int</span>&gt; vecIntA，vecIntA包含<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">9</span>元素 </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::it = <span class="built_in">find_if</span>(vecInt.<span class="built_in">begin</span>(),vecInt.<span class="built_in">end</span>(),GreaterThree);</span><br><span class="line"><span class="comment">//此时 *it==3, *(it+1)==5, *(it+2)==3, *(it+3)==9</span></span><br></pre></td></tr></table></figure><h2 id="2、-常用的排序算法"><a href="#2、-常用的排序算法" class="headerlink" title="2、 常用的排序算法"></a>2、 常用的排序算法</h2><p>以下是排序和通用算法：提供元素排序策略</p><h3 id="2-1、merge"><a href="#2-1、merge" class="headerlink" title="2.1、merge()"></a>2.1、merge()</h3><ul><li><strong>merge</strong>: 合并两个有序序列，存放到另一个序列。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如：vecIntA,vecIntB,vecIntC是用vector&lt;<span class="type">int</span>&gt;声明的容器，vecIntA已包含<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>元素，vecIntB已包含<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>元素</span><br><span class="line">vecIntC.<span class="built_in">resize</span>(<span class="number">9</span>);  <span class="comment">//扩大容量</span></span><br><span class="line"><span class="built_in">merge</span>(vecIntA.<span class="built_in">begin</span>(),vecIntA.<span class="built_in">end</span>(),vecIntB.<span class="built_in">begin</span>(),vecIntB.<span class="built_in">end</span>(),vecIntC.<span class="built_in">begin</span>());</span><br><span class="line"><span class="comment">//此时vecIntC就存放了按顺序的1,2,3,4,5,6,7,8,9九个元素</span></span><br></pre></td></tr></table></figure><h3 id="2-2、sort"><a href="#2-2、sort" class="headerlink" title="2.2、sort()"></a>2.2、sort()</h3><ul><li><strong>sort</strong>: 以默认升序的方式重新排列指定范围内的元素。若要改排序规则，可以输入比较函数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line">Class CStudent:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CStudent</span>(<span class="type">int</span> iID, string strName)</span><br><span class="line">    &#123;</span><br><span class="line">        m_iID=iID;  </span><br><span class="line">        m_strName=strName; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:            </span><br><span class="line">    <span class="type">int</span> m_iID;</span><br><span class="line">    string m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学号比较函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Compare</span><span class="params">(<span class="type">const</span> CStudent &amp;stuA, <span class="type">const</span> CStudent &amp;stuB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (stuA.m_iID &lt; strB.m_iID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;CStudent&gt; vecStu;</span><br><span class="line">    vecStu.<span class="built_in">push_back</span>(<span class="built_in">CStudent</span>(<span class="number">2</span>,<span class="string">&quot;老二&quot;</span>));</span><br><span class="line">    vecStu.<span class="built_in">push_back</span>(<span class="built_in">CStudent</span>(<span class="number">1</span>,<span class="string">&quot;老大&quot;</span>));</span><br><span class="line">    vecStu.<span class="built_in">push_back</span>(<span class="built_in">CStudent</span>(<span class="number">3</span>,<span class="string">&quot;老三&quot;</span>));</span><br><span class="line">    vecStu.<span class="built_in">push_back</span>(<span class="built_in">CStudent</span>(<span class="number">4</span>,<span class="string">&quot;老四&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(vecStu.<span class="built_in">begin</span>(), vecStu.<span class="built_in">end</span>(), Compare);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  此时，vecStu容器包含了按顺序的&quot;老大对象&quot;,&quot;老二对象&quot;,&quot;老三对象&quot;,&quot;老四对象&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、random-shuffle"><a href="#2-3、random-shuffle" class="headerlink" title="2.3、random_shuffle()"></a>2.3、random_shuffle()</h3><ul><li><strong>random_shuffle</strong>: 对指定范围内的元素随机调整次序。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));<span class="comment">//设置随机种子</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vecInt;</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;itcastitcast &quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">random_shuffle</span>(vecInt.<span class="built_in">begin</span>(), vecInt.<span class="built_in">end</span>());   <span class="comment">//随机排序，结果比如：9,7,1,5,3</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>());    <span class="comment">//随机排序，结果比如：&quot; itstcasticat &quot;</span></span><br><span class="line"><span class="built_in">reverse</span>() </span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vecInt;</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">reverse</span>(vecInt.<span class="built_in">begin</span>(), vecInt.<span class="built_in">end</span>());    <span class="comment">//&#123;9,7,5,3,1&#125;</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>());    <span class="comment">//随机排序，结果比如：&quot; itstcasticat &quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-4、reverse"><a href="#2-4、reverse" class="headerlink" title="2.4、reverse()"></a>2.4、reverse()</h3><ul><li><strong>reverse</strong>: 对指定范围内的元素次序反转。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span>() </span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vecInt;</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">reverse</span>(vecInt.<span class="built_in">begin</span>(), vecInt.<span class="built_in">end</span>());    <span class="comment">//&#123;9,7,5,3,1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3、常用的拷贝和替换算法"><a href="#3、常用的拷贝和替换算法" class="headerlink" title="3、常用的拷贝和替换算法"></a>3、常用的拷贝和替换算法</h2><h3 id="3-1、copy"><a href="#3-1、copy" class="headerlink" title="3.1、copy()"></a>3.1、copy()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntA;</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntB;</span><br><span class="line">vecIntB.<span class="built_in">resize</span>(<span class="number">5</span>);<span class="comment">//扩大空间</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>(vecIntA.<span class="built_in">begin</span>(), vecIntA.<span class="built_in">end</span>(), vecIntB.<span class="built_in">begin</span>());<span class="comment">//vecIntB: &#123;1,3,5,7,9&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-2、replace"><a href="#3-2、replace" class="headerlink" title="3.2、replace()"></a>3.2、replace()</h3><ul><li><strong>replace(beg,end,oldValue,newValue)</strong>: 将指定范围内的所有等于oldValue的元素替换成newValue。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntA;</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">replace</span>(vecIntA.<span class="built_in">begin</span>(), vecIntA.<span class="built_in">end</span>(), <span class="number">3</span>, <span class="number">8</span>);<span class="comment">//&#123;1,8,5,8,9&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-3、replace-if"><a href="#3-3、replace-if" class="headerlink" title="3.3、replace_if()"></a>3.3、replace_if()</h3><ul><li><strong>replace_if</strong>: 将指定范围内所有操作结果为true的元素用新值替换。<br>用法举例：<br><code>replace_if(vecIntA.begin(),vecIntA.end(),GreaterThree,newVal)</code><br>其中 vecIntA是用vector<int>声明的容器<br>GreaterThree 函数的原型是 bool GreaterThree(int iNum)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把大于等于3的元素替换成8</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntA;</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">replace_if</span>(vecIntA.<span class="built_in">begin</span>(), vecIntA.<span class="built_in">end</span>(), GreaterThree, <span class="number">8</span>);<span class="comment">// GreaterThree的定义在上面。</span></span><br></pre></td></tr></table></figure><h3 id="3-4、swap"><a href="#3-4、swap" class="headerlink" title="3.4、swap()"></a>3.4、swap()</h3><ul><li><strong>swap</strong>: 交换两个容器的元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntA;</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntB;</span><br><span class="line">vecIntB.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">vecIntB.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(vecIntA, vecIntB);     <span class="comment">//交换</span></span><br></pre></td></tr></table></figure><h2 id="4、常用的算术和生成算法"><a href="#4、常用的算术和生成算法" class="headerlink" title="4、常用的算术和生成算法"></a>4、常用的算术和生成算法</h2><h3 id="4-1、accumulate"><a href="#4-1、accumulate" class="headerlink" title="4.1、accumulate()"></a>4.1、accumulate()</h3><ul><li><strong>accumulate</strong>: 对指定范围内的元素求和，然后结果再加上一个由val指定的初始值。</li><li><code>#include&lt;numeric&gt;</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntA;</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iSum = <span class="built_in">accumulate</span>(vecIntA.<span class="built_in">begin</span>(), vecIntA.<span class="built_in">end</span>(), <span class="number">100</span>);<span class="comment">//iSum==125</span></span><br></pre></td></tr></table></figure><h3 id="4-2、fill"><a href="#4-2、fill" class="headerlink" title="4.2、fill()"></a>4.2、fill()</h3><ul><li><strong>fill</strong>: 将输入值赋给标志范围内的所有元素。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntA;</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fill</span>(vecIntA.<span class="built_in">begin</span>(), vecIntA.<span class="built_in">end</span>(), <span class="number">8</span>);<span class="comment">//8, 8, 8, 8, 8</span></span><br></pre></td></tr></table></figure><h2 id="5、常用的集合算法"><a href="#5、常用的集合算法" class="headerlink" title="5、常用的集合算法"></a>5、常用的集合算法</h2><h3 id="5-1、set-union-set-intersection-set-difference"><a href="#5-1、set-union-set-intersection-set-difference" class="headerlink" title="5.1、set_union(), set_intersection(), set_difference()"></a>5.1、set_union(), set_intersection(), set_difference()</h3><ul><li><strong>set_union</strong>: 构造一个有序序列，包含两个有序序列的并集。</li><li><strong>set_intersection</strong>: 构造一个有序序列，包含两个有序序列的交集。</li><li><strong>set_difference</strong>: 构造一个有序序列，该序列保留第一个有序序列中存在而第二个有序序列中不存在的元素。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntA;</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">vecIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntB;</span><br><span class="line">vecIntB.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecIntB.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecIntB.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecIntB.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">vecIntB.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntC;</span><br><span class="line">vecIntC.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//并集</span></span><br><span class="line"><span class="built_in">set_union</span>(vecIntA.<span class="built_in">begin</span>(), vecIntA.<span class="built_in">end</span>(), vecIntB.<span class="built_in">begin</span>(), vecIntB.<span class="built_in">end</span>(), vecIntC.<span class="built_in">begin</span>());<span class="comment">//vecIntC : &#123;1,3,5,6,7,8,9,0,0,0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交集</span></span><br><span class="line"><span class="built_in">fill</span>(vecIntC.<span class="built_in">begin</span>(),vecIntC.<span class="built_in">end</span>(),<span class="number">0</span>);</span><br><span class="line"><span class="built_in">set_intersection</span>(vecIntA.<span class="built_in">begin</span>(), vecIntA.<span class="built_in">end</span>(), vecIntB.<span class="built_in">begin</span>(), vecIntB.<span class="built_in">end</span>(), vecIntC.<span class="built_in">begin</span>());<span class="comment">//vecIntC: &#123;1,3,5,0,0,0,0,0,0,0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//差集</span></span><br><span class="line"><span class="built_in">fill</span>(vecIntC.<span class="built_in">begin</span>(),vecIntC.<span class="built_in">end</span>(),<span class="number">0</span>);</span><br><span class="line"><span class="built_in">set_difference</span>(vecIntA.<span class="built_in">begin</span>(), vecIntA.<span class="built_in">end</span>(), vecIntB.<span class="built_in">begin</span>(), vecIntB.<span class="built_in">end</span>(), vecIntC.<span class="built_in">begin</span>());<span class="comment">//vecIntC: &#123;7,9,0,0,0,0,0,0,0,0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6、常用的遍历算法"><a href="#6、常用的遍历算法" class="headerlink" title="6、常用的遍历算法"></a>6、常用的遍历算法</h2><h3 id="6-1、for-each"><a href="#6-1、for-each" class="headerlink" title="6.1、for_each()"></a>6.1、for_each()</h3><ul><li><strong>for_each</strong>: 用指定函数依次对指定范围内所有元素进行迭代访问。该函数不得修改序列中的元素。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;iItem)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; iItem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> iArray[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vecInt</span><span class="params">(iArray,iArray+<span class="keyword">sizeof</span>(iArray)/<span class="keyword">sizeof</span>(iArray[<span class="number">0</span>]))</span></span>;</span><br><span class="line">    for_each(vecInt.<span class="built_in">begin</span>(), vecInt.<span class="built_in">end</span>(), show);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果打印出0 1 2 3 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2、transform"><a href="#6-2、transform" class="headerlink" title="6.2、transform()"></a>6.2、transform()</h3><ul><li><strong>transform</strong>: 与for_each类似，遍历所有元素，但可对容器的元素进行修改</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">increase</span> <span class="params">(<span class="type">int</span> i)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;   </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vecIntA;</span><br><span class="line">    vecIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    vecIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    vecIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    vecIntA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">    vecIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">transform</span>(vecIntA.<span class="built_in">begin</span>(),vecIntA.<span class="built_in">end</span>(),vecIntA.<span class="built_in">begin</span>(),increase);<span class="comment">//vecIntA : &#123;2,4,6,8,10&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-常用算法介绍&quot;&gt;&lt;a href=&quot;#STL容器-常用算法介绍&quot; class=&quot;headerlink&quot; title=&quot;STL容器-常用算法介绍&quot;&gt;&lt;/a&gt;STL容器-常用算法介绍&lt;/h1&gt;&lt;h2 id=&quot;1、常用的查找算法&quot;&gt;&lt;a href=&quot;#1、常用的查找算法&quot; class=&quot;headerlink&quot; title=&quot;1、常用的查找算法&quot;&gt;&lt;/a&gt;1、常用的查找算法&lt;/h2&gt;&lt;h3 id=&quot;1-1、adjacent-find&quot;&gt;&lt;a href=&quot;#1-1、adjacent-find&quot; class=&quot;headerlink&quot; title=&quot;1.1、adjacent_find()&quot;&gt;&lt;/a&gt;1.1、adjacent_find()&lt;/h3&gt;&lt;p&gt;在iterator对标识元素范围内，查找一对相邻重复元素，找到则返回指向这对元素的第一个元素的迭代器。否则返回past-the-end。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL算法-算法中函数对象和谓词</title>
    <link href="http://example.com/2022/09/06/STL%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E4%B8%AD%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E8%B0%93%E8%AF%8D/"/>
    <id>http://example.com/2022/09/06/STL%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E4%B8%AD%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E8%B0%93%E8%AF%8D/</id>
    <published>2022-09-06T03:30:29.000Z</published>
    <updated>2022-09-07T09:29:04.547Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-算法中函数对象和谓词"><a href="#STL容器-算法中函数对象和谓词" class="headerlink" title="STL容器-算法中函数对象和谓词"></a>STL容器-算法中函数对象和谓词</h1><h2 id="1、函数对象和谓词定义"><a href="#1、函数对象和谓词定义" class="headerlink" title="1、函数对象和谓词定义"></a>1、函数对象和谓词定义</h2><p><strong>函数对象：</strong><br>重载函数调用操作符的类，其对象常称为函数对象（function object），即它们是行为类似函数的对象。一个类对象，表现出一个函数的特征，就是通过“对象名+(参数列表)”的方式使用一个类对象，如果没有上下文，完全可以把它看作一个函数对待。<span id="more"></span><br>这是通过重载类的operator()来实现的。  </p><p>“在标准库中，函数对象被广泛地使用以获得弹性”，标准库中的很多算法都可以使用函数对象或者函数来作为自定的回调行为。</p><p><strong>谓词：</strong><br>一元函数对象：函数参数1个；<br>二元函数对象：函数参数2个；<br>一元谓词 函数参数1个，函数返回值是bool类型，可以作为一个判断式<br>二元谓词 函数参数2个，函数返回值是bool类型<br>谓词可以是一个仿函数，也可以是一个回调函数。</p><p>一元谓词函数举例如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1，判断给出的string对象的长度是否小于6</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GT6</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">size</span>() &gt;= <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2,判断给出的int是否在3到8之间</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Compare</span><span class="params">( <span class="type">int</span> i )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( i &gt;= <span class="number">3</span> &amp;&amp; i &lt;= <span class="number">8</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二元谓词举例如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1，比较两个string对象，返回一个bool值，指出第一个string是否比第二个短</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isShorter</span><span class="params">(<span class="type">const</span> string &amp;s1, <span class="type">const</span> string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、一元函数对象案例"><a href="#2、一元函数对象案例" class="headerlink" title="2、一元函数对象案例"></a>2、一元函数对象案例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1普通类 重载 函数调用操作符</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FuncShowElemt</span><span class="params">(T &amp;t)</span>  <span class="comment">//普通函数 不能像 仿函数那样记录状态</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; t &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showChar</span><span class="params">(<span class="type">char</span> &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; t &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模板 重载 函数调用操作符</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShowElemt</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ShowElemt</span>()</span><br><span class="line">&#123;</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n++;</span><br><span class="line">cout &lt;&lt; t &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 函数对象 基本使用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">FuncShowElemt</span>&lt;<span class="type">int</span>&gt;(a); <span class="comment">//普通的函数调用</span></span><br><span class="line"></span><br><span class="line">ShowElemt&lt;<span class="type">int</span>&gt; showElemt; <span class="comment">//函数对象 </span></span><br><span class="line"><span class="built_in">showElemt</span>(a); <span class="comment">//函数对象调用 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、一元谓词案例"><a href="#3、一元谓词案例" class="headerlink" title="3、一元谓词案例"></a>3、一元谓词案例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1元谓词 例子</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Isdiv</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Isdiv</span>(<span class="type">const</span> T &amp;divisor)         <span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;divisor = divisor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (t%divisor == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T divisor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">10</span>; i&lt;<span class="number">33</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v2.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="function">Isdiv&lt;<span class="type">int</span>&gt; <span class="title">mydiv</span><span class="params">(a)</span></span>;</span><br><span class="line"><span class="comment">// _InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)   //返回的是迭代器</span></span><br><span class="line">it = <span class="built_in">find_if</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), <span class="built_in">Isdiv</span>&lt;<span class="type">int</span>&gt;(<span class="number">4</span>));</span><br><span class="line"><span class="keyword">if</span> (it != v2.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一个被4整除的数是：&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、二元函数对象案例"><a href="#4、二元函数对象案例" class="headerlink" title="4、二元函数对象案例"></a>4、二元函数对象案例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SumAdd</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(T &amp;t1, T &amp;t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t1 + t2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printE</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = t.<span class="built_in">begin</span>(); it!=t.<span class="built_in">end</span>(); it++ )</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it!=v.<span class="built_in">end</span>(); it++ )</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1, v2 ;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v3;</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">v2.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">v2.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">v2.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">v3.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//transform(v1.begin(), v1.end(), v2.begin(),v3.begin(), SumAdd&lt;int&gt;());</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">template&lt;class _InIt1,</span></span><br><span class="line"><span class="comment">class _InIt2,</span></span><br><span class="line"><span class="comment">class _OutIt,</span></span><br><span class="line"><span class="comment">class _Fn2&gt; inline</span></span><br><span class="line"><span class="comment">_OutIt transform(_InIt1 _First1, _InIt1 _Last1,</span></span><br><span class="line"><span class="comment">_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">transform</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(),v3.<span class="built_in">begin</span>(), <span class="built_in">SumAdd</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printE</span>(v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、二元谓词案例"><a href="#5、二元谓词案例" class="headerlink" title="5、二元谓词案例"></a>5、二元谓词案例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">current</span><span class="params">(<span class="type">int</span> &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">MyCompare</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v[i] = <span class="built_in">rand</span>() % <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), current);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), MyCompare );</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、预定义函数对象和函数适配器"><a href="#6、预定义函数对象和函数适配器" class="headerlink" title="6、预定义函数对象和函数适配器"></a>6、预定义函数对象和函数适配器</h2><ol><li>预定义函数对象基本概念：标准模板库STL提前定义了很多预定义函数对象，#include <functional> 必须包含。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1使用预定义函数对象：</span></span><br><span class="line"><span class="comment">//类模板plus&lt;&gt; 的实现了： 不同类型的数据进行加法运算</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">plus&lt;<span class="type">int</span>&gt; intAdd;</span><br><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> z = <span class="built_in">intAdd</span>(x, y); <span class="comment">//等价于 x + y </span></span><br><span class="line">cout &lt;&lt; z &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">plus&lt;string&gt; stringAdd;</span><br><span class="line">string myc = <span class="built_in">stringAdd</span>(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">cout &lt;&lt; myc &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; v1;</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="string">&quot;zzzz&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//缺省情况下，sort()用底层元素类型的小于操作符以升序排列容器的元素。</span></span><br><span class="line"><span class="comment">//为了降序，可以传递预定义的类模板greater,它调用底层元素类型的大于操作符：</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sort()函数排序&quot;</span> &lt;&lt; endl;;</span><br><span class="line"><span class="built_in">sort</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;string&gt;() ); <span class="comment">//从大到小</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;string&gt;::iterator it=v1.<span class="built_in">begin</span>(); it!=v1.<span class="built_in">end</span>(); it++ )</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>算术函数对象<br>预定义的函数对象支持加、减、乘、除、求余和取反。调用的操作符是与type相关联的实例</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加法：plus&lt;Types&gt;</span></span><br><span class="line">plus&lt;string&gt; stringAdd;</span><br><span class="line">sres = <span class="built_in">stringAdd</span>(sva1,sva2);</span><br><span class="line"><span class="comment">//减法：minus&lt;Types&gt;</span></span><br><span class="line"><span class="comment">//乘法：multiplies&lt;Types&gt;</span></span><br><span class="line"><span class="comment">//除法divides&lt;Tpye&gt;</span></span><br><span class="line"><span class="comment">//求余：modulus&lt;Tpye&gt;</span></span><br><span class="line"><span class="comment">//取反：negate&lt;Type&gt;</span></span><br><span class="line">negate&lt;<span class="type">int</span>&gt; intNegate;</span><br><span class="line">ires = <span class="built_in">intNegate</span>(ires);</span><br><span class="line">Ires= <span class="built_in">UnaryFunc</span>(<span class="built_in">negate</span>&lt;<span class="type">int</span>&gt;(),Ival1);</span><br></pre></td></tr></table></figure><ol start="3"><li>关系函数对象</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等于equal_to&lt;Tpye&gt;</span></span><br><span class="line">equal_to&lt;string&gt; stringEqual;</span><br><span class="line">sres = <span class="built_in">stringEqual</span>(sval1,sval2);</span><br><span class="line"><span class="comment">//不等于    not_equal_to&lt;Type&gt;</span></span><br><span class="line"><span class="comment">//大于      greater&lt;Type&gt;</span></span><br><span class="line"><span class="comment">//大于等于  greater_equal&lt;Type&gt;</span></span><br><span class="line"><span class="comment">//小于      less&lt;Type&gt;</span></span><br><span class="line"><span class="comment">//小于等于  less_equal&lt;Type&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;string&gt; v1;</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="string">&quot;zzzz&quot;</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">string s1 = <span class="string">&quot;ccc&quot;</span>;</span><br><span class="line"><span class="comment">//int num = count_if(v1.begin(),v1.end(), equal_to&lt;string&gt;(),s1);</span></span><br><span class="line"><span class="type">int</span> num = <span class="built_in">count_if</span>(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>(),<span class="built_in">bind2nd</span>(<span class="built_in">equal_to</span>&lt;string&gt;(), s1));</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol start="4"><li>逻辑函数对象</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑与 logical_and&lt;Type&gt;</span></span><br><span class="line">logical_and&lt;<span class="type">int</span>&gt; indAnd;</span><br><span class="line">ires = <span class="built_in">intAnd</span>(ival1,ival2);</span><br><span class="line">dres = <span class="built_in">BinaryFunc</span>( <span class="built_in">logical_and</span>&lt;<span class="type">double</span>&gt;(),dval1,dval2);</span><br><span class="line"><span class="comment">//逻辑或logical_or&lt;Type&gt;</span></span><br><span class="line"><span class="comment">//逻辑非logical_not&lt;Type&gt;</span></span><br><span class="line">logical_not&lt;<span class="type">int</span>&gt; IntNot;</span><br><span class="line">Ires = <span class="built_in">IntNot</span>(ival1);</span><br><span class="line">Dres = <span class="built_in">UnaryFunc</span>( logical_not&lt;<span class="type">double</span>&gt;,dval1);</span><br></pre></td></tr></table></figure><h2 id="7、函数适配器"><a href="#7、函数适配器" class="headerlink" title="7、函数适配器"></a>7、函数适配器</h2><h3 id="7-1、函数适配器的理论知识"><a href="#7-1、函数适配器的理论知识" class="headerlink" title="7.1、函数适配器的理论知识"></a>7.1、函数适配器的理论知识</h3><blockquote><p>STL中已经定义了大量的函数对象，但是有时候需要对函数返回值进行进一步的简单计算，或者填上多余的参数，不能直接带入算法。函数适配器实现了这一功能，将一种函数对象转化为另一种符合要求的函数对象。函数适配器可以分为4大类：绑定适配器（bind adaptor）、组合适配器（composite adaptor）、指针函数适配器（pointer function adaptor）和成员函数适配器（member function adaptor）。</p></blockquote><p>STL中所有的函数适配器由下表列出：</p><p><img src="https://pic.imgdb.cn/item/6317128c16f2c2beb1be5f6a.png"></p><blockquote><p>直接构造STL中的函数适配器通常会导致冗长的类型声明。为简化函数适配器的构造，STL还提供了函数适配器辅助函数（如下图），借助于泛型自动推断技术，无序显式的类型声明便可实现函数适配器的构造。</p></blockquote><p><img src="https://pic.imgdb.cn/item/6317129b16f2c2beb1be6efd.png"></p><h3 id="7-2、常用函数函数适配器"><a href="#7-2、常用函数函数适配器" class="headerlink" title="7.2、常用函数函数适配器"></a>7.2、常用函数函数适配器</h3><p>标准库提供一组函数适配器，用来特殊化或者扩展一元和二元函数对象。常用适配器是：</p><ol><li><strong>绑定器（binder）</strong>: binder通过把二元函数对象的一个实参绑定到一个特殊的值上，将其转换成一元函数对象。C＋＋标准库提供两种预定义的binder适配器：bind1st和bind2nd，前者把值绑定到二元函数对象的第一个实参上，后者绑定在第二个实参上。</li><li><strong>取反器（negator）</strong>: negator是一个将函数对象的值翻转的函数适配器。标准库提供两个预定义的ngeator适配器：not1翻转一元预定义函数对象的真值,而not2翻转二元谓词函数的真值。</li></ol><p>常用函数适配器列表如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind1st</span>(op, value)</span><br><span class="line"><span class="built_in">bind2nd</span>(op, value)</span><br><span class="line"><span class="built_in">not1</span>(op)</span><br><span class="line"><span class="built_in">not2</span>(op)</span><br><span class="line"><span class="built_in">mem_fun_ref</span>(op)</span><br><span class="line"><span class="built_in">mem_fun</span>(op)</span><br><span class="line"><span class="built_in">ptr_fun</span>(op)</span><br></pre></td></tr></table></figure><h3 id="7-3、常用函数适配器案例"><a href="#7-3、常用函数适配器案例" class="headerlink" title="7.3、常用函数适配器案例"></a>7.3、常用函数适配器案例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IsGreat</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">IsGreat</span>(<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">m_num = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> &amp;num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num &gt; m_num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v1.<span class="built_in">begin</span>(); it!=v1.<span class="built_in">end</span>(); it ++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num1 = <span class="built_in">count</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num1:&quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过谓词求大于2的个数</span></span><br><span class="line"><span class="type">int</span> num2 = <span class="built_in">count_if</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">IsGreat</span>(<span class="number">2</span>)); </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num2:&quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过预定义函数对象求大于2的个数   greater&lt;int&gt;() 有2个参数 </span></span><br><span class="line"><span class="comment">//param &gt; 2</span></span><br><span class="line"><span class="type">int</span> num3 = <span class="built_in">count_if</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">bind2nd</span>(<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;(), <span class="number">2</span> ) );</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num3:&quot;</span> &lt;&lt; num3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取模 能被2整除的数 求奇数</span></span><br><span class="line"><span class="type">int</span> num4 = <span class="built_in">count_if</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">bind2nd</span>(modulus &lt;<span class="type">int</span>&gt;(), <span class="number">2</span> ) ); </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;奇数num4:&quot;</span> &lt;&lt; num4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num5 = <span class="built_in">count_if</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">not1</span>( <span class="built_in">bind2nd</span>(modulus &lt;<span class="type">int</span>&gt;(), <span class="number">2</span> ) ) ); </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;偶数num5:&quot;</span> &lt;&lt; num5 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、STL的容器算法迭代器的设计理念"><a href="#8、STL的容器算法迭代器的设计理念" class="headerlink" title="8、STL的容器算法迭代器的设计理念"></a>8、STL的容器算法迭代器的设计理念</h2><ol><li>STL的容器通过类模板技术，实现数据类型和容器模型的分离。</li><li>STL的迭代器技术实现了遍历容器的统一方法；也为STL的算法提供了统一性</li><li>STL的函数对象实现了自定义数据类型的算法运算。（算法和）</li><li>具体例子：transform算法的输入，通过迭代器first和last指向的元算作为输入；通过result作为输出；通过函数对象来做自定义数据类型的运算。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-算法中函数对象和谓词&quot;&gt;&lt;a href=&quot;#STL容器-算法中函数对象和谓词&quot; class=&quot;headerlink&quot; title=&quot;STL容器-算法中函数对象和谓词&quot;&gt;&lt;/a&gt;STL容器-算法中函数对象和谓词&lt;/h1&gt;&lt;h2 id=&quot;1、函数对象和谓词定义&quot;&gt;&lt;a href=&quot;#1、函数对象和谓词定义&quot; class=&quot;headerlink&quot; title=&quot;1、函数对象和谓词定义&quot;&gt;&lt;/a&gt;1、函数对象和谓词定义&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;函数对象：&lt;/strong&gt;&lt;br&gt;重载函数调用操作符的类，其对象常称为函数对象（function object），即它们是行为类似函数的对象。一个类对象，表现出一个函数的特征，就是通过“对象名+(参数列表)”的方式使用一个类对象，如果没有上下文，完全可以把它看作一个函数对待。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL算法-算法基础</title>
    <link href="http://example.com/2022/09/06/STL%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/09/06/STL%E7%AE%97%E6%B3%95-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-06T03:29:41.000Z</published>
    <updated>2022-09-07T09:29:08.123Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-算法基础"><a href="#STL容器-算法基础" class="headerlink" title="STL容器-算法基础"></a>STL容器-算法基础</h1><h2 id="1、算法概述"><a href="#1、算法概述" class="headerlink" title="1、算法概述"></a>1、算法概述</h2><ul><li>算法部分主要由头文件<code>&lt;algorithm&gt;，&lt;numeric&gt;和&lt;functional&gt;</code>组成。</li><li><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、反转、排序、合并等等。<span id="more"></span></li><li><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。</li><li><code>&lt;functional&gt;</code>中则定义了一些模板类，用以声明函数对象。</li><li>STL提供了大量实现算法的模版函数，只要我们熟悉了STL之后，许多代码可以被大大的化简，只需要通过调用一两个算法模板，就可以完成所需要的功能，从而大大地提升效率。</li><li><code>#include &lt;algorithm&gt;</code></li><li><code>#include &lt;numeric&gt;</code></li><li><code>#include &lt;functional&gt;</code></li></ul><h2 id="2、STL中算法分类"><a href="#2、STL中算法分类" class="headerlink" title="2、STL中算法分类"></a>2、STL中算法分类</h2><ul><li>操作对象 <ul><li>直接改变容器的内容</li><li>将原容器的内容复制一份,修改其副本,然后传回该副本</li></ul></li><li>功能: <ul><li>非可变序列算法 指不直接修改其所操作的容器内容的算法<ul><li>计数算法 count、count_if</li><li>搜索算法 search、find、find_if、find_first_of、…</li><li>比较算法 equal、mismatch、lexicographical_compare</li></ul></li><li>可变序列算法 指可以修改它们所操作的容器内容的算法<ul><li>删除算法 remove、remove_if、remove_copy、…</li><li>修改算法 for_each、transform</li><li>排序算法 sort、stable_sort、partial_sort、</li></ul></li><li>排序算法 包括对序列进行排序和合并的算法、搜索算法以及有序序列上的集合操作</li><li>数值算法 对容器内容进行数值计算</li></ul></li></ul><h2 id="3、查找算法-13个-：判断容器中是否包含某个值"><a href="#3、查找算法-13个-：判断容器中是否包含某个值" class="headerlink" title="3、查找算法(13个)：判断容器中是否包含某个值"></a>3、查找算法(13个)：判断容器中是否包含某个值</h2><p><img src="https://pic.imgdb.cn/item/6316e17916f2c2beb1844e5f.jpg"></p><h2 id="4、堆算法-4个"><a href="#4、堆算法-4个" class="headerlink" title="4、堆算法(4个)"></a>4、堆算法(4个)</h2><p><img src="https://pic.imgdb.cn/item/6316e19b16f2c2beb184719d.jpg"></p><h2 id="5、关系算法-8个"><a href="#5、关系算法-8个" class="headerlink" title="5、关系算法(8个)"></a>5、关系算法(8个)</h2><p><img src="https://pic.imgdb.cn/item/6316e1c616f2c2beb184aa79.jpg"></p><h2 id="6、集合算法-4个"><a href="#6、集合算法-4个" class="headerlink" title="6、集合算法(4个)"></a>6、集合算法(4个)</h2><p><img src="https://pic.imgdb.cn/item/6316e1e816f2c2beb184e011.jpg"></p><h2 id="7、列组合算法-2个"><a href="#7、列组合算法-2个" class="headerlink" title="7、列组合算法(2个)"></a>7、列组合算法(2个)</h2><p>提供计算给定集合按一定顺序的所有可能排列组合<br><img src="https://pic.imgdb.cn/item/6316e27a16f2c2beb18581a5.jpg"></p><h2 id="8、排序和通用算法-14个-：提供元素排序策略"><a href="#8、排序和通用算法-14个-：提供元素排序策略" class="headerlink" title="8、排序和通用算法(14个)：提供元素排序策略"></a>8、排序和通用算法(14个)：提供元素排序策略</h2><p><img src="https://pic.imgdb.cn/item/6316e2b216f2c2beb185b68e.jpg"></p><h2 id="9、删除和替换算法-15个"><a href="#9、删除和替换算法-15个" class="headerlink" title="9、删除和替换算法(15个)"></a>9、删除和替换算法(15个)</h2><p><img src="https://pic.imgdb.cn/item/6316e2e616f2c2beb185ef9d.jpg"></p><h2 id="10、生成和变异算法-6个"><a href="#10、生成和变异算法-6个" class="headerlink" title="10、生成和变异算法(6个)"></a>10、生成和变异算法(6个)</h2><p><img src="https://pic.imgdb.cn/item/6316e30716f2c2beb1861190.jpg"></p><h2 id="11、算数算法-4个"><a href="#11、算数算法-4个" class="headerlink" title="11、算数算法(4个)"></a>11、算数算法(4个)</h2><p><img src="https://pic.imgdb.cn/item/6316e33216f2c2beb18643d7.jpg"></p><h2 id="12、常用算法汇总"><a href="#12、常用算法汇总" class="headerlink" title="12、常用算法汇总"></a>12、常用算法汇总</h2><ul><li>常用的查找算法：<br>adjacent_find()（ adjacent 是邻近的意思）,binary_search(),count(),<br>count_if(),equal_range(),find(),find_if()。</li><li>常用的排序算法：<br>merge(),sort(),random_shuffle()（shuffle是洗牌的意思） ,reverse()。</li><li>常用的拷贝和替换算法：<br>copy(), replace(),<br>replace_if(),swap()</li><li>常用的算术和生成算法：<br>accumulate()（ accumulate 是求和的意思）,fill(),。</li><li>常用的集合算法：<br>set_union(),set_intersection(),<br>set_difference()。</li><li>常用的遍历算法：<br>for_each(), transform()（ transform 是变换的意思）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-算法基础&quot;&gt;&lt;a href=&quot;#STL容器-算法基础&quot; class=&quot;headerlink&quot; title=&quot;STL容器-算法基础&quot;&gt;&lt;/a&gt;STL容器-算法基础&lt;/h1&gt;&lt;h2 id=&quot;1、算法概述&quot;&gt;&lt;a href=&quot;#1、算法概述&quot; class=&quot;headerlink&quot; title=&quot;1、算法概述&quot;&gt;&lt;/a&gt;1、算法概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;算法部分主要由头文件&lt;code&gt;&amp;lt;algorithm&amp;gt;，&amp;lt;numeric&amp;gt;和&amp;lt;functional&amp;gt;&lt;/code&gt;组成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;是所有STL头文件中最大的一个，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、反转、排序、合并等等。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL容器-容器共性机制研究</title>
    <link href="http://example.com/2022/09/06/STL%E5%AE%B9%E5%99%A8-%E5%AE%B9%E5%99%A8%E5%85%B1%E6%80%A7%E6%9C%BA%E5%88%B6%E7%A0%94%E7%A9%B6/"/>
    <id>http://example.com/2022/09/06/STL%E5%AE%B9%E5%99%A8-%E5%AE%B9%E5%99%A8%E5%85%B1%E6%80%A7%E6%9C%BA%E5%88%B6%E7%A0%94%E7%A9%B6/</id>
    <published>2022-09-06T03:09:53.000Z</published>
    <updated>2022-09-06T03:25:52.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-容器共性机制研究"><a href="#STL容器-容器共性机制研究" class="headerlink" title="STL容器-容器共性机制研究"></a>STL容器-容器共性机制研究</h1><h2 id="1、容器的共通能力"><a href="#1、容器的共通能力" class="headerlink" title="1、容器的共通能力"></a>1、容器的共通能力</h2><p>C++模板是容器的概念。</p><p>理论提高：所有容器提供的都是值（value）语意，而非引用（reference）语意。容器执行插入元素的操作时，内部实施拷贝动作。所以STL容器内存储的元素必须能够被拷贝（必须提供拷贝构造函数）。<span id="more"></span></p><ul><li>除了queue与stack外，每个容器都提供可返回迭代器的函数，运用返回的迭代器就可以访问元素。</li><li>通常STL不会丢出异常。要求使用者确保传入正确的参数。</li><li>每个容器都提供了一个默认构造函数跟一个默认拷贝构造函数。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如已有容器vecIntA。 </span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vecIntB</span><span class="params">(vecIntA)</span></span>;  <span class="comment">//调用拷贝构造函数，复制vecIntA到vecIntB中。</span></span><br></pre></td></tr></table></figure></li><li>与大小相关的操作方法(c代表容器)：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.<span class="built_in">size</span>();   <span class="comment">//返回容器中元素的个数</span></span><br><span class="line">c.<span class="built_in">empty</span>();   <span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure></li><li>比较操作(c1,c2代表容器)：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c1 == c2     <span class="comment">//判断c1是否等于c2</span></span><br><span class="line">c1 != c2     <span class="comment">//判断c1是否不等于c2</span></span><br><span class="line">c1 = c2      <span class="comment">//把c2的所有元素指派给c1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2、各个容器的使用时机"><a href="#2、各个容器的使用时机" class="headerlink" title="2、各个容器的使用时机"></a>2、各个容器的使用时机</h2><table><thead><tr><th></th><th>vector</th><th>deque</th><th>list</th><th>set</th><th>multiset</th><th>map</th><th>multimap</th></tr></thead><tbody><tr><td>典型内存结构</td><td>单端数组</td><td>双端数组</td><td>双向链表</td><td>二叉树</td><td>二叉树</td><td>二叉树</td><td>二叉树</td></tr><tr><td>可随机存取</td><td>是</td><td>是</td><td>否</td><td>否</td><td>否</td><td>对key而言是</td><td>否</td></tr><tr><td>元素搜寻速度</td><td>慢</td><td>慢</td><td>非常慢</td><td>快</td><td>快</td><td>对key而言快</td><td>对key而言快</td></tr><tr><td>快速安插移除</td><td>尾端</td><td>头尾两端</td><td>任何位置</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><ul><li><strong>deque的使用场景</strong>：比如排队购票系统，对排队者的存储可以采用deque，支持头端的快速移除，尾端的快速添加。如果采用vector，则头端移除时，会移动大量的数据，速度慢。</li><li><strong>vector与deque的比较</strong>：<ul><li>vector.at()比deque.at()效率高，比如vector.at(0)是固定的，deque的开始位置却是不固定的。</li><li>如果有大量释放操作的话，vector花的时间更少，这跟二者的内部实现有关。</li><li>deque支持头部的快速插入与快速移除，这是deque的优点。</li></ul></li><li><strong>list的使用场景</strong>：比如公交车乘客的存储，随时可能有乘客下车，支持频繁的不确实位置元素的移除插入。</li><li><strong>set的使用场景</strong>：比如对手机游戏的个人得分记录的存储，存储要求从高分到低分的顺序排列。 </li><li><strong>map的使用场景</strong>：比如按ID号存储十万个用户，想要快速要通过ID查找对应的用户。二叉树的查找效率，这时就体现出来了。如果是vector容器，最坏的情况下可能要遍历完整个容器才能找到该用户。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-容器共性机制研究&quot;&gt;&lt;a href=&quot;#STL容器-容器共性机制研究&quot; class=&quot;headerlink&quot; title=&quot;STL容器-容器共性机制研究&quot;&gt;&lt;/a&gt;STL容器-容器共性机制研究&lt;/h1&gt;&lt;h2 id=&quot;1、容器的共通能力&quot;&gt;&lt;a href=&quot;#1、容器的共通能力&quot; class=&quot;headerlink&quot; title=&quot;1、容器的共通能力&quot;&gt;&lt;/a&gt;1、容器的共通能力&lt;/h2&gt;&lt;p&gt;C++模板是容器的概念。&lt;/p&gt;
&lt;p&gt;理论提高：所有容器提供的都是值（value）语意，而非引用（reference）语意。容器执行插入元素的操作时，内部实施拷贝动作。所以STL容器内存储的元素必须能够被拷贝（必须提供拷贝构造函数）。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL容器-Map和multimap</title>
    <link href="http://example.com/2022/09/05/STL%E5%AE%B9%E5%99%A8-Map%E5%92%8Cmultimap/"/>
    <id>http://example.com/2022/09/05/STL%E5%AE%B9%E5%99%A8-Map%E5%92%8Cmultimap/</id>
    <published>2022-09-05T03:21:31.000Z</published>
    <updated>2022-09-06T03:37:00.403Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-Map和multimap"><a href="#STL容器-Map和multimap" class="headerlink" title="STL容器-Map和multimap"></a>STL容器-Map和multimap</h1><h2 id="1、map-x2F-multimap的简介"><a href="#1、map-x2F-multimap的简介" class="headerlink" title="1、map&#x2F;multimap的简介"></a>1、map&#x2F;multimap的简介</h2><ul><li>map是标准的关联式容器，一个map是一个键值对序列，即(key,value)对。它提供基于key的快速检索能力。<span id="more"></span></li><li>map中key值是唯一的。集合中的元素按一定的顺序排列。元素插入过程是按排序规则插入，所以不能指定插入位置。</li><li><strong>map的具体实现采用红黑树变体的平衡二叉树的数据结构</strong>。在插入操作和删除操作上比vector快。</li><li>map可以直接存取key所对应的value，支持[]操作符，如map[key]&#x3D;value。</li><li>multimap与map的区别：map支持唯一键值，每个键只能出现一次；而multimap中相同键可以出现多次。multimap不支持[]操作符。</li><li><code>#include &lt;map&gt;</code></li></ul><h2 id="2、map-x2F-multimap对象的默认构造"><a href="#2、map-x2F-multimap对象的默认构造" class="headerlink" title="2、map&#x2F;multimap对象的默认构造"></a>2、map&#x2F;multimap对象的默认构造</h2><p>map&#x2F;multimap采用模板类实现，对象的默认构造形式：<br><code>map&lt;T1,T2&gt; mapTT; </code><br><code>multimap&lt;T1,T2&gt;  multimapTT;  </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如：</span><br><span class="line">map&lt;int, char&gt; mapA;</span><br><span class="line">map&lt;string,float&gt; mapB;</span><br><span class="line">//其中T1,T2还可以用各种指针类型或自定义类型</span><br></pre></td></tr></table></figure><h2 id="3、map的插入与迭代器"><a href="#3、map的插入与迭代器" class="headerlink" title="3、map的插入与迭代器"></a>3、map的插入与迭代器</h2><ul><li><p><strong>map.insert(…);</strong>    &#x2F;&#x2F;往容器插入元素，返回pair&lt;iterator,bool&gt;</p></li><li><p><strong>在map中插入元素的三种方式：</strong><br>假设  map&lt;int, string&gt; mapStu;</p><ul><li>通过pair的方式插入对象<br>  <code>mapStu.insert(  pair&lt;int,string&gt;(3,&quot;小张&quot;)  );</code></li><li>通过pair的方式插入对象<br>  <code>mapStu.inset(make_pair(-1, “校长-1”));</code></li><li>通过value_type的方式插入对象<br>  <code>mapStu.insert(  map&lt;int,string&gt;::value_type(1,&quot;小李&quot;)  );</code></li><li>通过数组的方式插入值<br>  <code>mapStu[3] = “小刘&quot;;</code><br>  <code>mapStu[5] = “小王&quot;；</code></li></ul></li><li><p>前三种方法，采用的是insert()方法，该方法返回值为pair&lt;iterator,bool&gt; </p></li><li><p>第四种方法非常直观，但存在一个性能的问题。插入3时，先在mapStu中查找主键为3的项，若没发现，则将一个键为3，值为初始化值的对组插入到mapStu中，然后再将值修改成“小刘”。若发现已存在3这个键，则修改这个键对应的value。</p></li><li><p>string strName &#x3D; mapStu[2];   &#x2F;&#x2F;取操作或插入操作</p></li><li><p>只有当mapStu存在2这个键时才是正确的取操作，否则会自动插入一个实例，键为2，值为初始化值。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设  map&lt;int, string&gt; mapA;</span></span><br><span class="line">pair&lt; map&lt;<span class="type">int</span>,string&gt;::iterator, <span class="type">bool</span> &gt; pairResult = mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">3</span>,<span class="string">&quot;小张&quot;</span>));       <span class="comment">//插入方式一</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iFirstFirst = (pairResult.first)-&gt;first; <span class="comment">//iFirst == 3;</span></span><br><span class="line">string strFirstSecond = (pairResult.first)-&gt;second; <span class="comment">//strFirstSecond为&quot;小张&quot;</span></span><br><span class="line"><span class="type">bool</span> bSecond = pairResult.second; <span class="comment">//bSecond == true;</span></span><br><span class="line"></span><br><span class="line">mapA.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>,string&gt;::<span class="built_in">value_type</span>(<span class="number">1</span>,<span class="string">&quot;小李&quot;</span>)); <span class="comment">//插入方式二</span></span><br><span class="line"></span><br><span class="line">mapA[<span class="number">3</span>] = <span class="string">&quot;小刘&quot;</span>;    <span class="comment">//修改value</span></span><br><span class="line">mapA[<span class="number">5</span>] = <span class="string">&quot;小王&quot;</span>;    <span class="comment">//插入方式三</span></span><br><span class="line"></span><br><span class="line">string str1 = mapA[<span class="number">2</span>];<span class="comment">//执行插入 string() 操作，返回的str1的字符串内容为空。</span></span><br><span class="line">string str2 = mapA[<span class="number">3</span>];<span class="comment">//取得value，str2为&quot;小刘&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器遍历</span></span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>,string&gt;::iterator it=mapA.<span class="built_in">begin</span>(); it!=mapA.<span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">    pair&lt;<span class="type">int</span>, string&gt; pr = *it;</span><br><span class="line">    <span class="type">int</span> iKey = pr.first;</span><br><span class="line">    string strValue = pr.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//map.rbegin()与map.rend()  略。</span></span><br></pre></td></tr></table></figure><ul><li><strong>map&lt;T1,T2,less<T1> &gt;  mapA;</strong>    &#x2F;&#x2F;该容器是按键的升序方式排列元素。未指定函数对象，默认采用less<T1>函数对象。</li><li><strong>map&lt;T1,T2,greater<T1>&gt; mapB;</strong>   &#x2F;&#x2F;该容器是按键的降序方式排列元素。</li><li>less<T1>与greater<T1> 可以替换成其它的函数对象functor。</li><li>可编写自定义函数对象以进行自定义类型的比较，使用方法与set构造时所用的函数对象一样。</li><li><strong>map.begin();</strong>  &#x2F;&#x2F;返回容器中第一个数据的迭代器。</li><li><strong>map.end();</strong>    &#x2F;&#x2F;返回容器中最后一个数据之后的迭代器。</li><li><strong>map.rbegin();</strong> &#x2F;&#x2F;返回容器中倒数第一个元素的迭代器。</li><li><strong>map.rend();</strong>   &#x2F;&#x2F;返回容器中倒数最后一个元素的后面的迭代器。</li></ul><h2 id="4、map对象的拷贝构造与赋值"><a href="#4、map对象的拷贝构造与赋值" class="headerlink" title="4、map对象的拷贝构造与赋值"></a>4、map对象的拷贝构造与赋值</h2><ul><li><strong>map(const map &amp;mp);</strong>        &#x2F;&#x2F;拷贝构造函数</li><li><strong>map&amp; operator&#x3D;(const map &amp;mp);</strong>&#x2F;&#x2F;重载等号操作符</li><li><strong>map.swap(mp);</strong>        &#x2F;&#x2F;交换两个集合容器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例如:</span><br><span class="line">map&lt;<span class="type">int</span>, string&gt; mapA;</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">3</span>,<span class="string">&quot;小张&quot;</span>));</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">1</span>,<span class="string">&quot;小杨&quot;</span>));</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">7</span>,<span class="string">&quot;小赵&quot;</span>));</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">5</span>,<span class="string">&quot;小王&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="function">map&lt;<span class="type">int</span> ,string&gt; <span class="title">mapB</span><span class="params">(mapA)</span></span>;<span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line">map&lt;<span class="type">int</span>, string&gt; mapC;</span><br><span class="line">mapC = mapA;<span class="comment">//赋值</span></span><br><span class="line"></span><br><span class="line">mapC[<span class="number">3</span>] = <span class="string">&quot;老张&quot;</span>;</span><br><span class="line">mapC.<span class="built_in">swap</span>(mapA);            <span class="comment">//交换</span></span><br></pre></td></tr></table></figure><h2 id="5、map的大小"><a href="#5、map的大小" class="headerlink" title="5、map的大小"></a>5、map的大小</h2><ul><li><strong>map.size();</strong>&#x2F;&#x2F;返回容器中元素的数目</li><li><strong>map.empty();</strong>  &#x2F;&#x2F;判断容器是否为空</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>, string&gt; mapA;</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">3</span>,<span class="string">&quot;小张&quot;</span>));</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">1</span>,<span class="string">&quot;小杨&quot;</span>));</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">7</span>,<span class="string">&quot;小赵&quot;</span>));</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">5</span>,<span class="string">&quot;小王&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mapA.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iSize = mapA.<span class="built_in">size</span>();<span class="comment">//iSize == 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、map的删除"><a href="#6、map的删除" class="headerlink" title="6、map的删除"></a>6、map的删除</h2><ul><li><strong>map.clear();</strong>&#x2F;&#x2F;删除所有元素</li><li><strong>map.erase(pos);</strong>&#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><strong>map.erase(beg,end);</strong>    &#x2F;&#x2F;删除区间[beg,end)的所有元素，返回下一个元素的迭代器。</li><li><strong>map.erase(keyElem);</strong>    &#x2F;&#x2F;删除容器中key为keyElem的对组。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>, string&gt; mapA;</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">3</span>,<span class="string">&quot;小张&quot;</span>));</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">1</span>,<span class="string">&quot;小杨&quot;</span>));</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">7</span>,<span class="string">&quot;小赵&quot;</span>));</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">5</span>,<span class="string">&quot;小王&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除区间内的元素</span></span><br><span class="line">map&lt;<span class="type">int</span>,string&gt;::iterator itBegin=mapA.<span class="built_in">begin</span>();</span><br><span class="line">++ itBegin;</span><br><span class="line">++ itBegin;</span><br><span class="line">map&lt;<span class="type">int</span>,string&gt;::iterator itEnd=mapA.<span class="built_in">end</span>();</span><br><span class="line">mapA.<span class="built_in">erase</span>(itBegin,itEnd);<span class="comment">//此时容器mapA包含按顺序的&#123;1,&quot;小杨&quot;&#125;&#123;3,&quot;小张&quot;&#125;两个元素。</span></span><br><span class="line"></span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">7</span>,<span class="string">&quot;小赵&quot;</span>));</span><br><span class="line">mapA.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">5</span>,<span class="string">&quot;小王&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除容器中第一个元素</span></span><br><span class="line">mapA.<span class="built_in">erase</span>(mapA.<span class="built_in">begin</span>());    <span class="comment">//此时容器mapA包含了按顺序的&#123;3,&quot;小张&quot;&#125;&#123;5,&quot;小王&quot;&#125;&#123;7,&quot;小赵&quot;&#125;三个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除容器中key为5的元素</span></span><br><span class="line">mapA.<span class="built_in">erase</span>(<span class="number">5</span>);    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除mapA的所有元素</span></span><br><span class="line">mapA.<span class="built_in">clear</span>();            <span class="comment">//容器为空</span></span><br></pre></td></tr></table></figure><h2 id="7、map的查找"><a href="#7、map的查找" class="headerlink" title="7、map的查找"></a>7、map的查找</h2><ul><li><strong>map.find(key);</strong>        &#x2F;&#x2F;查找键key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回map.end();</li><li><strong>map.count(keyElem);</strong>   &#x2F;&#x2F;返回容器中key为keyElem的对组个数。对map来说，要么是0，要么是1。对multimap来说，值可能大于1。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,string&gt;::iterator it=mapStu.<span class="built_in">find</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(it == mapStu.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//没找到</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//找到了</span></span><br><span class="line">    pair&lt;<span class="type">int</span>, string&gt; pairStu = *it;</span><br><span class="line">    <span class="type">int</span> iID = pairStu.first;    <span class="comment">//或 int iID = it-&gt;first;</span></span><br><span class="line">    string strName = pairStu.second;<span class="comment">//或 string strName = it-&gt;second;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>map.lower_bound(keyElem);</strong>   &#x2F;&#x2F;返回第一个key&gt;&#x3D;keyElem元素的迭代器。</li><li><strong>map.upper_bound(keyElem);</strong>  &#x2F;&#x2F;返回第一个key&gt;keyElem元素的迭代器。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如：  mapStu是用map&lt;int,string&gt;声明的容器，已包含&#123;1,&quot;小李&quot;&#125;&#123;3,&quot;小张&quot;&#125;&#123;5,&quot;小王&quot;&#125;&#123;7,&quot;小赵&quot;&#125;&#123;9,&quot;小陈&quot;&#125;元素。</span></span><br><span class="line">map&lt;<span class="type">int</span>,string&gt;::iterator it;</span><br><span class="line">it = mapStu.<span class="built_in">lower_bound</span>(<span class="number">5</span>);  <span class="comment">//it-&gt;first==5    it-&gt;second==&quot;小王&quot;</span></span><br><span class="line">it = mapStu.<span class="built_in">upper_bound</span>(<span class="number">5</span>);  <span class="comment">//it-&gt;first==7    it-&gt;second==&quot;小赵&quot;</span></span><br><span class="line">it = mapStu.<span class="built_in">lower_bound</span>(<span class="number">6</span>);  <span class="comment">//it-&gt;first==7    it-&gt;second==&quot;小赵&quot;</span></span><br><span class="line">it = mapStu.<span class="built_in">upper_bound</span>(<span class="number">6</span>);  <span class="comment">//it-&gt;first==7    it-&gt;second==&quot;小赵&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>map.equal_range(keyElem);</strong> &#x2F;&#x2F;返回容器中key与keyElem相等的上下限的两个迭代器。上限是闭区间，下限是开区间，如[beg,end)。</li></ul><p>以上函数返回两个迭代器，而这两个迭代器被封装在pair中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如 map&lt;<span class="type">int</span>,string&gt; mapStu;</span><br><span class="line">...  <span class="comment">//往mapStu容器插入元素&#123;1,&quot;小李&quot;&#125;&#123;3,&quot;小张&quot;&#125;&#123;5,&quot;小王&quot;&#125;&#123;7,&quot;小赵&quot;&#125;&#123;9,&quot;小陈&quot;&#125;</span></span><br><span class="line">pair&lt; map&lt;<span class="type">int</span>,string&gt;::iterator , map&lt;<span class="type">int</span>,string&gt;::iterator &gt; pairIt = mapStu.<span class="built_in">equal_range</span>(<span class="number">5</span>);</span><br><span class="line">map&lt;<span class="type">int</span>, string&gt;::iterator itBeg = pairIt.first;</span><br><span class="line">map&lt;<span class="type">int</span>, string&gt;::iterator itEnd = pairIt.second;</span><br><span class="line"><span class="comment">//此时 itBeg-&gt;first==5  ,  itEnd-&gt;first == 7,</span></span><br><span class="line">itBeg-&gt;second==<span class="string">&quot;小王&quot;</span>, itEnd-&gt;second==<span class="string">&quot;小赵&quot;</span></span><br></pre></td></tr></table></figure><h2 id="8、Multimap-案例"><a href="#8、Multimap-案例" class="headerlink" title="8、Multimap 案例:"></a>8、Multimap 案例:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1个key值可以对应多个valude  =分组 </span></span><br><span class="line"><span class="comment">//公司有销售部 sale （员工2名）、技术研发部 development （1人）、财务部 Financial （2人） </span></span><br><span class="line"><span class="comment">//人员信息有：姓名，年龄，电话、工资等组成</span></span><br><span class="line"><span class="comment">//通过 multimap进行 信息的插入、保存、显示</span></span><br><span class="line"><span class="comment">//分部门显示员工信息 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//略。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-Map和multimap&quot;&gt;&lt;a href=&quot;#STL容器-Map和multimap&quot; class=&quot;headerlink&quot; title=&quot;STL容器-Map和multimap&quot;&gt;&lt;/a&gt;STL容器-Map和multimap&lt;/h1&gt;&lt;h2 id=&quot;1、map-x2F-multimap的简介&quot;&gt;&lt;a href=&quot;#1、map-x2F-multimap的简介&quot; class=&quot;headerlink&quot; title=&quot;1、map&amp;#x2F;multimap的简介&quot;&gt;&lt;/a&gt;1、map&amp;#x2F;multimap的简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;map是标准的关联式容器，一个map是一个键值对序列，即(key,value)对。它提供基于key的快速检索能力。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL容器-Set和multiset</title>
    <link href="http://example.com/2022/09/05/STL%E5%AE%B9%E5%99%A8-Set%E5%92%8Cmultiset/"/>
    <id>http://example.com/2022/09/05/STL%E5%AE%B9%E5%99%A8-Set%E5%92%8Cmultiset/</id>
    <published>2022-09-05T03:19:54.000Z</published>
    <updated>2022-09-06T03:36:30.545Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-Set和multiset"><a href="#STL容器-Set和multiset" class="headerlink" title="STL容器-Set和multiset"></a>STL容器-Set和multiset</h1><h2 id="1、set-x2F-multiset的简介"><a href="#1、set-x2F-multiset的简介" class="headerlink" title="1、set&#x2F;multiset的简介"></a>1、set&#x2F;multiset的简介</h2><ul><li>set是一个<strong>集合</strong>容器，其中所包含的元素是唯一的，<strong>集合中的元素按一定的顺序排列</strong>。元素插入过程是按排序规则插入，所以不能指定插入位置。</li><li>set采用红黑树变体的数据结构实现，红黑树属于平衡二叉树。在插入操作和删除操作上比vector快。<span id="more"></span></li><li>set不可以直接存取元素。（不可以使用at.(pos)与[]操作符）。</li><li>multiset与set的区别：set支持唯一键值，每个元素值只能出现一次；而multiset中同一值可以出现多次。</li><li>不可以直接修改set或multiset容器中的元素值，因为该类容器是自动排序的。如果希望修改一个元素值，必须先删除原有的元素，再插入新的元素。</li><li><code>#include &lt;set&gt;  </code></li></ul><h2 id="2、set-x2F-multiset对象的默认构造"><a href="#2、set-x2F-multiset对象的默认构造" class="headerlink" title="2、set&#x2F;multiset对象的默认构造"></a>2、set&#x2F;multiset对象的默认构造</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; setInt;            <span class="comment">//一个存放int的set容器。</span></span><br><span class="line">set&lt;<span class="type">float</span>&gt; setFloat;        <span class="comment">//一个存放float的set容器。</span></span><br><span class="line">set&lt;string&gt; setString;      <span class="comment">//一个存放string的set容器。</span></span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; mulsetInt;    <span class="comment">//一个存放int的multi set容器。</span></span><br><span class="line">multi set&lt;<span class="type">float</span>&gt; multisetFloat;     <span class="comment">//一个存放float的multi set容器。</span></span><br><span class="line">multi set&lt;string&gt; multisetString;   <span class="comment">//一个存放string的multi set容器。</span></span><br></pre></td></tr></table></figure><h2 id="3、set的插入与迭代器"><a href="#3、set的插入与迭代器" class="headerlink" title="3、set的插入与迭代器"></a>3、set的插入与迭代器</h2><ul><li><strong>set.insert(elem);</strong>     &#x2F;&#x2F;在容器中插入元素。</li><li><strong>set.begin();</strong>          &#x2F;&#x2F;返回容器中第一个数据的迭代器。</li><li><strong>set.end();</strong>            &#x2F;&#x2F;返回容器中最后一个数据之后的迭代器。</li><li><strong>set.rbegin();</strong>         &#x2F;&#x2F;返回容器中倒数第一个元素的迭代器。</li><li><strong>set.rend();</strong>           &#x2F;&#x2F;返回容器中倒数最后一个元素的后面的迭代器。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; setInt;</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">3</span>); setInt.<span class="built_in">insert</span>(<span class="number">1</span>);setInt.<span class="built_in">insert</span>(<span class="number">5</span>);setInt.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(set&lt;<span class="type">int</span>&gt;::iterator it=setInt.<span class="built_in">begin</span>(); it!=setInt.<span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iItem = *it;</span><br><span class="line">    cout &lt;&lt; iItem;    <span class="comment">//或直接使用cout &lt;&lt; *it</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样子便顺序输出  1 2 3 5。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//set.rbegin()与set.rend()。略。</span></span><br></pre></td></tr></table></figure><h2 id="4、Set集合的元素排序"><a href="#4、Set集合的元素排序" class="headerlink" title="4、Set集合的元素排序"></a>4、Set集合的元素排序</h2><ul><li><strong>set&lt;int,less<int> &gt; setIntA;</strong>     &#x2F;&#x2F;该容器是按升序方式排列元素。</li><li><strong>set&lt;int,greater<int>&gt; setIntB;</strong>   &#x2F;&#x2F;该容器是按降序方式排列元素。</li><li>set<int> 相当于 set&lt;int,less<int>&gt;。</li><li>less<int>与greater<int>中的int可以改成其它类型，该类型主要要跟set容纳的数据类型一致。<ul><li>疑问1：less&lt;&gt;与greater&lt;&gt;是什么？</li><li>疑问2：如果set&lt;&gt;不包含int类型，而是包含自定义类型，set容器如何排序？<ul><li>要解决如上两个问题，需要了解容器的函数对象，也叫伪函数，英文名叫functor。</li><li>下面将讲解什么是functor，functor的用法。</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用stl提供的函数对象</span></span><br><span class="line">set&lt;<span class="type">int</span>,greater&lt;<span class="type">int</span>&gt;&gt; setIntB;   </span><br><span class="line">setIntB.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">setIntB.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">setIntB.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">setIntB.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//此时容器setIntB就包含了按顺序的5,3,2,1元素</span></span><br></pre></td></tr></table></figure><h2 id="5、函数对象functor的用法"><a href="#5、函数对象functor的用法" class="headerlink" title="5、函数对象functor的用法"></a>5、函数对象functor的用法</h2><ul><li>尽管函数指针被广泛用于实现函数回调，但C++还提供了一个重要的实现回调函数的方法，那就是函数对象。</li><li>functor，翻译成函数对象，伪函数，算符，是重载了“()”操作符的普通类对象。从语法上讲，它与普通函数行为类似。</li><li>greater&lt;&gt;与less&lt;&gt;就是函数对象。</li><li>下面举出greater<int>的简易实现原理。  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">greater</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; iLeft, <span class="type">const</span> <span class="type">int</span>&amp; iRight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (iLeft&gt;iRight);    <span class="comment">//如果是实现less&lt;int&gt;的话，这边是写return (iLeft&lt;iRight);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器就是调用函数对象的operator()方法去比较两个值的大小。</span></span><br></pre></td></tr></table></figure></li></ul><p>题目：学生包含学号，姓名属性，现要求任意插入几个学生对象到set容器中，使得容器中的学生按学号的升序排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解：</span></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CStudent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CStudent</span>(<span class="type">int</span> iID, string strName)</span><br><span class="line">&#123;</span><br><span class="line">m_iID = iID;</span><br><span class="line">m_strName = strName;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="type">int</span> m_iID;    <span class="comment">//学号</span></span><br><span class="line">     string m_strName; <span class="comment">//姓名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为保持主题鲜明，本类不写拷贝构造函数，不类也不需要写拷贝构造函数。但大家仍要有考虑拷贝构造函数的习惯。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数对象</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">StuFunctor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span>  <span class="params">(<span class="type">const</span> CStudent &amp;stu1, <span class="type">const</span> CStudent &amp;stu2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (stu1.m_iID &lt; stu2.m_iID);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;CStudent, StuFunctor&gt; setStu;</span><br><span class="line">    setStu.<span class="built_in">insert</span>(<span class="built_in">CStudent</span>(<span class="number">3</span>,<span class="string">&quot;小张&quot;</span>));</span><br><span class="line">    setStu.<span class="built_in">insert</span>(<span class="built_in">CStudent</span>(<span class="number">1</span>,<span class="string">&quot;小李&quot;</span>));</span><br><span class="line">    setStu.<span class="built_in">insert</span>(<span class="built_in">CStudent</span>(<span class="number">5</span>,<span class="string">&quot;小王&quot;</span>));</span><br><span class="line">    setStu.<span class="built_in">insert</span>(<span class="built_in">CStudent</span>(<span class="number">2</span>,<span class="string">&quot;小刘&quot;</span>));</span><br><span class="line">    <span class="comment">//此时容器setStu包含了四个学生对象，分别是按姓名顺序的“小李”，“小刘”，“小张”，“小王” </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、set对象的拷贝构造与赋值"><a href="#6、set对象的拷贝构造与赋值" class="headerlink" title="6、set对象的拷贝构造与赋值"></a>6、set对象的拷贝构造与赋值</h2><ul><li><strong>set(const set &amp;st);</strong>        &#x2F;&#x2F;拷贝构造函数</li><li><strong>set&amp; operator&#x3D;(const set &amp;st);</strong>&#x2F;&#x2F;重载等号操作符</li><li><strong>set.swap(st);</strong>     &#x2F;&#x2F;交换两个集合容器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; setIntA;</span><br><span class="line">setIntA.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">setIntA.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">setIntA.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">setIntA.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">setIntA.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">setIntB</span><span class="params">(setIntA)</span></span>;  <span class="comment">//1 3 5 7 9</span></span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt; setIntC;</span><br><span class="line">setIntC = setIntA;    <span class="comment">//1 3 5 7 9</span></span><br><span class="line"></span><br><span class="line">setIntC.<span class="built_in">insert</span>(<span class="number">6</span>);</span><br><span class="line">setIntC.<span class="built_in">swap</span>(setIntA);    <span class="comment">//交换</span></span><br></pre></td></tr></table></figure><h2 id="7、set的大小"><a href="#7、set的大小" class="headerlink" title="7、set的大小"></a>7、set的大小</h2><ul><li><strong>set.size();</strong>&#x2F;&#x2F;返回容器中元素的数目</li><li><strong>set.empty();</strong>  &#x2F;&#x2F;判断容器是否为空</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; setIntA;</span><br><span class="line">setIntA.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">setIntA.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">setIntA.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">setIntA.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">setIntA.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!setIntA.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iSize = setIntA.<span class="built_in">size</span>();<span class="comment">//5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、set的删除"><a href="#8、set的删除" class="headerlink" title="8、set的删除"></a>8、set的删除</h2><ul><li><strong>set.clear();</strong>&#x2F;&#x2F;清除所有元素</li><li><strong>set.erase(pos);</strong>&#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><strong>set.erase(beg,end);</strong>   &#x2F;&#x2F;删除区间[beg,end)的所有元素，返回下一个元素的迭代器。</li><li><strong>set.erase(elem);</strong>      &#x2F;&#x2F;删除容器中值为elem的元素。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除区间内的元素</span></span><br><span class="line">setInt是用set&lt;<span class="type">int</span>&gt;声明的容器，现已包含按顺序的<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>元素。</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator itBegin = setInt.<span class="built_in">begin</span>();</span><br><span class="line">++ itBegin;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator itEnd = setInt.<span class="built_in">begin</span>();</span><br><span class="line">++ itEnd;</span><br><span class="line">++ itEnd;</span><br><span class="line">++ itEnd;</span><br><span class="line">setInt.<span class="built_in">erase</span>(itBegin, itEnd);</span><br><span class="line"><span class="comment">//此时容器setInt包含按顺序的1,6,9,11四个元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除容器中第一个元素</span></span><br><span class="line">setInt.<span class="built_in">erase</span>(setInt.<span class="built_in">begin</span>());<span class="comment">//6,9,11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除容器中值为9的元素</span></span><br><span class="line">set.<span class="built_in">erase</span>(<span class="number">9</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">//删除setInt的所有元素</span></span><br><span class="line">setInt.<span class="built_in">clear</span>();            <span class="comment">//容器为空</span></span><br></pre></td></tr></table></figure><h2 id="9、set的查找"><a href="#9、set的查找" class="headerlink" title="9、set的查找"></a>9、set的查找</h2><ul><li><strong>set.find(elem);</strong>    &#x2F;&#x2F;查找elem元素，返回指向elem元素的迭代器。</li><li><strong>set.count(elem);</strong>   &#x2F;&#x2F;返回容器中值为elem的元素个数。对set来说，要么是0，要么是1。对multiset来说，值可能大于1。</li><li><strong>set.lower_bound(elem);</strong>  &#x2F;&#x2F;返回第一个&gt;&#x3D;elem元素的迭代器。</li><li><strong>set.upper_bound(elem);</strong>  &#x2F;&#x2F; 返回第一个&gt;elem元素的迭代器。</li><li><strong>set.equal_range(elem);</strong>  &#x2F;&#x2F;返回容器中与elem相等的上下限的两个迭代器。上限是闭区间，下限是开区间，如[beg,end)。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; setInt;</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">setInt.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator itA = setInt.<span class="built_in">find</span>(<span class="number">5</span>);</span><br><span class="line"><span class="type">int</span> iA = *itA;            <span class="comment">//iA == 5</span></span><br><span class="line"><span class="type">int</span> iCount = setInt.<span class="built_in">count</span>(<span class="number">5</span>);<span class="comment">//iCount == 1</span></span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator itB = setInt.<span class="built_in">lower_bound</span>(<span class="number">5</span>);</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator itC = setInt.<span class="built_in">upper_bound</span>(<span class="number">5</span>);</span><br><span class="line"><span class="type">int</span> iB = *itB;                <span class="comment">//iB == 5</span></span><br><span class="line"><span class="type">int</span> iC = *itC;                  <span class="comment">//iC == 7</span></span><br><span class="line"></span><br><span class="line">pair&lt; set&lt;<span class="type">int</span>&gt;::iterator, set&lt;<span class="type">int</span>&gt;::iterator &gt; pairIt = setInt.<span class="built_in">equal_range</span>(<span class="number">5</span>);  <span class="comment">//pair是什么？</span></span><br></pre></td></tr></table></figure><p>以上函数返回两个迭代器，而这两个迭代器被封装在pair中。<br>以下讲解pair的含义与使用方法。</p><h2 id="10、pair的使用"><a href="#10、pair的使用" class="headerlink" title="10、pair的使用"></a>10、pair的使用</h2><ul><li>pair译为对组，可以将两个值视为一个单元。</li><li>pair&lt;T1,T2&gt;存放的两个值的类型，可以不一样，如T1为int，T2为float。T1,T2也可以是自定义类型。</li><li><strong>pair.first是pair里面的第一个值，是T1类型。</strong></li><li><strong>pair.second是pair里面的第二个值，是T2类型。</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; setInt;</span><br><span class="line">...  <span class="comment">//往setInt容器插入元素1,3,5,7,9</span></span><br><span class="line">pair&lt; set&lt;<span class="type">int</span>&gt;::iterator , set&lt;<span class="type">int</span>&gt;::iterator &gt; pairIt = setInt.<span class="built_in">equal_range</span>(<span class="number">5</span>);</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator itBeg = pairIt.first;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator itEnd = pairIt.second;</span><br><span class="line"><span class="comment">//此时 *itBeg==5  而  *itEnd == 7</span></span><br></pre></td></tr></table></figure><h2 id="11、小结"><a href="#11、小结" class="headerlink" title="11、小结"></a>11、小结</h2><ol><li>容器set&#x2F;multiset的使用方法；<br>红黑树的变体，查找效率高，插入不能指定位置，插入时自动排序。</li><li>functor的使用方法；<br>类似于函数的功能，可用来自定义一些规则，如元素比较规则。</li><li>pair的使用方法。<br>对组，一个整体的单元，存放两个类型(T1,T2，T1可与T2一样)的两个元素。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例:</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>,&amp;x);</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; h;    <span class="comment">//建立一个multiset类型，变量名是h，h序列里面存的是int类型,初始h为空</span></span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">    h.<span class="built_in">insert</span>(x);    <span class="comment">//将x插入h中</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>,&amp;x);</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">pair&lt; multiset&lt;<span class="type">int</span>&gt;::iterator , multiset&lt;<span class="type">int</span>&gt;::iterator &gt; pairIt = h.<span class="built_in">equal_range</span>(<span class="number">22</span>);</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt;::iterator itBeg = pairIt.first;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt;::iterator itEnd = pairIt.second;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nBeg = *itBeg;</span><br><span class="line"><span class="type">int</span> nEnd = *itEnd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!h.<span class="built_in">empty</span>())&#123;      <span class="comment">// 序列非空h.empty()==true时表示h已经空了</span></span><br><span class="line">    multiset&lt;<span class="type">int</span>&gt;::iterator c = h.<span class="built_in">begin</span>();  <span class="comment">//c指向h序列中第一个元素的地址，第一个元素是最小的元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%ld &quot;</span>,*c);  <span class="comment">//将地址c存的数据输出</span></span><br><span class="line">    h.<span class="built_in">erase</span>(c);         <span class="comment">//从h序列中将c指向的元素删除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-Set和multiset&quot;&gt;&lt;a href=&quot;#STL容器-Set和multiset&quot; class=&quot;headerlink&quot; title=&quot;STL容器-Set和multiset&quot;&gt;&lt;/a&gt;STL容器-Set和multiset&lt;/h1&gt;&lt;h2 id=&quot;1、set-x2F-multiset的简介&quot;&gt;&lt;a href=&quot;#1、set-x2F-multiset的简介&quot; class=&quot;headerlink&quot; title=&quot;1、set&amp;#x2F;multiset的简介&quot;&gt;&lt;/a&gt;1、set&amp;#x2F;multiset的简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;set是一个&lt;strong&gt;集合&lt;/strong&gt;容器，其中所包含的元素是唯一的，&lt;strong&gt;集合中的元素按一定的顺序排列&lt;/strong&gt;。元素插入过程是按排序规则插入，所以不能指定插入位置。&lt;/li&gt;
&lt;li&gt;set采用红黑树变体的数据结构实现，红黑树属于平衡二叉树。在插入操作和删除操作上比vector快。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL容器-List</title>
    <link href="http://example.com/2022/09/05/STL%E5%AE%B9%E5%99%A8-List/"/>
    <id>http://example.com/2022/09/05/STL%E5%AE%B9%E5%99%A8-List/</id>
    <published>2022-09-05T02:38:07.000Z</published>
    <updated>2022-09-06T03:37:08.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-List"><a href="#STL容器-List" class="headerlink" title="STL容器-List"></a>STL容器-List</h1><h2 id="1、List容器简介"><a href="#1、List容器简介" class="headerlink" title="1、List容器简介"></a>1、List容器简介</h2><ul><li>list是一个双向链表容器，可高效地进行插入删除元素。</li><li>list不可以随机存取元素，所以不支持at.(pos)函数与[]操作符。It++(ok) it+5(err)</li><li><code>#include &lt;list&gt; </code><span id="more"></span></li></ul><h2 id="2、list对象的默认构造"><a href="#2、list对象的默认构造" class="headerlink" title="2、list对象的默认构造"></a>2、list对象的默认构造</h2><p>list采用采用模板类实现,对象的默认构造形式：**<code>list&lt;T&gt; lstT;</code>**</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lstInt;           <span class="comment">//定义一个存放int的list容器。</span></span><br><span class="line">list&lt;<span class="type">float</span>&gt; lstFloat;       <span class="comment">//定义一个存放float的list容器。</span></span><br><span class="line">list&lt;string&gt; lstString;     <span class="comment">//定义一个存放string的list容器。</span></span><br><span class="line">...    </span><br><span class="line"><span class="comment">//尖括号内还可以设置指针类型或自定义类型。</span></span><br></pre></td></tr></table></figure><h2 id="3、list头尾的添加移除操作"><a href="#3、list头尾的添加移除操作" class="headerlink" title="3、list头尾的添加移除操作"></a>3、list头尾的添加移除操作</h2><ul><li><strong>list.push_back(elem);</strong>   &#x2F;&#x2F;在容器尾部加入一个元素</li><li><strong>list.pop_back();</strong>         &#x2F;&#x2F;删除容器中最后一个元素</li><li><strong>list.push_front(elem);</strong>   &#x2F;&#x2F;在容器开头插入一个元素</li><li><strong>list.pop_front();</strong>        &#x2F;&#x2F;从容器开头移除第一个元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lstInt;</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">lstInt.<span class="built_in">pop_front</span>();</span><br><span class="line">lstInt.<span class="built_in">pop_front</span>();</span><br><span class="line">lstInt.<span class="built_in">push_front</span>(<span class="number">11</span>);</span><br><span class="line">lstInt.<span class="built_in">push_front</span>(<span class="number">13</span>);</span><br><span class="line">lstInt.<span class="built_in">pop_back</span>();</span><br><span class="line">lstInt.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">// lstInt    &#123;13,11,5&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4、list的数据存取"><a href="#4、list的数据存取" class="headerlink" title="4、list的数据存取"></a>4、list的数据存取</h2><ul><li><strong>list.front();</strong>   &#x2F;&#x2F;返回第一个元素。</li><li><strong>list.back();</strong>    &#x2F;&#x2F;返回最后一个元素。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lstInt;</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iFront = lstInt.<span class="built_in">front</span>();<span class="comment">//1</span></span><br><span class="line"><span class="type">int</span> iBack = lstInt.<span class="built_in">back</span>();<span class="comment">//9</span></span><br><span class="line">lstInt.<span class="built_in">front</span>() = <span class="number">11</span>;<span class="comment">//11</span></span><br><span class="line">lstInt.<span class="built_in">back</span>() = <span class="number">19</span>;    <span class="comment">//19</span></span><br></pre></td></tr></table></figure><h2 id="5、list与迭代器"><a href="#5、list与迭代器" class="headerlink" title="5、list与迭代器"></a>5、list与迭代器</h2><ul><li><strong>list.begin();</strong>     &#x2F;&#x2F;返回容器中第一个元素的迭代器。</li><li><strong>list.end();</strong>       &#x2F;&#x2F;返回容器中最后一个元素之后的迭代器。</li><li><strong>list.rbegin();</strong>    &#x2F;&#x2F;返回容器中倒数第一个元素的迭代器。</li><li><strong>list.rend();</strong>      &#x2F;&#x2F;返回容器中倒数最后一个元素的后面的迭代器。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lstInt;</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">lstInt.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (list&lt;<span class="type">int</span>&gt;::iterator it=lstInt.<span class="built_in">begin</span>(); it!=lstInt.<span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; *it;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (list&lt;<span class="type">int</span>&gt;::reverse_iterator rit=lstInt.<span class="built_in">rbegin</span>(); rit!=lstInt.<span class="built_in">rend</span>(); ++rit)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; *rit;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、list对象的带参数构造"><a href="#6、list对象的带参数构造" class="headerlink" title="6、list对象的带参数构造"></a>6、list对象的带参数构造</h2><ul><li><strong>list(beg,end);</strong>    &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。注意该区间是左闭右开的区间。</li><li><strong>list(n,elem);</strong>     &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><strong>list(const list &amp;lst);</strong>  &#x2F;&#x2F;拷贝构造函数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lstIntA;</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">lstIntB</span><span class="params">(lstIntA.begin(),lstIntA.end())</span></span>;   <span class="comment">//1 3 5 7 9</span></span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">lstIntC</span><span class="params">(<span class="number">5</span>,<span class="number">8</span>)</span></span>;    <span class="comment">//8 8 8 8 8 </span></span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">lstIntD</span><span class="params">(lstIntA)</span></span>;    <span class="comment">//1 3 5 7 9</span></span><br></pre></td></tr></table></figure><h2 id="7、list的赋值"><a href="#7、list的赋值" class="headerlink" title="7、list的赋值"></a>7、list的赋值</h2><ul><li><strong>list.assign(beg,end);</strong>     &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。注意该区间是左闭右开的区间。</li><li><strong>list.assign(n,elem);</strong>      &#x2F;&#x2F;将n个elem拷贝赋值给本身。</li><li><strong>list&amp; operator&#x3D;(const list &amp;lst);</strong>&#x2F;&#x2F;重载等号操作符</li><li><strong>list.swap(lst);</strong>           &#x2F;&#x2F; 将lst与本身的元素互换。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lstIntA,lstIntB,lstIntC,lstIntD;</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">lstIntB.<span class="built_in">assign</span>(lstIntA.<span class="built_in">begin</span>(),lstIntA.<span class="built_in">end</span>());<span class="comment">//1 3 5 7 9</span></span><br><span class="line">lstIntC.<span class="built_in">assign</span>(<span class="number">5</span>,<span class="number">8</span>);<span class="comment">//8 8 8 8 8</span></span><br><span class="line">lstIntD = lstIntA;    <span class="comment">//1 3 5 7 9</span></span><br><span class="line">lstIntC.<span class="built_in">swap</span>(lstIntD);    <span class="comment">//互换</span></span><br></pre></td></tr></table></figure><h2 id="8、list的大小"><a href="#8、list的大小" class="headerlink" title="8、list的大小"></a>8、list的大小</h2><ul><li><strong>list.size();</strong>   &#x2F;&#x2F;返回容器中元素的个数</li><li><strong>list.empty();</strong>   &#x2F;&#x2F;判断容器是否为空</li><li><strong>list.resize(num);</strong>   &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li><li><strong>list.resize(num, elem);</strong>  &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lstIntA;</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">lstIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!lstIntA.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iSize = lstIntA.<span class="built_in">size</span>();<span class="comment">//3</span></span><br><span class="line">    lstIntA.<span class="built_in">resize</span>(<span class="number">5</span>);    <span class="comment">//1 3 5 0 0</span></span><br><span class="line">    lstIntA.<span class="built_in">resize</span>(<span class="number">7</span>,<span class="number">1</span>);<span class="comment">//1 3 5 0 0 1 1</span></span><br><span class="line">    lstIntA.<span class="built_in">resize</span>(<span class="number">2</span>);    <span class="comment">//1 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、list的插入"><a href="#8、list的插入" class="headerlink" title="8、list的插入"></a>8、list的插入</h2><ul><li><strong>list.insert(pos,elem);</strong>     &#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。</li><li><strong>list.insert(pos,n,elem);</strong>   &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</li><li><strong>list.insert(pos,beg,end);</strong>  &#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lstA;</span><br><span class="line">list&lt;<span class="type">int</span>&gt; lstB;</span><br><span class="line"></span><br><span class="line">lstA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">lstA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">lstA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">lstA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">lstA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">lstB.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">lstB.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">lstB.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">lstB.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">lstA.<span class="built_in">insert</span>(lstA.<span class="built_in">begin</span>(), <span class="number">11</span>);<span class="comment">//&#123;11, 1, 3, 5, 7, 9&#125;</span></span><br><span class="line">lstA.<span class="built_in">insert</span>(++lstA.<span class="built_in">begin</span>(),<span class="number">2</span>,<span class="number">33</span>);<span class="comment">//&#123;11,33,33,1,3,5,7,9&#125;</span></span><br><span class="line">lstA.<span class="built_in">insert</span>(lstA.<span class="built_in">begin</span>() , lstB.<span class="built_in">begin</span>() , lstB.<span class="built_in">end</span>() );<span class="comment">//&#123;2,4,6,8,11,33,33,1,3,5,7,9&#125;</span></span><br></pre></td></tr></table></figure><h2 id="9、list的删除"><a href="#9、list的删除" class="headerlink" title="9、list的删除"></a>9、list的删除</h2><ul><li><strong>list.clear();</strong>    &#x2F;&#x2F;移除容器的所有数据</li><li><strong>list.erase(beg,end);</strong>  &#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</li><li><strong>list.erase(pos);</strong>      &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</li><li><strong>list.remove(elem);</strong>    &#x2F;&#x2F;删除容器中所有与elem值匹配的元素。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除区间内的元素</span></span><br><span class="line"><span class="comment">//lstInt是用list&lt;int&gt;声明的容器，现已包含按顺序的1,3,5,6,9元素。</span></span><br><span class="line">list&lt;<span class="type">int</span>&gt;::iterator itBegin=lstInt.<span class="built_in">begin</span>();</span><br><span class="line">++ itBegin;</span><br><span class="line">list&lt;<span class="type">int</span>&gt;::iterator itEnd=lstInt.<span class="built_in">begin</span>();</span><br><span class="line">++ itEnd;</span><br><span class="line">++ itEnd;</span><br><span class="line">++ itEnd;</span><br><span class="line">lstInt.<span class="built_in">erase</span>(itBegin,itEnd);</span><br><span class="line"><span class="comment">//此时容器lstInt包含按顺序的1,6,9三个元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//假设 lstInt 包含1,3,2,3,3,3,4,3,5,3，删除容器中等于3的元素的方法一</span></span><br><span class="line"><span class="keyword">for</span>(list&lt;<span class="type">int</span>&gt;::iterator it=lstInt.<span class="built_in">being</span>(); it!=lstInt.<span class="built_in">end</span>(); )    <span class="comment">//小括号里不需写  ++it</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(*it == <span class="number">3</span>)</span><br><span class="line">   &#123;</span><br><span class="line">        it  =  lstInt.<span class="built_in">erase</span>(it);       <span class="comment">//以迭代器为参数，删除元素3，并把数据删除后的下一个元素位置返回给迭代器。</span></span><br><span class="line">        <span class="comment">//此时，不执行  ++it；  </span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       ++it;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除容器中等于3的元素的方法二</span></span><br><span class="line">lstInt.<span class="built_in">remove</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除lstInt的所有元素</span></span><br><span class="line">lstInt.<span class="built_in">clear</span>();<span class="comment">//容器为空</span></span><br></pre></td></tr></table></figure><h2 id="10、list的反序排列"><a href="#10、list的反序排列" class="headerlink" title="10、list的反序排列"></a>10、list的反序排列</h2><ul><li><strong>lst.reverse();</strong>     &#x2F;&#x2F;反转链表，比如lst包含1,3,5元素，运行此方法后，lst就包含5,3,1元素。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lstA;</span><br><span class="line"></span><br><span class="line">lstA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">lstA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">lstA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">lstA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">lstA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">lstA.<span class="built_in">reverse</span>();<span class="comment">//9 7 5 3 1</span></span><br></pre></td></tr></table></figure><h2 id="11、小结"><a href="#11、小结" class="headerlink" title="11、小结"></a>11、小结</h2><ol><li>容器deque的使用方法<br> 适合在头尾添加移除元素。使用方法与vector类似。</li><li>容器queue,stack的使用方法<br> 适合队列，堆栈的操作方式。</li><li>容器list的使用方法<br> 适合在任意位置快速插入移除元素</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-List&quot;&gt;&lt;a href=&quot;#STL容器-List&quot; class=&quot;headerlink&quot; title=&quot;STL容器-List&quot;&gt;&lt;/a&gt;STL容器-List&lt;/h1&gt;&lt;h2 id=&quot;1、List容器简介&quot;&gt;&lt;a href=&quot;#1、List容器简介&quot; class=&quot;headerlink&quot; title=&quot;1、List容器简介&quot;&gt;&lt;/a&gt;1、List容器简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;list是一个双向链表容器，可高效地进行插入删除元素。&lt;/li&gt;
&lt;li&gt;list不可以随机存取元素，所以不支持at.(pos)函数与[]操作符。It++(ok) it+5(err)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;list&amp;gt; &lt;/code&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL容器-Queue</title>
    <link href="http://example.com/2022/09/05/STL%E5%AE%B9%E5%99%A8-Queue/"/>
    <id>http://example.com/2022/09/05/STL%E5%AE%B9%E5%99%A8-Queue/</id>
    <published>2022-09-05T02:27:45.000Z</published>
    <updated>2022-09-06T03:36:51.892Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-Queue"><a href="#STL容器-Queue" class="headerlink" title="STL容器-Queue"></a>STL容器-Queue</h1><h2 id="1、Queue容器简介"><a href="#1、Queue容器简介" class="headerlink" title="1、Queue容器简介"></a>1、Queue容器简介</h2><ul><li>queue是队列容器，是一种“先进先出”的容器。</li><li>queue是简单地装饰deque容器而成为另外的一种容器。</li><li><code>#include &lt;queue&gt;</code>  <span id="more"></span></li></ul><h2 id="2、queue对象的默认构造"><a href="#2、queue对象的默认构造" class="headerlink" title="2、queue对象的默认构造"></a>2、queue对象的默认构造</h2><p>queue采用模板类实现，queue对象的默认构造形式：**<code>queue&lt;T&gt; queT;</code>**</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; queInt;            <span class="comment">//一个存放int的queue容器。</span></span><br><span class="line">queue&lt;<span class="type">float</span>&gt; queFloat;        <span class="comment">//一个存放float的queue容器。</span></span><br><span class="line">queue&lt;string&gt; queString;      <span class="comment">//一个存放string的queue容器。</span></span><br><span class="line">...    </span><br><span class="line"><span class="comment">//尖括号内还可以设置指针类型或自定义类型。</span></span><br></pre></td></tr></table></figure><h2 id="3、queue的push-与pop-方法"><a href="#3、queue的push-与pop-方法" class="headerlink" title="3、queue的push()与pop()方法"></a>3、queue的push()与pop()方法</h2><ul><li><strong>queue.push(elem);</strong>   &#x2F;&#x2F;往队尾添加元素</li><li><strong>queue.pop();</strong>        &#x2F;&#x2F;从队头移除第一个元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; queInt;</span><br><span class="line">queInt.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">queInt.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">queInt.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">queInt.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">queInt.<span class="built_in">push</span>(<span class="number">9</span>);</span><br><span class="line">queInt.<span class="built_in">pop</span>();</span><br><span class="line">queInt.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//此时queInt存放的元素是5,7,9</span></span><br></pre></td></tr></table></figure><h2 id="4、queue对象的拷贝构造与赋值"><a href="#4、queue对象的拷贝构造与赋值" class="headerlink" title="4、queue对象的拷贝构造与赋值"></a>4、queue对象的拷贝构造与赋值</h2><ul><li><strong>queue(const queue &amp;que);</strong>        &#x2F;&#x2F;拷贝构造函数</li><li><strong>queue&amp; operator&#x3D;(const queue &amp;que);</strong>&#x2F;&#x2F;重载等号操作符</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; queIntA;</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">queue&lt;<span class="type">int</span>&gt; <span class="title">queIntB</span><span class="params">(queIntA)</span></span>;<span class="comment">//拷贝构造</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; queIntC;</span><br><span class="line">queIntC = queIntA;<span class="comment">//赋值</span></span><br></pre></td></tr></table></figure><h2 id="5、queue的数据存取"><a href="#5、queue的数据存取" class="headerlink" title="5、queue的数据存取"></a>5、queue的数据存取</h2><ul><li><strong>queue.back();</strong>    &#x2F;&#x2F;返回最后一个元素</li><li><strong>queue.front();</strong>   &#x2F;&#x2F;返回第一个元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; queIntA;</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iFront = queIntA.<span class="built_in">front</span>();<span class="comment">//1</span></span><br><span class="line"><span class="type">int</span> iBack = queIntA.<span class="built_in">back</span>();<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">queIntA.<span class="built_in">front</span>() = <span class="number">11</span>;<span class="comment">//11</span></span><br><span class="line">queIntA.<span class="built_in">back</span>() = <span class="number">19</span>;<span class="comment">//19</span></span><br></pre></td></tr></table></figure><h2 id="6、queue的大小"><a href="#6、queue的大小" class="headerlink" title="6、queue的大小"></a>6、queue的大小</h2><ul><li><strong>queue.empty();</strong>    &#x2F;&#x2F;判断队列是否为空</li><li><strong>queue.size();</strong>     &#x2F;&#x2F;返回队列的大小</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; queIntA; </span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">1</span>);   </span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">3</span>);  </span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">queIntA.<span class="built_in">push</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!queIntA.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iSize = queIntA.<span class="built_in">size</span>();<span class="comment">//5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、优先级队列priority-queue"><a href="#7、优先级队列priority-queue" class="headerlink" title="7、优先级队列priority_queue"></a>7、优先级队列priority_queue</h2><ul><li>最大值优先级队列、最小值优先级队列</li><li>优先级队列适配器 STL priority_queue</li><li>用来开发一些特殊的应用,请对stl的类库,多做扩展性学习<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>, deque&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">pq.<span class="built_in">empty</span>()</span><br><span class="line">pq.<span class="built_in">size</span>()</span><br><span class="line">pq.<span class="built_in">top</span>()</span><br><span class="line">pq.<span class="built_in">pop</span>()</span><br><span class="line">pq.<span class="built_in">push</span>(item)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue&quot;</span> </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main81</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; p1; <span class="comment">//默认是 最大值优先级队列 </span></span><br><span class="line"><span class="comment">//priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt; &gt; p1; //相当于这样写</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; p2; <span class="comment">//最小值优先级队列</span></span><br><span class="line"></span><br><span class="line">p1.<span class="built_in">push</span>(<span class="number">33</span>);</span><br><span class="line">p1.<span class="built_in">push</span>(<span class="number">11</span>);</span><br><span class="line">p1.<span class="built_in">push</span>(<span class="number">55</span>);</span><br><span class="line">p1.<span class="built_in">push</span>(<span class="number">22</span>);</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;队列大小&quot;</span> &lt;&lt; p1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;队头&quot;</span> &lt;&lt; p1.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p1.<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p1.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">p1.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;测试 最小值优先级队列&quot;</span> &lt;&lt; endl;</span><br><span class="line">p2.<span class="built_in">push</span>(<span class="number">33</span>);</span><br><span class="line">p2.<span class="built_in">push</span>(<span class="number">11</span>);</span><br><span class="line">p2.<span class="built_in">push</span>(<span class="number">55</span>);</span><br><span class="line">p2.<span class="built_in">push</span>(<span class="number">22</span>);</span><br><span class="line"><span class="keyword">while</span> (p2.<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p2.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">p2.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-Queue&quot;&gt;&lt;a href=&quot;#STL容器-Queue&quot; class=&quot;headerlink&quot; title=&quot;STL容器-Queue&quot;&gt;&lt;/a&gt;STL容器-Queue&lt;/h1&gt;&lt;h2 id=&quot;1、Queue容器简介&quot;&gt;&lt;a href=&quot;#1、Queue容器简介&quot; class=&quot;headerlink&quot; title=&quot;1、Queue容器简介&quot;&gt;&lt;/a&gt;1、Queue容器简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;queue是队列容器，是一种“先进先出”的容器。&lt;/li&gt;
&lt;li&gt;queue是简单地装饰deque容器而成为另外的一种容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;queue&amp;gt;&lt;/code&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL容器-Stack</title>
    <link href="http://example.com/2022/09/05/STL%E5%AE%B9%E5%99%A8-Stack/"/>
    <id>http://example.com/2022/09/05/STL%E5%AE%B9%E5%99%A8-Stack/</id>
    <published>2022-09-05T01:55:59.000Z</published>
    <updated>2022-09-06T03:35:54.706Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-Stack"><a href="#STL容器-Stack" class="headerlink" title="STL容器-Stack"></a>STL容器-Stack</h1><h2 id="1、Stack容器简介"><a href="#1、Stack容器简介" class="headerlink" title="1、Stack容器简介"></a>1、Stack容器简介</h2><p>Stack简介</p><ul><li>stack是堆栈容器，是一种“先进后出”的容器。</li><li>stack是简单地装饰deque容器而成为另外的一种容器。</li><li><code>#include &lt;stack&gt;</code><span id="more"></span></li></ul><h2 id="2、stack对象的默认构造"><a href="#2、stack对象的默认构造" class="headerlink" title="2、stack对象的默认构造"></a>2、stack对象的默认构造</h2><p>stack采用模板类实现，stack对象的默认构造形式： <strong><code>stack &lt;T&gt; stkT;</code></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stack &lt;<span class="type">int</span>&gt; stkInt;         <span class="comment">//一个存放int的stack容器。</span></span><br><span class="line">stack &lt;<span class="type">float</span>&gt; stkFloat;     <span class="comment">//一个存放float的stack容器。</span></span><br><span class="line">stack &lt;string&gt; stkString;   <span class="comment">//一个存放string的stack容器。</span></span><br><span class="line">...    </span><br><span class="line"><span class="comment">//尖括号内还可以设置指针类型或自定义类型。</span></span><br></pre></td></tr></table></figure><h2 id="3、stack的push-与pop-方法"><a href="#3、stack的push-与pop-方法" class="headerlink" title="3、stack的push()与pop()方法"></a>3、stack的push()与pop()方法</h2><ul><li><strong>stack.push(elem);</strong>   &#x2F;&#x2F;往栈头添加元素</li><li><strong>stack.pop();</strong>        &#x2F;&#x2F;从栈头移除第一个元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; stkInt;</span><br><span class="line">stkInt.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">stkInt.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">stkInt.<span class="built_in">pop</span>();</span><br><span class="line">stkInt.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">stkInt.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">stkInt.<span class="built_in">push</span>(<span class="number">9</span>);</span><br><span class="line">stkInt.<span class="built_in">pop</span>();</span><br><span class="line">stkInt.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//此时stkInt存放的元素是1,5  </span></span><br></pre></td></tr></table></figure><h2 id="4、stack对象的拷贝构造与赋值"><a href="#4、stack对象的拷贝构造与赋值" class="headerlink" title="4、stack对象的拷贝构造与赋值"></a>4、stack对象的拷贝构造与赋值</h2><ul><li><strong>stack(const stack &amp;stk);</strong>        &#x2F;&#x2F;拷贝构造函数</li><li><strong>stack&amp; operator&#x3D;(const stack &amp;stk);</strong> &#x2F;&#x2F;重载等号操作符</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; stkIntA;</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">stack&lt;<span class="type">int</span>&gt; <span class="title">stkIntB</span><span class="params">(stkIntA)</span></span>;<span class="comment">//拷贝构造</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; stkIntC;</span><br><span class="line">stkIntC = stkIntA;<span class="comment">//赋值</span></span><br></pre></td></tr></table></figure><h2 id="5、stack的数据存取"><a href="#5、stack的数据存取" class="headerlink" title="5、stack的数据存取"></a>5、stack的数据存取</h2><ul><li><strong>stack.top();</strong>  &#x2F;&#x2F;返回最后一个压入栈元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; stkIntA;</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iTop = stkIntA.<span class="built_in">top</span>();<span class="comment">//9</span></span><br><span class="line">stkIntA.<span class="built_in">top</span>() = <span class="number">19</span>;<span class="comment">//19</span></span><br></pre></td></tr></table></figure><h2 id="6、stack的大小"><a href="#6、stack的大小" class="headerlink" title="6、stack的大小"></a>6、stack的大小</h2><ul><li><strong>stack.empty();</strong>       &#x2F;&#x2F;判断堆栈是否为空</li><li><strong>stack.size();</strong>    &#x2F;&#x2F;返回堆栈的大小</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; stkIntA;</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line">stkIntA.<span class="built_in">push</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!stkIntA.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iSize = stkIntA.<span class="built_in">size</span>();<span class="comment">//5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-Stack&quot;&gt;&lt;a href=&quot;#STL容器-Stack&quot; class=&quot;headerlink&quot; title=&quot;STL容器-Stack&quot;&gt;&lt;/a&gt;STL容器-Stack&lt;/h1&gt;&lt;h2 id=&quot;1、Stack容器简介&quot;&gt;&lt;a href=&quot;#1、Stack容器简介&quot; class=&quot;headerlink&quot; title=&quot;1、Stack容器简介&quot;&gt;&lt;/a&gt;1、Stack容器简介&lt;/h2&gt;&lt;p&gt;Stack简介&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack是堆栈容器，是一种“先进后出”的容器。&lt;/li&gt;
&lt;li&gt;stack是简单地装饰deque容器而成为另外的一种容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;stack&amp;gt;&lt;/code&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++标准库</title>
    <link href="http://example.com/2022/09/03/C-%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <id>http://example.com/2022/09/03/C-%E6%A0%87%E5%87%86%E5%BA%93/</id>
    <published>2022-09-03T01:07:10.000Z</published>
    <updated>2022-09-03T03:09:36.611Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C-标准库"><a href="#C-标准库" class="headerlink" title="C++标准库"></a>C++标准库</h1><p>C++强大的功能来源于其丰富的类库及库函数资源。C++标准库的内容总共在50个标准头文件中定义。在C++开发中，要尽可能地利用标准库完成。<span id="more"></span>这样做的直接好处包括：</p><ol><li>成本：已经作为标准提供，何苦再花费时间、人力重新开发呢；  </li><li>质量：标准库的都是经过严格测试的，正确性有保证；</li><li>效率：关于人的效率已经体现在成本中了，关于代码的执行效率要相信实现标准库的大牛们的水平；</li><li>良好的编程风格：采用行业中普遍的做法进行开发。</li></ol><p>在C++程序设计课程中，尤其是作为第一门程序设计课程，我们注重了语法、语言的机制等方面的内容。程序设计能力的培养有个过程，跨过基本的原 理性知识直接进入到工程中的普遍做法，由于跨度决定了其难度。再者，在掌握了基本原理的基础上，在认识标准库的问题上完全可以凭借实践，逐步地掌握。标准库的学习不需要认认真真地读书，需要的是在了解概貌的情况下，在实践中深入。<br>这个任务就是要知道C++程序设计课程中不讲的，但对程序设计又很重要的这部分内容。至少我们要能先回答出“有什么”的问题。</p><p>C++标准库的内容分为10类，分别是（建议在阅读中，将你已经用过或听说过的头文件划出来）：</p><p>C1. 标准库中与语言支持功能相关的头文件</p><table><thead><tr><th align="left">头文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;cstddef&gt;</code></td><td align="left">定义宏NULL和offsetof，以及其他标准类型size_t和ptrdiff_t。与对应的标准C头文件的区别是，NULL是C++空指针常量的补充定义，宏offsetof接受结构或者联合类型参数，只要他们没有成员指针类型的非静态成员即可。</td></tr><tr><td align="left"><code>&lt;limits&gt;</code></td><td align="left">提供与基本数据类型相关的定义。例如，对于每个数值数据类型，它定义了可以表示出来的最大值和最小值以及二进制数字的位数。</td></tr><tr><td align="left"><code>&lt;climits&gt;</code></td><td align="left">提供与基本整数数据类型相关的C样式定义。这些信息的C++样式定义在<code>&lt;limits&gt;</code>中</td></tr><tr><td align="left"><code>&lt;cfloat&gt;</code></td><td align="left">提供与基本浮点型数据类型相关的C样式定义。这些信息的C++样式定义在<code>&lt;limits&gt;</code>中</td></tr><tr><td align="left"><code>&lt;cstdlib&gt;</code></td><td align="left">提供支持程序启动和终止的宏和函数。这个头文件还声明了许多其他杂项函数，例如搜索和排序函数，从字符串转换为数值等函数。它与对应的标准C头文件 stdlib.h不同，定义了abort(void)。abort()函数还有额外的功能，它不为静态或自动对象调用析构函数，也不调用传给 atexit()函数的函数。它还定义了exit()函数的额外功能，可以释放静态对象，以注册的逆序调用用atexit()注册的函数。清除并关闭所有 打开的C流，把控制权返回给主机环境。</td></tr><tr><td align="left"><code>&lt;new&gt;</code></td><td align="left">支持动态内存分配</td></tr><tr><td align="left"><code>&lt;typeinfo&gt;</code></td><td align="left">支持变量在运行期间的类型标识</td></tr><tr><td align="left"><code>&lt;exception&gt;</code></td><td align="left">支持异常处理，这是处理程序中可能发生的错误的一种方式</td></tr><tr><td align="left"><code>&lt;cstdarg&gt;</code></td><td align="left">支持接受数量可变的参数的函数。即在调用函数时，可以给函数传送数量不等的数据项。它定义了宏va_arg、va_end、va_start以及va_list类型</td></tr><tr><td align="left"><code>&lt;csetjmp&gt;</code></td><td align="left">为C样式的非本地跳跃提供函数。这些函数在C++中不常用</td></tr><tr><td align="left"><code>&lt;csignal&gt;</code></td><td align="left">为中断处理提供C样式支持</td></tr></tbody></table><p>C2. 支持流输入&#x2F;输出的头文件 </p><table><thead><tr><th align="left">头文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;iostream&gt;</code></td><td align="left">支持标准流cin、cout、cerr和clog的输入和输出，它还支持多字节字符标准流wcin、wcout、wcerr和wclog。</td></tr><tr><td align="left"><code>&lt;iomanip&gt;</code></td><td align="left">提供操纵程序，允许改变流的状态，从而改变输出的格式。</td></tr><tr><td align="left"><code>&lt;ios&gt;</code></td><td align="left">定义iostream的基类</td></tr><tr><td align="left"><code>&lt;istream&gt;</code></td><td align="left">为管理输出流缓存区的输入定义模板类</td></tr><tr><td align="left"><code>&lt;ostream&gt;</code></td><td align="left">为管理输出流缓存区的输出定义模板类</td></tr><tr><td align="left"><code>&lt;sstream&gt;</code></td><td align="left">支持字符串的流输入输出</td></tr><tr><td align="left"><code>&lt;fstream&gt;</code></td><td align="left">支持文件的流输入输出</td></tr><tr><td align="left"><code>&lt;iosfwd&gt;</code></td><td align="left">为输入输出对象提供向前的声明</td></tr><tr><td align="left"><code>&lt;streambuf&gt;</code></td><td align="left">支持流输入和输出的缓存</td></tr><tr><td align="left"><code>&lt;cstdio&gt;</code></td><td align="left">为标准流提供C样式的输入和输出</td></tr><tr><td align="left"><code>&lt;cwchar&gt;</code></td><td align="left">支持多字节字符的C样式输入输出</td></tr></tbody></table><p>C3. 与诊断功能相关的头文件 </p><table><thead><tr><th align="left">头文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;stdexcept&gt;</code></td><td align="left">定义标准异常。异常是处理错误的方式</td></tr><tr><td align="left"><code>&lt;cassert&gt;</code></td><td align="left">定义断言宏，用于检查运行期间的情形</td></tr><tr><td align="left"><code>&lt;cerrno&gt;</code></td><td align="left">支持C样式的错误信息</td></tr></tbody></table><p>C4. 定义工具函数的头文件 </p><table><thead><tr><th align="left">头文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;utility&gt;</code></td><td align="left">定义重载的关系运算符，简化关系运算符的写入，它还定义了pair类型，该类型是一种模板类型，可以存储一对值。这些功能在库的其他地方使用</td></tr><tr><td align="left"><code>&lt;functional&gt;</code></td><td align="left">定义了许多函数对象类型和支持函数对象的功能，函数对象是支持operator()()函数调用运算符的任意对象</td></tr><tr><td align="left"><code>&lt;memory&gt;</code></td><td align="left">给容器、管理内存的函数和auto_ptr模板类定义标准内存分配器</td></tr><tr><td align="left"><code>&lt;ctime&gt;</code></td><td align="left">支持系统时钟函数</td></tr></tbody></table><p>C5. 支持字符串处理的头文件    </p><table><thead><tr><th align="left">头文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;string&gt;</code></td><td align="left">为字符串类型提供支持和定义，包括单字节字符串(由char组成)的string和多字节字符串(由wchar_t组成)</td></tr><tr><td align="left"><code>&lt;cctype&gt;</code></td><td align="left">单字节字符类别</td></tr><tr><td align="left"><code>&lt;cwctype&gt;</code></td><td align="left">多字节字符类别</td></tr><tr><td align="left"><code>&lt;cstring&gt;</code></td><td align="left">为处理非空字节序列和内存块提供函数。这不同于对应的标准C库头文件，几个C样式字符串的一般C库函数被返回值为const和非const的函数对替代了</td></tr><tr><td align="left"><code>&lt;cwchar&gt;</code></td><td align="left">为处理、执行I&#x2F;O和转换多字节字符序列提供函数，这不同于对应的标准C库头文件，几个多字节C样式字符串操作的一般C库函数被返回值为const和非const的函数对替代了。</td></tr><tr><td align="left"><code>&lt;cstdlib&gt;</code></td><td align="left">为把单字节字符串转换为数值、在多字节字符和多字节字符串之间转换提供函数</td></tr></tbody></table><p>C6. 定义容器类的模板的头文件   </p><table><thead><tr><th align="left">头文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;vector&gt;</code></td><td align="left">定义vector序列模板，这是一个大小可以重新设置的数组类型，比普通数组更安全、更灵活</td></tr><tr><td align="left"><code>&lt;list&gt;</code></td><td align="left">定义list序列模板，这是一个序列的链表，常常在任意位置插入和删除元素</td></tr><tr><td align="left"><code>&lt;deque&gt;</code></td><td align="left">定义deque序列模板，支持在开始和结尾的高效插入和删除操作</td></tr><tr><td align="left"><code>&lt;queue&gt;</code></td><td align="left">为队列(先进先出)数据结构定义序列适配器queue和priority_queue</td></tr><tr><td align="left"><code>&lt;stack&gt;</code></td><td align="left">为堆栈(后进先出)数据结构定义序列适配器stack</td></tr><tr><td align="left"><code>&lt;map&gt;</code></td><td align="left">map是一个关联容器类型，允许根据键值是唯一的，且按照升序存储。multimap类似于map，但键不是唯一的。</td></tr><tr><td align="left"><code>&lt;set&gt;</code></td><td align="left">set是一个关联容器类型，用于以升序方式存储唯一值。multiset类似于set，但是值不必是唯一的。</td></tr><tr><td align="left"><code>&lt;bitset&gt;</code></td><td align="left">为固定长度的位序列定义bitset模板，它可以看作固定长度的紧凑型bool数组</td></tr></tbody></table><p>C7. 支持迭代器的头文件   </p><table><thead><tr><th align="left">头文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;iterator&gt;</code></td><td align="left">给迭代器提供定义和支持</td></tr></tbody></table><p>C8. 有关算法的头文件   </p><table><thead><tr><th align="left">头文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;algorithm&gt;</code></td><td align="left">提供一组基于算法的函数，包括置换、排序、合并和搜索</td></tr><tr><td align="left"><code>&lt;cstdlib&gt;</code></td><td align="left">声明C标准库函数bsearch()和qsort()，进行搜索和排序</td></tr><tr><td align="left"><code>&lt;ciso646&gt;</code></td><td align="left">允许在代码中使用and代替&amp;&amp;</td></tr></tbody></table><p>C9. 有关数值操作的头文件   </p><table><thead><tr><th align="left">头文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;complex&gt;</code></td><td align="left">支持复杂数值的定义和操作</td></tr><tr><td align="left"><code>&lt;valarray&gt;</code></td><td align="left">支持数值矢量的操作</td></tr><tr><td align="left"><code>&lt;numeric&gt;</code></td><td align="left">在数值序列上定义一组一般数学操作，例如accumulate和inner_product</td></tr><tr><td align="left"><code>&lt;cmath&gt;</code></td><td align="left">这是C数学库，其中还附加了重载函数，以支持C++约定</td></tr><tr><td align="left"><code>&lt;cstdlib&gt;</code></td><td align="left">提供的函数可以提取整数的绝对值，对整数进行取余数操作</td></tr></tbody></table><p>C10. 有关本地化的头文件   </p><table><thead><tr><th align="left">头文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;locale&gt;</code></td><td align="left">提供的本地化包括字符类别、排序序列以及货币和日期表示。</td></tr><tr><td align="left"><code>&lt;clocale&gt;</code></td><td align="left">对本地化提供C样式支持</td></tr></tbody></table><p>C++标准库的所有头文件都没有扩展名。C++标准库以<code>&lt;cname&gt;</code>形式的标准头文件提供。在<code>&lt;cname&gt;</code>形式标准的头文件中，与宏相关的名称在全局作用域中定义，其他名称在std命名空间中声明。在C++中还可以使用name.h 形式的标准C库头文件名。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;C-标准库&quot;&gt;&lt;a href=&quot;#C-标准库&quot; class=&quot;headerlink&quot; title=&quot;C++标准库&quot;&gt;&lt;/a&gt;C++标准库&lt;/h1&gt;&lt;p&gt;C++强大的功能来源于其丰富的类库及库函数资源。C++标准库的内容总共在50个标准头文件中定义。在C++开发中，要尽可能地利用标准库完成。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="C++" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL容器-Deque</title>
    <link href="http://example.com/2022/09/02/STL%E5%AE%B9%E5%99%A8-Deque/"/>
    <id>http://example.com/2022/09/02/STL%E5%AE%B9%E5%99%A8-Deque/</id>
    <published>2022-09-02T09:19:41.000Z</published>
    <updated>2022-09-06T03:37:16.277Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-Deque"><a href="#STL容器-Deque" class="headerlink" title="STL容器-Deque"></a>STL容器-Deque</h1><h2 id="1、Deque容器简介"><a href="#1、Deque容器简介" class="headerlink" title="1、Deque容器简介"></a>1、Deque容器简介</h2><ul><li>deque是“double-ended queue”的缩写，和vector一样都是STL的容器，<strong>deque是双端数组</strong>，而vector是单端的。</li><li>deque在接口上和vector非常相似，在许多操作的地方可以直接替换。<span id="more"></span></li><li>deque可以随机存取元素（支持索引值直接存取， 用[]操作符或at()方法）。</li><li>deque头部和尾部添加或移除元素都非常快速。但是在中部安插元素或移除元素比较费时。</li><li><code>#include &lt;deque&gt;</code></li></ul><h2 id="2、deque对象的默认构造"><a href="#2、deque对象的默认构造" class="headerlink" title="2、deque对象的默认构造"></a>2、deque对象的默认构造</h2><p>deque采用模板类实现，deque对象的默认构造形式：**<code>deque&lt;T&gt; deqT</code>**;  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deque &lt;<span class="type">int</span>&gt; deqInt;           <span class="comment">//一个存放int的deque容器。</span></span><br><span class="line">deque &lt;<span class="type">float</span>&gt; deqFloat;       <span class="comment">//一个存放float的deque容器。</span></span><br><span class="line">deque &lt;string&gt; deqString;     <span class="comment">//一个存放string的deque容器。</span></span><br><span class="line">...   </span><br><span class="line"><span class="comment">//尖括号内还可以设置指针类型或自定义类型。 </span></span><br></pre></td></tr></table></figure><h2 id="3、deque末尾的添加移除操作"><a href="#3、deque末尾的添加移除操作" class="headerlink" title="3、deque末尾的添加移除操作"></a>3、deque末尾的添加移除操作</h2><p><strong>理论知识:</strong></p><ul><li><strong>deque.push_back(elem);</strong>&#x2F;&#x2F;在容器尾部添加一个数据</li><li><strong>deque.push_front(elem);</strong>&#x2F;&#x2F;在容器头部插入一个数据</li><li><strong>deque.pop_back();</strong>    &#x2F;&#x2F;删除容器最后一个数据</li><li><strong>deque.pop_front();</strong>&#x2F;&#x2F;删除容器第一个数据</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; deqInt;</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">deqInt.<span class="built_in">pop_front</span>();</span><br><span class="line">deqInt.<span class="built_in">pop_front</span>();</span><br><span class="line">deqInt.<span class="built_in">push_front</span>(<span class="number">11</span>);</span><br><span class="line">deqInt.<span class="built_in">push_front</span>(<span class="number">13</span>);</span><br><span class="line">deqInt.<span class="built_in">pop_back</span>();</span><br><span class="line">deqInt.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//deqInt  &#123; 13,11,5&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4、deque的数据存取"><a href="#4、deque的数据存取" class="headerlink" title="4、deque的数据存取"></a>4、deque的数据存取</h2><p><strong>理论知识:</strong></p><ul><li><strong>deque.at(idx);</strong>  &#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，抛出out_of_range。</li><li><strong>deque[idx];</strong>     &#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，不抛出异常，直接出错。</li><li><strong>deque.front();</strong>  &#x2F;&#x2F;返回第一个数据。</li><li><strong>deque.back();</strong>   &#x2F;&#x2F;返回最后一个数据</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; deqInt;</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iA = deqInt.<span class="built_in">at</span>(<span class="number">0</span>);<span class="comment">//1</span></span><br><span class="line"><span class="type">int</span> iB = deqInt[<span class="number">1</span>];<span class="comment">//3</span></span><br><span class="line">deqInt.<span class="built_in">at</span>(<span class="number">0</span>) = <span class="number">99</span>;<span class="comment">//99</span></span><br><span class="line">deqInt[<span class="number">1</span>] = <span class="number">88</span>;    <span class="comment">//88</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iFront = deqInt.<span class="built_in">front</span>();<span class="comment">//99</span></span><br><span class="line"><span class="type">int</span> iBack = deqInt.<span class="built_in">back</span>();    <span class="comment">//9</span></span><br><span class="line">deqInt.<span class="built_in">front</span>() = <span class="number">77</span>;<span class="comment">//77</span></span><br><span class="line">deqInt.<span class="built_in">back</span>() = <span class="number">66</span>;    <span class="comment">//66</span></span><br></pre></td></tr></table></figure><h2 id="5、deque与迭代器"><a href="#5、deque与迭代器" class="headerlink" title="5、deque与迭代器"></a>5、deque与迭代器</h2><p><strong>理论知识：</strong></p><ul><li><strong>deque.begin();</strong>  &#x2F;&#x2F;返回容器中第一个元素的迭代器。</li><li><strong>deque.end();</strong>    &#x2F;&#x2F;返回容器中最后一个元素之后的迭代器。</li><li><strong>deque.rbegin();</strong> &#x2F;&#x2F;返回容器中倒数第一个元素的迭代器。</li><li><strong>deque.rend();</strong>   &#x2F;&#x2F;返回容器中倒数最后一个元素之后的迭代器。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; deqInt;</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">deqInt.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::iterator it=deqInt.<span class="built_in">begin</span>(); it!=deqInt.<span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; *it;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 3 5 7 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::reverse_iterator rit=deqInt.<span class="built_in">rbegin</span>(); rit!=deqInt.<span class="built_in">rend</span>(); ++rit)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; *rit;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//9 7 5 3 1</span></span><br></pre></td></tr></table></figure><h2 id="6、deque对象的带参数构造"><a href="#6、deque对象的带参数构造" class="headerlink" title="6、deque对象的带参数构造"></a>6、deque对象的带参数构造</h2><p><strong>理论知识：</strong></p><ul><li><strong>deque(beg,end);</strong>    &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。注意该区间是左闭右开的区间。</li><li><strong>deque(n,elem);</strong>     &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><strong>deque(const deque  &amp;deq);</strong>  &#x2F;&#x2F;拷贝构造函数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; deqIntA;</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">deqIntB</span><span class="params">(deqIntA.begin(),deqIntA.end())</span></span>;<span class="comment">//1 3 5 7 9</span></span><br><span class="line"><span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">deqIntC</span><span class="params">(<span class="number">5</span>,<span class="number">8</span>)</span></span>;<span class="comment">//8 8 8 8 8</span></span><br><span class="line"><span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">deqIntD</span><span class="params">(deqIntA)</span></span>;<span class="comment">//1 3 5 7 9</span></span><br></pre></td></tr></table></figure><h2 id="7、deque的赋值"><a href="#7、deque的赋值" class="headerlink" title="7、deque的赋值"></a>7、deque的赋值</h2><p><strong>理论知识：</strong></p><ul><li><strong>deque.assign(beg,end);</strong>  &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。注意该区间是左闭右开的区间。</li><li><strong>deque.assign(n,elem);</strong>   &#x2F;&#x2F;将n个elem拷贝赋值给本身。</li><li><strong>deque&amp; operator&#x3D;(const deque &amp;deq);</strong>&#x2F;&#x2F;重载等号操作符 </li><li><strong>deque.swap(deq);</strong>        &#x2F;&#x2F; 将vec与本身的元素互换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; deqIntA,deqIntB,deqIntC,deqIntD;</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">deqIntB.<span class="built_in">assign</span>(deqIntA.<span class="built_in">begin</span>(),deqIntA.<span class="built_in">end</span>());<span class="comment">// 1 3 5 7 9</span></span><br><span class="line"></span><br><span class="line">deqIntC.<span class="built_in">assign</span>(<span class="number">5</span>,<span class="number">8</span>);<span class="comment">//8 8 8 8 8</span></span><br><span class="line"></span><br><span class="line">deqIntD = deqIntA;<span class="comment">//1 3 5 7 9</span></span><br><span class="line"></span><br><span class="line">deqIntC.<span class="built_in">swap</span>(deqIntD);<span class="comment">//互换</span></span><br></pre></td></tr></table></figure><h2 id="8、deque的大小"><a href="#8、deque的大小" class="headerlink" title="8、deque的大小"></a>8、deque的大小</h2><p><strong>理论知识：</strong></p><ul><li><strong>deque.size();</strong>        &#x2F;&#x2F;返回容器中元素的个数</li><li><strong>deque.empty();</strong>        &#x2F;&#x2F;判断容器是否为空</li><li><strong>deque.resize(num);</strong>    &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li><li><strong>deque.resize(num, elem);</strong>  &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; deqIntA;</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">deqIntA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iSize = deqIntA.<span class="built_in">size</span>(); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!deqIntA.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    deqIntA.<span class="built_in">resize</span>(<span class="number">5</span>);<span class="comment">//1 3 5 0 0</span></span><br><span class="line">    deqIntA.<span class="built_in">resize</span>(<span class="number">7</span>,<span class="number">1</span>);<span class="comment">//1 3 5 0 0 1 1</span></span><br><span class="line">    deqIntA.<span class="built_in">resize</span>(<span class="number">2</span>);<span class="comment">//1 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、deque的插入"><a href="#9、deque的插入" class="headerlink" title="9、deque的插入"></a>9、deque的插入</h2><p><strong>理论知识：</strong></p><ul><li><strong>deque.insert(pos,elem);</strong>      &#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。</li><li><strong>deque.insert(pos,n,elem);</strong>     &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</li><li><strong>deque.insert(pos,beg,end);</strong>   &#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; deqA;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; deqB;</span><br><span class="line"></span><br><span class="line">deqA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">deqA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">deqA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">deqA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">deqA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">deqB.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">deqB.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">deqB.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">deqB.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">deqA.<span class="built_in">insert</span>(deqA.<span class="built_in">begin</span>(), <span class="number">11</span>);    <span class="comment">//&#123;11, 1, 3, 5, 7, 9&#125;</span></span><br><span class="line">deqA.<span class="built_in">insert</span>(deqA.<span class="built_in">begin</span>()+<span class="number">1</span>,<span class="number">2</span>,<span class="number">33</span>);<span class="comment">//&#123;11,33,33,1,3,5,7,9&#125;</span></span><br><span class="line">deqA.<span class="built_in">insert</span>(deqA.<span class="built_in">begin</span>() , deqB.<span class="built_in">begin</span>() , deqB.<span class="built_in">end</span>() );<span class="comment">//&#123;2,4,6,8,11,33,33,1,3,5,7,9&#125;</span></span><br></pre></td></tr></table></figure><h2 id="10、deque的删除"><a href="#10、deque的删除" class="headerlink" title="10、deque的删除"></a>10、deque的删除</h2><p><strong>理论知识：</strong></p><ul><li><strong>deque.clear();</strong>     &#x2F;&#x2F;移除容器的所有数据</li><li><strong>deque.erase(beg,end);</strong>  &#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</li><li><strong>deque.erase(pos);</strong>      &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">删除区间内的元素</span><br><span class="line">deqInt是用deque&lt;<span class="type">int</span>&gt;声明的容器，现已包含按顺序的<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>元素。</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;::iterator itBegin=deqInt.<span class="built_in">begin</span>()+<span class="number">1</span>;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;::iterator itEnd=deqInt.<span class="built_in">begin</span>()+<span class="number">3</span>;</span><br><span class="line">deqInt.<span class="built_in">erase</span>(itBegin,itEnd);</span><br><span class="line"><span class="comment">//此时容器deqInt包含按顺序的1,6,9三个元素。</span></span><br><span class="line"></span><br><span class="line">假设 deqInt 包含<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>，删除容器中等于<span class="number">3</span>的元素</span><br><span class="line"><span class="keyword">for</span>(deque&lt;<span class="type">int</span>&gt;::iterator it=deqInt.<span class="built_in">being</span>(); it!=deqInt.<span class="built_in">end</span>(); )    <span class="comment">//小括号里不需写  ++it</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(*it == <span class="number">3</span>)</span><br><span class="line">   &#123;</span><br><span class="line">        it  =  deqInt.<span class="built_in">erase</span>(it);       <span class="comment">//以迭代器为参数，删除元素3，并把数据删除后的下一个元素位置返回给迭代器。</span></span><br><span class="line">        <span class="comment">//此时，不执行  ++it；  </span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       ++it;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除deqInt的所有元素</span></span><br><span class="line">deqInt.<span class="built_in">clear</span>();<span class="comment">//容器为空</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-Deque&quot;&gt;&lt;a href=&quot;#STL容器-Deque&quot; class=&quot;headerlink&quot; title=&quot;STL容器-Deque&quot;&gt;&lt;/a&gt;STL容器-Deque&lt;/h1&gt;&lt;h2 id=&quot;1、Deque容器简介&quot;&gt;&lt;a href=&quot;#1、Deque容器简介&quot; class=&quot;headerlink&quot; title=&quot;1、Deque容器简介&quot;&gt;&lt;/a&gt;1、Deque容器简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;deque是“double-ended queue”的缩写，和vector一样都是STL的容器，&lt;strong&gt;deque是双端数组&lt;/strong&gt;，而vector是单端的。&lt;/li&gt;
&lt;li&gt;deque在接口上和vector非常相似，在许多操作的地方可以直接替换。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL容器-Vector</title>
    <link href="http://example.com/2022/09/02/STL%E5%AE%B9%E5%99%A8-Vector/"/>
    <id>http://example.com/2022/09/02/STL%E5%AE%B9%E5%99%A8-Vector/</id>
    <published>2022-09-02T09:19:16.000Z</published>
    <updated>2022-09-06T03:36:23.021Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-Vector"><a href="#STL容器-Vector" class="headerlink" title="STL容器-Vector"></a>STL容器-Vector</h1><h2 id="1、Vector容器简介"><a href="#1、Vector容器简介" class="headerlink" title="1、Vector容器简介"></a>1、Vector容器简介</h2><ul><li>vector是将元素置于一个动态数组中加以管理的容器。</li><li>vector可以随机存取元素（支持索引值直接存取， 用[]操作符或at()方法）。</li><li>vector尾部添加或移除元素非常快速。但是在中部或头部插入元素或移除元素比较费时。<span id="more"></span></li></ul><h2 id="2、Vector对象的默认构造"><a href="#2、Vector对象的默认构造" class="headerlink" title="2、Vector对象的默认构造"></a>2、Vector对象的默认构造</h2><p>vector采用模板类实现，vector对象的默认构造形式<br><strong>vector<T> vecT;</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecInt;        <span class="comment">//一个存放int的vector容器。</span></span><br><span class="line">vector&lt;<span class="type">float</span>&gt; vecFloat;     <span class="comment">//一个存放float的vector容器。</span></span><br><span class="line">vector&lt;string&gt; vecString;   <span class="comment">//一个存放string的vector容器。</span></span><br><span class="line">...            <span class="comment">//尖括号内还可以设置指针类型或自定义类型。</span></span><br><span class="line"></span><br><span class="line">Class CA&#123;&#125;;</span><br><span class="line">vector&lt;CA*&gt; vecpCA;  <span class="comment">//用于存放CA对象的指针的vector容器。</span></span><br><span class="line">vector&lt;CA&gt; vecCA;     <span class="comment">//用于存放CA对象的vector容器。由于容器元素的存放是按值复制的方式进行的，所以此时CA必须提供CA的拷贝构造函数，以保证CA对象间拷贝正常。</span></span><br></pre></td></tr></table></figure><h2 id="3、vector对象的带参数构造"><a href="#3、vector对象的带参数构造" class="headerlink" title="3、vector对象的带参数构造"></a>3、vector对象的带参数构造</h2><p><strong>理论知识</strong></p><ul><li><strong>vector(beg,end);</strong>    &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。注意该区间是左闭右开的区间。</li><li><strong>vector(n,elem);</strong>     &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><strong>vector(const vector &amp;vec);</strong>   &#x2F;&#x2F;拷贝构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>  iArray[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt;  <span class="title">vecIntA</span><span class="params">(iArray,  iArray+<span class="number">5</span> )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vecIntB</span> <span class="params">(vecIntA.begin(), vecIntA.end())</span></span>;   <span class="comment">//用构造函数初始化容器vecIntB </span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vecIntB</span> <span class="params">(vecIntA.begin(), vecIntA.begin()+<span class="number">3</span>)</span></span>;  </span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vecIntC</span><span class="params">(<span class="number">3</span>, <span class="number">9</span>)</span></span>; <span class="comment">//此代码运行后，容器vecIntB就存放3个元素，每个元素的值是9。</span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vecIntD</span><span class="params">(vecIntA)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="4、vector的赋值"><a href="#4、vector的赋值" class="headerlink" title="4、vector的赋值"></a>4、vector的赋值</h2><p><strong>理论知识</strong></p><ul><li><strong>vector.assign(beg,end);</strong>    &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。注意该区间是左闭右开的区间。</li><li><strong>vector.assign(n,elem);</strong>     &#x2F;&#x2F;将n个elem拷贝赋值给本身。</li><li><strong>vector&amp; operator&#x3D;(const vector  &amp;vec);</strong>&#x2F;&#x2F;重载等号操作符</li><li><strong>vector.swap(vec);</strong>  &#x2F;&#x2F; 将vec与本身的元素互换。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntA, vecIntB, vecIntC, vecIntD;</span><br><span class="line"><span class="type">int</span>  iArray[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">vecIntA.<span class="built_in">assign</span>(iArray,iArray+<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">vecIntB.<span class="built_in">assign</span>(vecIntA.<span class="built_in">begin</span>(),  vecIntA.<span class="built_in">end</span>());    <span class="comment">//用其它容器的迭代器作参数。</span></span><br><span class="line"></span><br><span class="line">vecIntC.<span class="built_in">assign</span>(<span class="number">3</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vecIntD;</span><br><span class="line">vecIntD = vecIntA;</span><br><span class="line"></span><br><span class="line">vecIntA.<span class="built_in">swap</span>(vecIntD);</span><br></pre></td></tr></table></figure><h2 id="5、vector的大小"><a href="#5、vector的大小" class="headerlink" title="5、vector的大小"></a>5、vector的大小</h2><p><strong>理论知识</strong></p><ul><li><strong>vector.size();</strong>   &#x2F;&#x2F;返回容器中元素的个数</li><li><strong>vector.empty();</strong>   &#x2F;&#x2F;判断容器是否为空</li><li><strong>vector.resize(num);</strong>   &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li><li><strong>vector.resize(num, elem);</strong>  &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vecInt是vector&lt;<span class="type">int</span>&gt;  声明的容器，现已包含<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>元素。</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iSize = vecInt.<span class="built_in">size</span>();<span class="comment">//iSize == 3;</span></span><br><span class="line"><span class="type">bool</span> bEmpty = vecInt.<span class="built_in">empty</span>();<span class="comment">// bEmpty == false;</span></span><br><span class="line">vecInt.<span class="built_in">resize</span>(<span class="number">5</span>);   <span class="comment">//此时里面包含1,2,3,0,0元素。</span></span><br><span class="line">vecInt.<span class="built_in">resize</span>(<span class="number">8</span>,<span class="number">3</span>); <span class="comment">//此时里面包含1,2,3,0,0,3,3,3元素。</span></span><br><span class="line">vecInt.<span class="built_in">resize</span>(<span class="number">2</span>);   <span class="comment">//此时里面包含1,2元素。</span></span><br></pre></td></tr></table></figure><h2 id="6、vector末尾的添加移除操作"><a href="#6、vector末尾的添加移除操作" class="headerlink" title="6、vector末尾的添加移除操作"></a>6、vector末尾的添加移除操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecInt;</span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">1</span>);  <span class="comment">//在容器尾部加入一个元素</span></span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">3</span>);  <span class="comment">//移除容器中最后一个元素</span></span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">5</span>);  </span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">7</span>); </span><br><span class="line">vecInt.<span class="built_in">push_back</span>(<span class="number">9</span>); </span><br><span class="line">vecInt.<span class="built_in">pop_back</span>();    </span><br><span class="line">vecInt.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//&#123;5 ,7 ,9&#125;  </span></span><br></pre></td></tr></table></figure><h2 id="7、vector的数据存取"><a href="#7、vector的数据存取" class="headerlink" title="7、vector的数据存取"></a>7、vector的数据存取</h2><p><strong>理论知识</strong></p><ul><li><strong>vec.at(idx);</strong>  &#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，抛出out_of_range异常。</li><li><strong>vec[idx];</strong>  &#x2F;&#x2F;返回索引idx所指的数据，越界时，运行直接报错</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vector;    <span class="comment">//假设包含1 ,3 ,5 ,7 ,9</span></span><br><span class="line">vector.<span class="built_in">at</span>(<span class="number">2</span>) == vector[<span class="number">2</span>];<span class="comment">//5 true</span></span><br><span class="line">vector.<span class="built_in">at</span>(<span class="number">2</span>) = <span class="number">8</span>;  <span class="comment">//或 vector[2] = 8;</span></span><br><span class="line"><span class="comment">//vector 就包含 1, 3, 8, 7, 9值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iF = vector.<span class="built_in">front</span>();<span class="comment">//iF==1</span></span><br><span class="line"><span class="type">int</span> iB = vector.<span class="built_in">back</span>();    <span class="comment">//iB==9</span></span><br><span class="line">vector.<span class="built_in">front</span>() = <span class="number">11</span>;    <span class="comment">//vector包含&#123;11,3,8,7,9&#125;</span></span><br><span class="line">vector.<span class="built_in">back</span>() = <span class="number">19</span>;        <span class="comment">//vector包含&#123;11,3,8,7,19&#125;</span></span><br></pre></td></tr></table></figure><h2 id="8、迭代器基本原理"><a href="#8、迭代器基本原理" class="headerlink" title="8、迭代器基本原理"></a>8、迭代器基本原理</h2><ul><li>迭代器是一个“可遍历STL容器内全部或部分元素”的对象。</li><li>迭代器指出容器中的一个特定位置。</li><li>迭代器就如同一个指针。</li><li>迭代器提供对一个容器中的对象的访问方法，并且可以定义了容器中对象的范围。</li><li>这里大概介绍一下迭代器的类别：<ul><li><strong>输入迭代器</strong>：也有叫法称之为“只读迭代器”，它从容器中读取元素，只能一次读入一个元素向前移动，只支持一遍算法，同一个输入迭代器不能两遍遍历一个序列。</li><li><strong>输出迭代器</strong>：也有叫法称之为“只写迭代器”，它往容器中写入元素，只能一次写入一个元素向前移动，只支持一遍算法，同一个输出迭代器不能两遍遍历一个序列。</li><li><strong>正向迭代器</strong>：组合输入迭代器和输出迭代器的功能，还可以多次解析一个迭代器指定的位置，可以对一个值进行多次读&#x2F;写。</li><li><strong>双向迭代器</strong>：组合正向迭代器的功能，还可以通过–操作符向后移动位置。</li><li><strong>随机访问迭代器</strong>：组合双向迭代器的功能，还可以向前向后跳过任意个位置，可以直接访问容器中任何位置的元素。</li></ul></li><li>目前本系列教程所用到的容器，都支持双向迭代器或随机访问迭代器，下面将会详细介绍这两个类别的迭代器。</li></ul><h2 id="9、双向迭代器与随机访问迭代器"><a href="#9、双向迭代器与随机访问迭代器" class="headerlink" title="9、双向迭代器与随机访问迭代器"></a>9、双向迭代器与随机访问迭代器</h2><p><em>双向迭代器支持的操作：</em><br><code>it++,  ++it,    it--,   --it，*it， itA = itB， itA == itB，itA != itB</code><br>其中<strong>list,set,multiset,map,multimap</strong>支持双向迭代器。</p><p><em>随机访问迭代器支持的操作：</em><br>在双向迭代器的操作基础上添加 <code> it+=i， it-=i， it+i(或it=it+i)，it[i], itA&lt;itB,   itA&lt;=itB,  itA&gt;itB,  itA&gt;=itB</code> 的功能。<br>其中<strong>vector，deque</strong>支持随机访问迭代器。</p><h2 id="10、vector与迭代器的配合使用"><a href="#10、vector与迭代器的配合使用" class="headerlink" title="10、vector与迭代器的配合使用"></a>10、vector与迭代器的配合使用</h2><p><img src="https://pic.imgdb.cn/item/63131be316f2c2beb1dcde45.jpg"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;  vecInt;        <span class="comment">//假设包含1,3,5,7,9元素</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;<span class="comment">//声明容器vector&lt;int&gt;的迭代器。</span></span><br><span class="line">it = vecInt.<span class="built_in">begin</span>();        <span class="comment">// *it == 1</span></span><br><span class="line">++it;<span class="comment">//或者it++;  *it == 3  ，前++的效率比后++的效率高，前++返回引用，后++返回值。</span></span><br><span class="line">it += <span class="number">2</span>;<span class="comment">//*it == 7</span></span><br><span class="line">it = it+<span class="number">1</span>;<span class="comment">//*it == 9</span></span><br><span class="line">++it;<span class="comment">// it == vecInt.end();  此时不能再执行*it,会出错!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正向遍历：</span></span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator it=vecInt.<span class="built_in">begin</span>(); it!=vecInt.<span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iItem = *it; </span><br><span class="line">    cout &lt;&lt; iItem;    <span class="comment">//或直接使用  cout &lt;&lt; *it;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样子便打印出1 3 5 7 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//逆向遍历：</span></span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::reverse_iterator rit=vecInt.<span class="built_in">rbegin</span>(); rit!=vecInt.<span class="built_in">rend</span>(); ++rit)    <span class="comment">//注意，小括号内仍是++rit</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> iItem  = *rit;</span><br><span class="line">    cout &lt;&lt; iItem;  <span class="comment">//或直接使用cout &lt;&lt; *rit;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时将打印出9,7,5,3,1</span></span><br><span class="line"><span class="comment">//注意，这里迭代器的声明采用vector&lt;int&gt;::reverse_iterator，而非vector&lt;int&gt;::iterator。</span></span><br></pre></td></tr></table></figure><p><strong>迭代器还有其它两种声明方法：</strong><br><code>vector&lt;int&gt;::const_iterator</code> 与 <code>vector&lt;int&gt;::const_reverse_iterator</code></p><p>以上两种分别是vector<int>::iterator 与vector<int>::reverse_iterator 的只读形式，使用这两种迭代器时，不会修改到容器中的值。<br>备注：不过容器中的insert和erase方法仅接受这四种类型中的iterator，其它三种不支持。<strong>《Effective STL》建议我们尽量使用iterator取代const_iterator、reverse_iterator和const_reverse_iterator。</strong></p><h2 id="11、vector的插入"><a href="#11、vector的插入" class="headerlink" title="11、vector的插入"></a>11、vector的插入</h2><p><strong>理论知识</strong></p><ul><li><strong>vector.insert(pos,elem);</strong>   &#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。</li><li><strong>vector.insert(pos,n,elem);</strong>   &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</li><li><strong>vector.insert(pos,beg,end);</strong>   &#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值</li></ul><p>简单案例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vecA;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vecB;</span><br><span class="line"></span><br><span class="line">vecA.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vecA.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">vecA.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">vecA.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">vecA.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">vecB.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">vecB.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">vecB.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">vecB.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">vecA.<span class="built_in">insert</span>(vecA.<span class="built_in">begin</span>(), <span class="number">11</span>);<span class="comment">//&#123;11, 1, 3, 5, 7, 9&#125;</span></span><br><span class="line">vecA.<span class="built_in">insert</span>(vecA.<span class="built_in">begin</span>()+<span class="number">1</span>,<span class="number">2</span>,<span class="number">33</span>);<span class="comment">//&#123;11,33,33,1,3,5,7,9&#125;</span></span><br><span class="line">vecA.<span class="built_in">insert</span>(vecA.<span class="built_in">begin</span>() , vecB.<span class="built_in">begin</span>() , vecB.<span class="built_in">end</span>() );<span class="comment">//&#123;2,4,6,8,11,33,33,1,3,5,7,9&#125;</span></span><br></pre></td></tr></table></figure><h2 id="12、vector的删除"><a href="#12、vector的删除" class="headerlink" title="12、vector的删除"></a>12、vector的删除</h2><p><strong>理论知识</strong></p><ul><li><strong>vector.clear();</strong>  &#x2F;&#x2F;移除容器的所有数据</li><li><strong>vec.erase(beg,end);</strong>  &#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</li><li><strong>vec.erase(pos);</strong>    &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</li></ul><p>简单案例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除区间内的元素</span></span><br><span class="line">vecInt是用vector&lt;<span class="type">int</span>&gt;声明的容器，现已包含按顺序的<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>元素。</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator itBegin = vecInt.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator itEnd = vecInt.<span class="built_in">begin</span>() + <span class="number">2</span>;</span><br><span class="line">vecInt.<span class="built_in">erase</span>(itBegin, itEnd);</span><br><span class="line"><span class="comment">//此时容器vecInt包含按顺序的1,6,9三个元素。</span></span><br><span class="line"></span><br><span class="line">假设 vecInt 包含<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>，删除容器中等于<span class="number">3</span>的元素</span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator it = vecInt.<span class="built_in">being</span>(); it! = vecInt.<span class="built_in">end</span>(); )    <span class="comment">//小括号里不需写  ++it</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(*it == <span class="number">3</span>)</span><br><span class="line">   &#123;</span><br><span class="line">        it  =  vecInt.<span class="built_in">erase</span>(it);     <span class="comment">//以迭代器为参数，删除元素3，并把数据删除后的下一个元素位置返回给迭代器。</span></span><br><span class="line">        <span class="comment">//此时，不执行  ++it；  </span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       ++it;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除vecInt的所有元素</span></span><br><span class="line">vecInt.<span class="built_in">clear</span>();<span class="comment">//容器为空</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-Vector&quot;&gt;&lt;a href=&quot;#STL容器-Vector&quot; class=&quot;headerlink&quot; title=&quot;STL容器-Vector&quot;&gt;&lt;/a&gt;STL容器-Vector&lt;/h1&gt;&lt;h2 id=&quot;1、Vector容器简介&quot;&gt;&lt;a href=&quot;#1、Vector容器简介&quot; class=&quot;headerlink&quot; title=&quot;1、Vector容器简介&quot;&gt;&lt;/a&gt;1、Vector容器简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vector是将元素置于一个动态数组中加以管理的容器。&lt;/li&gt;
&lt;li&gt;vector可以随机存取元素（支持索引值直接存取， 用[]操作符或at()方法）。&lt;/li&gt;
&lt;li&gt;vector尾部添加或移除元素非常快速。但是在中部或头部插入元素或移除元素比较费时。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL容器-String</title>
    <link href="http://example.com/2022/09/02/STL%E5%AE%B9%E5%99%A8-String/"/>
    <id>http://example.com/2022/09/02/STL%E5%AE%B9%E5%99%A8-String/</id>
    <published>2022-09-02T09:18:53.000Z</published>
    <updated>2022-09-06T03:35:58.094Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL容器-String"><a href="#STL容器-String" class="headerlink" title="STL容器-String"></a>STL容器-String</h1><h2 id="1、String的概念"><a href="#1、String的概念" class="headerlink" title="1、String的概念"></a>1、String的概念</h2><p>string是STL的字符串类型，通常用来表示字符串。而在使用string之前，字符串通常是用char<em>表示的。string与char</em>都可以用来表示字符串，那么二者有什么区别呢？<span id="more"></span></p><p><strong>string和char*的比较：</strong></p><ul><li>string是一个类, char*是一个指向字符的指针。string封装了char<em>，管理这个字符串，是一个char</em>型的容器。</li><li>string不用考虑内存释放和越界。string管理char*所分配的内存。每一次string的复制，取值都由string类负责维护，不用担心复制越界和取值越界等。</li><li>string提供了一系列的字符串操作函数。查找find，拷贝copy，删除erase，替换replace，插入insert。</li></ul><h2 id="2、String的构造函数"><a href="#2、String的构造函数" class="headerlink" title="2、String的构造函数"></a>2、String的构造函数</h2><ul><li>默认构造函数：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>();   <span class="comment">//构造一个空的字符串string s1。</span></span><br></pre></td></tr></table></figure></li><li>拷贝构造函数：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>(<span class="type">const</span> string &amp;str);<span class="comment">//构造一个与str一样的string。如string s1(s2)。</span></span><br></pre></td></tr></table></figure></li><li>带参数的构造函数：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>(<span class="type">const</span> <span class="type">char</span> *s);    <span class="comment">//用字符串s初始化</span></span><br><span class="line"><span class="built_in">string</span>(<span class="type">int</span> n,<span class="type">char</span> c);    <span class="comment">//用n个字符c初始化</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3、String的存取字符操作"><a href="#3、String的存取字符操作" class="headerlink" title="3、String的存取字符操作"></a>3、String的存取字符操作</h2><ul><li>string类的字符操作：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> &amp;<span class="keyword">operator</span>[] (<span class="type">int</span> n) <span class="type">const</span>;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> &amp;<span class="title">at</span><span class="params">(<span class="type">int</span> n)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="type">char</span> &amp;<span class="keyword">operator</span>[] (<span class="type">int</span> n);</span><br><span class="line"><span class="function"><span class="type">char</span> &amp;<span class="title">at</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure></li><li>operator[]和at()均返回当前字符串中第n个字符，但二者是有区别的：<blockquote><p>主要区别在于at()在越界时会抛出异常，[]在刚好越界时会返回(char)0，再继续越界时，编译器直接出错。如果你的程序希望可以通过try,catch捕获异常，建议采用at()。</p></blockquote></li></ul><h2 id="4、从string取得const-char-的操作"><a href="#4、从string取得const-char-的操作" class="headerlink" title="4、从string取得const char*的操作"></a>4、从string取得const char*的操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *<span class="title">c_str</span><span class="params">()</span> <span class="type">const</span></span>;   <span class="comment">//返回一个以&#x27;\0&#x27;结尾的字符串的首地址</span></span><br></pre></td></tr></table></figure><h2 id="5、把string拷贝到char-指向的内存空间的操作"><a href="#5、把string拷贝到char-指向的内存空间的操作" class="headerlink" title="5、把string拷贝到char*指向的内存空间的操作"></a>5、把string拷贝到char*指向的内存空间的操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">copy</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> n, <span class="type">int</span> pos=<span class="number">0</span>)</span> <span class="type">const</span></span>;  </span><br></pre></td></tr></table></figure><p>把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目。注意要保证s所指向的空间足够大以容纳当前字符串，不然会越界。</p><h2 id="6、string的长度"><a href="#6、string的长度" class="headerlink" title="6、string的长度"></a>6、string的长度</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span></span>;   <span class="comment">//返回当前字符串的长度。长度不包括字符串结尾的&#x27;\0&#x27;。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;   <span class="comment">//当前字符串是否为空</span></span><br></pre></td></tr></table></figure><h2 id="7、string的赋值"><a href="#7、string的赋值" class="headerlink" title="7、string的赋值"></a>7、string的赋值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string &amp;<span class="keyword">operator</span>=(<span class="type">const</span> string &amp;s);     <span class="comment">//把字符串s赋给当前的字符串</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span>;          <span class="comment">//把字符串s赋给当前的字符串</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, <span class="type">int</span> n)</span></span>;   <span class="comment">//把字符串s的前n个字符赋给当前的字符串</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span>;        <span class="comment">//把字符串s赋给当前字符串</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(<span class="type">int</span> n,<span class="type">char</span> c)</span></span>;           <span class="comment">//用n个字符c赋给当前字符串</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(<span class="type">const</span> string &amp;s,<span class="type">int</span> start, <span class="type">int</span> n)</span></span>;    <span class="comment">//把字符串s中从start开始的n个字符赋给当前字符串</span></span><br></pre></td></tr></table></figure><h2 id="8、string字符串连接"><a href="#8、string字符串连接" class="headerlink" title="8、string字符串连接"></a>8、string字符串连接</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> string &amp;s);  <span class="comment">//把字符串s连接到当前字符串结尾</span></span><br><span class="line">string &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> <span class="type">char</span> *s);    <span class="comment">//把字符串s连接到当前字符串结尾</span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span>;        <span class="comment">//把字符串s连接到当前字符串结尾</span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s,<span class="type">int</span> n)</span></span>;  <span class="comment">//把字符串s的前n个字符连接到当前字符串结尾</span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span>;      <span class="comment">//同operator+=()</span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(<span class="type">const</span> string &amp;s,<span class="type">int</span> pos, <span class="type">int</span> n)</span></span>;  <span class="comment">//把字符串s中从pos开始的n个字符连接到当前字符串结尾</span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> c)</span></span>;        <span class="comment">//在当前字符串结尾添加n个字符c</span></span><br></pre></td></tr></table></figure><h2 id="9、string的比较"><a href="#9、string的比较" class="headerlink" title="9、string的比较"></a>9、string的比较</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> string &amp;s)</span> <span class="type">const</span></span>;  <span class="comment">//与字符串s比较</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span> <span class="type">const</span></span>;    <span class="comment">//与字符串s比较</span></span><br></pre></td></tr></table></figure><p>compare函数在&gt;时返回 1，&lt;时返回 -1，&#x3D;&#x3D;时返回 0。比较区分大小写，比较时参考字典顺序，排越前面的越小。大写的A比小写的a小。</p><h2 id="10、string的子串"><a href="#10、string的子串" class="headerlink" title="10、string的子串"></a>10、string的子串</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">substr</span><span class="params">(<span class="type">int</span> pos=<span class="number">0</span>, <span class="type">int</span> n=npos)</span> <span class="type">const</span></span>;    <span class="comment">//返回由pos开始的n个字符组成的子字符串</span></span><br></pre></td></tr></table></figure><h2 id="11、string的查找-和-替换"><a href="#11、string的查找-和-替换" class="headerlink" title="11、string的查找 和 替换"></a>11、string的查找 和 替换</h2><p><strong>查找</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> c,<span class="type">int</span> pos=<span class="number">0</span>)</span> <span class="type">const</span></span>;  <span class="comment">//从pos开始查找字符c在当前字符串的位置 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, <span class="type">int</span> pos=<span class="number">0</span>)</span> <span class="type">const</span></span>;   <span class="comment">//从pos开始查找字符串s在当前字符串的位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> string &amp;s, <span class="type">int</span> pos=<span class="number">0</span>)</span> <span class="type">const</span></span>; <span class="comment">//从pos开始查找字符串s在当前字符串中的位置</span></span><br><span class="line"><span class="comment">//find函数如果查找不到，就返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rfind</span><span class="params">(<span class="type">char</span> c, <span class="type">int</span> pos=npos)</span> <span class="type">const</span></span>;      <span class="comment">//从pos开始从后向前查找字符c在当前字符串中的位置 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rfind</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, <span class="type">int</span> pos=npos)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rfind</span><span class="params">(<span class="type">const</span> string &amp;s, <span class="type">int</span> pos=npos)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">//rfind是反向查找的意思，如果查找不到，返回-1</span></span><br></pre></td></tr></table></figure><p><strong>替换</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> n, <span class="type">const</span> <span class="type">char</span> *s)</span></span>;    <span class="comment">//删除从pos开始的n个字符，然后在pos处插入串s</span></span><br><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> n, <span class="type">const</span> string &amp;s)</span></span>;  <span class="comment">//删除从pos开始的n个字符，然后在pos处插入串s</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(string &amp;s2)</span></span>;    <span class="comment">//交换当前字符串与s2的值</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串的查找和替换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s1 = <span class="string">&quot;wbm hello wbm 111 wbm 222 wbm 333&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> index = s1.<span class="built_in">find</span>(<span class="string">&quot;wbm&quot;</span>, <span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;index: &quot;</span> &lt;&lt; index; </span><br><span class="line"></span><br><span class="line"><span class="comment">//求itcast出现的次数</span></span><br><span class="line"><span class="type">size_t</span> offindex = s1.<span class="built_in">find</span>(<span class="string">&quot;wbm&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (offindex != string::npos)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;在下标index: &quot;</span> &lt;&lt; offindex &lt;&lt; <span class="string">&quot;找到wbm\n&quot;</span>;</span><br><span class="line">offindex = offindex + <span class="number">1</span>;</span><br><span class="line">offindex = s1.<span class="built_in">find</span>(<span class="string">&quot;wbm&quot;</span>, offindex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换 </span></span><br><span class="line">string s2 = <span class="string">&quot;wbm hello wbm 111 wbm 222 wbm 333&quot;</span>;</span><br><span class="line">s2.<span class="built_in">replace</span>(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&quot;wbm&quot;</span>);</span><br><span class="line">cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求itcast出现的次数</span></span><br><span class="line">offindex = s2.<span class="built_in">find</span>(<span class="string">&quot;wbm&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (offindex != string::npos)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;在下标index: &quot;</span> &lt;&lt; offindex &lt;&lt; <span class="string">&quot;找到wbm\n&quot;</span>;</span><br><span class="line">s2.<span class="built_in">replace</span>(offindex, <span class="number">3</span>, <span class="string">&quot;WBM&quot;</span>);</span><br><span class="line">offindex = offindex + <span class="number">1</span>;</span><br><span class="line">offindex = s1.<span class="built_in">find</span>(<span class="string">&quot;wbm&quot;</span>, offindex);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;替换以后的s2：&quot;</span> &lt;&lt; s2 &lt;&lt; endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12、String的区间删除和插入"><a href="#12、String的区间删除和插入" class="headerlink" title="12、String的区间删除和插入"></a>12、String的区间删除和插入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string &amp;<span class="title">insert</span><span class="params">(<span class="type">int</span> pos, <span class="type">const</span> <span class="type">char</span> *s)</span></span>;</span><br><span class="line"><span class="function">string &amp;<span class="title">insert</span><span class="params">(<span class="type">int</span> pos, <span class="type">const</span> string &amp;s)</span></span>;</span><br><span class="line"><span class="comment">//前两个函数在pos位置插入字符串s</span></span><br><span class="line"><span class="function">string &amp;<span class="title">insert</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> n, <span class="type">char</span> c)</span></span>;  <span class="comment">//在pos位置 插入n个字符c</span></span><br><span class="line"></span><br><span class="line"><span class="function">string &amp;<span class="title">erase</span><span class="params">(<span class="type">int</span> pos=<span class="number">0</span>, <span class="type">int</span> n=npos)</span></span>;    <span class="comment">//删除pos开始的n个字符，返回修改后的字符串</span></span><br></pre></td></tr></table></figure><h2 id="13、string算法相关"><a href="#13、string算法相关" class="headerlink" title="13、string算法相关"></a>13、string算法相关</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s2 = <span class="string">&quot;AAAbbb&quot;</span>;</span><br><span class="line"><span class="built_in">transform</span>(s2.<span class="built_in">begin</span>(), s2.<span class="built_in">end</span>(), s2.<span class="built_in">begin</span>(), toupper);</span><br><span class="line">cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string s3 = <span class="string">&quot;AAAbbb&quot;</span>;</span><br><span class="line"><span class="built_in">transform</span>(s3.<span class="built_in">begin</span>(), s3.<span class="built_in">end</span>(), s3.<span class="built_in">begin</span>(), tolower);</span><br><span class="line">cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL容器-String&quot;&gt;&lt;a href=&quot;#STL容器-String&quot; class=&quot;headerlink&quot; title=&quot;STL容器-String&quot;&gt;&lt;/a&gt;STL容器-String&lt;/h1&gt;&lt;h2 id=&quot;1、String的概念&quot;&gt;&lt;a href=&quot;#1、String的概念&quot; class=&quot;headerlink&quot; title=&quot;1、String的概念&quot;&gt;&lt;/a&gt;1、String的概念&lt;/h2&gt;&lt;p&gt;string是STL的字符串类型，通常用来表示字符串。而在使用string之前，字符串通常是用char&lt;em&gt;表示的。string与char&lt;/em&gt;都可以用来表示字符串，那么二者有什么区别呢？</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>STL理论基础</title>
    <link href="http://example.com/2022/09/02/STL%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/09/02/STL%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-02T09:18:02.000Z</published>
    <updated>2022-09-03T01:05:56.344Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STL-标准模板库-理论基础"><a href="#STL-标准模板库-理论基础" class="headerlink" title="STL(标准模板库)理论基础"></a>STL(标准模板库)理论基础</h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><p>STL（Standard Template Library，标准模板库)是惠普实验室开发的一系列软件的统称。现然主要出现在C++中，但在被引入C++之前该技术就已经存在了很长的一段时间。<span id="more"></span><br>STL的从广义上讲分为三类：algorithm（算法）、container（容器）和iterator（迭代器），容器和算法通过迭代器可以进行无缝地连接。几乎所有的代码都采用了模板类和模板函数的方式，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。在C++标准中，STL被组织为下面的13个头文件：<code>&lt;algorithm&gt;、&lt;deque&gt;、&lt;functional&gt;、&lt;iterator&gt;、&lt;vector&gt;、&lt;list&gt;、&lt;map&gt;、&lt;memory&gt;、&lt;numeric&gt;、&lt;queue&gt;、&lt;set&gt;、&lt;stack&gt; 和&lt;utility&gt;</code>。</p><p><img src="https://pic.imgdb.cn/item/6312a32216f2c2beb1758e6b.jpg"></p><p><strong>STL详细的说六大组件</strong>  </p><ul><li>容器（Container）</li><li>算法（Algorithm）</li><li>迭代器（Iterator）</li><li>仿函数（Function object）</li><li>适配器（Adaptor）</li><li>空间配制器（allocator）</li></ul><p><strong>使用STL的好处</strong>  </p><ol><li>STL是C++的一部分，因此不用额外安装什么，它被内建在你的编译器之内。</li><li>STL的一个重要特点是数据结构和算法的分离。尽管这是个简单的概念，但是这种分离确实使得STL变得非常通用。<br>例如，在STL的vector容器中，可以放入元素、基础数据类型变量、元素的地址；STL的sort()函数可以用来操作vector,list等容器。</li><li>程序员可以不用思考STL具体的实现过程，只要能够熟练使用STL就OK了。这样他们就可以把精力放在程序开发的别的方面。</li><li>STL具有高可重用性，高性能，高移植性，跨平台的优点。<br><strong>高可重用性</strong>：STL中几乎所有的代码都采用了模板类和模版函数的方式实现，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。<br><strong>高性能</strong>：如map可以高效地从十万条记录里面查找出指定的记录，因为map是采用红黑树的变体实现的。(红黑树是平横二叉树的一种)<br><strong>高移植性</strong>：如在项目A上用STL编写的模块，可以直接移植到项目B上。<br><strong>跨平台</strong>：如用windows的Visual Studio编写的代码可以在Mac OS的XCode上直接编译。</li><li>程序员可以不用思考STL具体的实现过程，只要能够熟练使用STL就OK了。这样他们就可以把精力放在程序开发的别的方面。</li><li>了解到STL的这些好处，我们知道STL无疑是最值得C++程序员骄傲的一部分。每一个C＋＋程序员都应该好好学习STL。只有能够熟练使用STL的程序员，才是好的C++程序员。</li><li>总之：招聘工作中，经常遇到C++程序员对STL不是非常了解。大多是有一个大致的映像，而对于在什么情况下应该使用哪个容器和算法都感到比较茫然。STL是C++程序员的一项不可或缺的基本技能，掌握它对提升C++编程大有裨益。</li></ol><h2 id="2、容器"><a href="#2、容器" class="headerlink" title="2、容器"></a>2、容器</h2><p>在实际的开发过程中，数据结构本身的重要性不会逊于操作于数据结构的算法的重要性，当程序中存在着对时间要求很高的部分时，数据结构的选择就显得更加重要。<br>经典的数据结构数量有限，但是我们常常重复着一些为了实现向量、链表等结构而编写的代码，这些代码都十分相似，只是为了适应不同数据的变化而在 细节上有所出入。STL容器就为我们提供了这样的方便，它允许我们重复利用已有的实现构造自己的特定类型下的数据结构，通过设置一些模板，STL容器对最常用的数据结构提供了支持，这些模板的参数允许我们指定容器中元素的数据类型，可以将我们许多重复而乏味的工作简化。<br>容器部分主要由头文 件<code>&lt;vector&gt;,&lt;list&gt;,&lt;deque&gt;,&lt;set&gt;,&lt;map&gt;,&lt;stack&gt; 和&lt;queue&gt;</code>组成。对于常用的一些容器和容器适配器（可以看作由其它容器实现的容器），可以通过下表总结一下它们和相应头文件的对应关系。</p><h3 id="2-1、容器的概念"><a href="#2-1、容器的概念" class="headerlink" title="2.1、容器的概念"></a>2.1、容器的概念</h3><p><em><strong>用来管理一组元素</strong></em></p><p><img src="https://pic.imgdb.cn/item/6312a56816f2c2beb1766a9c.jpg"></p><h3 id="2-2、容器的分类"><a href="#2-2、容器的分类" class="headerlink" title="2.2、容器的分类"></a>2.2、容器的分类</h3><ul><li><strong>序列式容器（Sequence containers）</strong><br>每个元素都有固定位置－－取决于插入时机和地点，和元素值无关。<br>vector、deque、list  </li><li><strong>关联式容器（Associated containers）</strong><br>元素位置取决于特定的排序准则，和插入顺序无关。<br>set、multiset、map、multimap</li></ul><table><thead><tr><th align="left">数据结构</th><th align="left">描述</th><th align="left">实现头文件</th></tr></thead><tbody><tr><td align="left">向量(vector)</td><td align="left">连续存储的元素</td><td align="left"><vector></td></tr><tr><td align="left">列表(list)</td><td align="left">由节点组成的双向链表，每个结点包含着一个元素</td><td align="left"><code>&lt;list&gt;</code></td></tr><tr><td align="left">双队列(deque)</td><td align="left">连续存储的指向不同元素的指针所组成的数组</td><td align="left"><code>&lt;deque&gt;</code></td></tr><tr><td align="left">集合(set)</td><td align="left">由节点组成的红黑树，每个节点都包含着一个元素，节点之间以某种作用于元素对的谓词排列，没有两个不同的元素能够拥有相同的次序</td><td align="left"><code>&lt;set&gt;</code></td></tr><tr><td align="left">多重集合(multiset)</td><td align="left">允许存在两个次序相等的元素的集合</td><td align="left"><code>&lt;set&gt;</code></td></tr><tr><td align="left">栈(stack)</td><td align="left">后进先出的值的排列</td><td align="left"><code>&lt;stack&gt;</code></td></tr><tr><td align="left">队列(queue)</td><td align="left">先进先出的执的排列</td><td align="left"><code>&lt;queue&gt;</code></td></tr><tr><td align="left">优先队列(priority_queue)</td><td align="left">元素的次序是由作用于所存储的值对上的某种谓词决定的的一种队列</td><td align="left"><code>&lt;queue&gt;</code></td></tr><tr><td align="left">映射(map)</td><td align="left">由{键，值}对组成的集合，以某种作用于键对上的谓词排列</td><td align="left"><code>&lt;map&gt;</code></td></tr><tr><td align="left">多重映射(multimap)</td><td align="left">允许键对有相等的次序的映射</td><td align="left"><code>&lt;map&gt;</code></td></tr></tbody></table><h2 id="3、迭代器"><a href="#3、迭代器" class="headerlink" title="3、迭代器"></a>3、迭代器</h2><p>迭代器从作用上来说是最基本的部分，可是理解起来比前两者都要费力一些。软件设计有一个基本原则，所有的问题都可以通过引进一个间接层来简化，这种简化在STL中就是用迭代器来完成的。概括来说，迭代器在STL中用来将算法和容器联系起来，起着一种黏和剂的作用。几乎STL提供的所有算法都是通过迭代器存取元素序列进行工作的，每一个容器都定义了其本身所专有的迭代器，用以存取容器中的元素。<br>迭代器部分主要由头文件<code>&lt;utility&gt;,&lt;iterator&gt;和&lt;memory&gt;</code>组 成。<code>&lt;utility&gt;</code>是一个很小的头文件，它包括了贯穿使用在STL中的几个模板的声明，<iterator>中提供了迭代器 使用的许多方法，而对于<code>&lt;memory&gt;</code>的描述则十分的困难，它以不同寻常的方式为容器中的元素分配存储空间，同时也为某些算法执行期间产生 的临时对象提供机制,<code>&lt;memory&gt;</code>中的主要部分是模板类allocator，它负责产生所有容器中的默认分配器。</p><h2 id="4、算法"><a href="#4、算法" class="headerlink" title="4、算法"></a>4、算法</h2><p>函数库对数据类型的选择对其可重用性起着至关重要的作用。举例来说，一个求方根的函数，在使用浮点数作为其参数类型的情况下的可重用性肯定比使 用整型作为它的参数类性要高。而C++通过模板的机制允许推迟对某些类型的选择，直到真正想使用模板或者说对模板进行特化的时候，STL就利用了这一点提 供了相当多的有用算法。它是在一个有效的框架中完成这些算法的——可以将所有的类型划分为少数的几类，然后就可以在模版的参数中使用一种类型替换掉同一种 类中的其他类型。</p><p>STL提供了大约100个实现算法的模版函数，比如算法for_each将为指定序列中的每一个元素调用指定的函数，stable_sort以你所指定的规则对序列进行稳定性排序等等。这样一来，只要熟悉了STL之后，许多代码可以被大大的化简，只需要通过调用一两个算法模板，就可以完成所需要的功能并大大地提升效率。</p><p>算法部分主要由头文件<code>&lt;algorithm&gt;，&lt;numeric&gt;和&lt;functional&gt;</code>组成。<code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个（尽管它很好理解），它是由一大堆模版函数组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。<code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。<code>&lt;functional&gt;</code>中则定义了一些模板类，用以声明函数对象。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;STL-标准模板库-理论基础&quot;&gt;&lt;a href=&quot;#STL-标准模板库-理论基础&quot; class=&quot;headerlink&quot; title=&quot;STL(标准模板库)理论基础&quot;&gt;&lt;/a&gt;STL(标准模板库)理论基础&lt;/h1&gt;&lt;h2 id=&quot;1、基本概念&quot;&gt;&lt;a href=&quot;#1、基本概念&quot; class=&quot;headerlink&quot; title=&quot;1、基本概念&quot;&gt;&lt;/a&gt;1、基本概念&lt;/h2&gt;&lt;p&gt;STL（Standard Template Library，标准模板库)是惠普实验室开发的一系列软件的统称。现然主要出现在C++中，但在被引入C++之前该技术就已经存在了很长的一段时间。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="STL" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/STL/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++类型转换</title>
    <link href="http://example.com/2022/09/01/C-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://example.com/2022/09/01/C-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2022-09-01T01:50:32.000Z</published>
    <updated>2022-09-01T03:36:46.844Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C-类型转换"><a href="#C-类型转换" class="headerlink" title="C++类型转换"></a>C++类型转换</h1><p>类型转换(cast)是将一种数据类型转换成另一种数据类型。例如，如果将一个整型值赋给一个浮点类型的变量，编译器会暗地里将其转换成浮点类型。<span id="more"></span>转换是非常有用的，但是它也会带来一些问题，比如在转换指针时，我们很可能将其转换成一个比它更大的类型，但这可能会破坏其他的数据。<br>应该小心类型转换，因为转换也就相当于对编译器说：忘记类型检查，把它看做其他的类型。<br>一般情况下，尽量少的去使用类型转换，除非用来解决非常特殊的问题。</p><p><strong>无论什么原因，任何一个程序如果使用很多类型转换都值得怀疑。</strong></p><p>标准c++提供了一个显示的转换的语法，来替代旧的C风格的类型转换。</p><p>使用C风格的强制转换可以把想要的任何东西转换成我们需要的类型。那为什么还需要一个新的C++类型的强制转换呢？<br><strong>新类型的强制转换可以提供更好的控制强制转换过程，允许控制各种不同种类的强制转换。C++风格的强制转换其他的好处是，它们能更清晰的表明它们要干什么。程序员只要扫一眼这样的代码，就能立即知道一个强制转换的目的。</strong></p><h2 id="1、类型转换名称和语法"><a href="#1、类型转换名称和语法" class="headerlink" title="1、类型转换名称和语法"></a>1、类型转换名称和语法</h2><p>C风格的强制类型转换(Type Cast)很简单，不管什么类型的转换统统是：<br><strong>TYPE b &#x3D; (TYPE)a</strong></p><p>C++风格的类型转换提供了4种类型转换操作符来应对不同场合的应用。</p><table><thead><tr><th align="left">操作符</th><th align="left">定义</th></tr></thead><tbody><tr><td align="left">static_cast</td><td align="left">静态类型转换。如int转换成char</td></tr><tr><td align="left">reinterpreter_cast</td><td align="left">重新解释类型</td></tr><tr><td align="left">dynamic_cast</td><td align="left">命名上理解是动态类型转换。如子类和父类之间的多态类型转换</td></tr><tr><td align="left">const_cast</td><td align="left">字面上理解就是去const属性</td></tr></tbody></table><p>4种类型转换的格式：<br><strong>TYPE B &#x3D; static_cast<TYPE> (a)</strong></p><h2 id="2、类型转换一般性介绍"><a href="#2、类型转换一般性介绍" class="headerlink" title="2、类型转换一般性介绍"></a>2、类型转换一般性介绍</h2><ol><li>static_cast&lt;&gt;()静态类型转换，编译的时c++编译器会做类型检查；基本类型能转换但是不能转换指针类型</li><li>若不同类型之间，进行强制类型转换，用reinterpret_cast&lt;&gt;() 进行重新解释</li><li>一般性结论：<br>C语言中能隐式类型转换的，在c++中可用 static_cast&lt;&gt;()进行类型转换。因C++编译器在编译检查一般都能通过；C语言中不能隐式类型转换的，在c++中可以用 reinterpret_cast&lt;&gt;() 进行强行类型解释。总结：static_cast&lt;&gt;()和reinterpret_cast&lt;&gt;() 基本上把C语言中的强制类型转换给覆盖<br>reinterpret_cast&lt;&gt;()很难保证移植性。</li><li>dynamic_cast&lt;&gt;()，动态类型转换，安全的基类和子类之间转换；运行时类型检查</li><li>const_cast&lt;&gt;()，去除变量的只读属性</li></ol><p></p><h2 id="3、静态转换-static-cast"><a href="#3、静态转换-static-cast" class="headerlink" title="3、静态转换(static_cast)"></a>3、静态转换(static_cast)</h2><ul><li>用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。<ul><li>进行上行转换（把派生类的指针或引用转换成基类表示）是安全的；</li><li>进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。</li></ul></li><li><strong>用于基本数据类型之间的转换</strong>，如把int转换成char，把char转换成int。这种转换的安全性也要开发人员来保证。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="keyword">public</span> Animal&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础数据类型转换</span></span><br><span class="line"><span class="type">void</span> test01 &#123;</span><br><span class="line">    <span class="type">double</span> dPi = <span class="number">3.1415926</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1静态的类型转换: 在编译的时 进行基本类型的转换 能替代c风格的类型转换 可以进行一部分检查</span></span><br><span class="line"><span class="type">int</span> num1 = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt; (dPi);  <span class="comment">//c++的新式的类型转换运算符  </span></span><br><span class="line"><span class="type">int</span> num2 = (<span class="type">int</span>)dPi;<span class="comment">//c语言的 旧式类型转换 </span></span><br><span class="line"><span class="type">int</span> num3 = dPi;<span class="comment">//隐式类型转换</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num1:&quot;</span> &lt;&lt; num1 &lt;&lt; <span class="string">&quot; num2:&quot;</span> &lt;&lt; num2 &lt;&lt; <span class="string">&quot; num3:&quot;</span> &lt;&lt; num3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *p1 = (<span class="type">char</span>*)<span class="string">&quot;hello world&quot;</span> ;</span><br><span class="line"><span class="type">int</span> *p2 = <span class="literal">NULL</span>;</span><br><span class="line">p2 = (<span class="type">int</span> *)p1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 基本类型能转换 但是不能转换指针类型</span></span><br><span class="line"><span class="comment">//p2 = static_cast&lt;int *&gt; (p1); //“static_cast”: 无法从“char *”转换为“int *”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 可以使用  reinterpret_cast 进行重新解释 </span></span><br><span class="line">p2 = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span> *&gt; (p1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1 &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2 &quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 一般性的结论：c语言中能隐式类型转换的在c++中可以用 static_cast&lt;&gt;() 进行类型转换  </span></span><br><span class="line">    <span class="comment">//C++编译器在编译检查一般都能通过</span></span><br><span class="line"><span class="comment">//c语言中不能隐式类型转换的,在c++中可以用 reinterpret_cast&lt;&gt;() 进行强行类型解释 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承关系指针相互转换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 继承关系指针转换</span></span><br><span class="line">    Animal* animal01 = <span class="literal">NULL</span>;</span><br><span class="line">Dog* dog01 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 子类指针转成父类指针,安全</span></span><br><span class="line">Animal* animal02 = <span class="built_in">static_cast</span>&lt;Animal*&gt;(dog01);</span><br><span class="line"><span class="comment">// 父类指针转成子类指针，不安全</span></span><br><span class="line">Dog* dog02 = <span class="built_in">static_cast</span>&lt;Dog*&gt;(animal01);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承关系引用相互转化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Animal ani_ref;</span><br><span class="line">Dog dog_ref;</span><br><span class="line"><span class="comment">// 继承关系指针转换</span></span><br><span class="line">Animal&amp; animal01 = ani_ref;</span><br><span class="line">Dog&amp; dog01 = dog_ref;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类指针转成父类指针,安全</span></span><br><span class="line">Animal&amp; animal02 = <span class="built_in">static_cast</span>&lt;Animal&amp;&gt;(dog01);</span><br><span class="line"><span class="comment">// 父类指针转成子类指针，不安全</span></span><br><span class="line">Dog&amp; dog02 = <span class="built_in">static_cast</span>&lt;Dog&amp;&gt;(animal01);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无继承关系指针转化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Animal* animal01 = <span class="literal">NULL</span>;</span><br><span class="line">Other* other01 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换失败</span></span><br><span class="line"><span class="comment">//Animal* animal02 = static_cast&lt;Animal*&gt;(other01);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、动态转换-dynamic-cast"><a href="#4、动态转换-dynamic-cast" class="headerlink" title="4、动态转换(dynamic_cast)"></a>4、动态转换(dynamic_cast)</h2><ul><li>dynamic_cast主要用于类层次间的上行转换和下行转换；</li><li>在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的；</li><li>在进行下行转换时，dynamic_cast具有类型检查的功能，比static_cast更安全。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ShowName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal&#123;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ShowName</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;I am a dog!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我是其他类!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通类型转换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 不支持基础数据类型</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//double a = dynamic_cast&lt;double&gt;(a);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承关系指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">Animal* animal01 = <span class="literal">NULL</span>;</span><br><span class="line">Dog* dog01 = <span class="keyword">new</span> Dog;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类指针转换成父类指针 可以</span></span><br><span class="line">Animal* animal02 = <span class="built_in">dynamic_cast</span>&lt;Animal*&gt;(dog01);</span><br><span class="line">animal02-&gt;<span class="built_in">ShowName</span>();</span><br><span class="line"><span class="comment">// 父类指针转换成子类指针 不可以</span></span><br><span class="line">Dog* dog02 = <span class="built_in">dynamic_cast</span>&lt;Dog*&gt;(animal01);</span><br><span class="line">    <span class="keyword">if</span> (dog02 != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">dog02-&gt;<span class="built_in">ShowName</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;nullptr...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承关系引用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">Dog dog_ref;</span><br><span class="line">Dog&amp; dog01 = dog_ref;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类引用转换成父类引用 可以</span></span><br><span class="line">Animal&amp; animal02 = <span class="built_in">dynamic_cast</span>&lt;Animal&amp;&gt;(dog01);</span><br><span class="line">animal02.<span class="built_in">ShowName</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无继承关系指针转换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">Animal* animal01 = <span class="literal">NULL</span>;</span><br><span class="line">Other* other = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可以</span></span><br><span class="line"><span class="comment">//Animal* animal02 = dynamic_cast&lt;Animal*&gt;(other);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、常量转换-const-cast"><a href="#5、常量转换-const-cast" class="headerlink" title="5、常量转换(const_cast)"></a>5、常量转换(const_cast)</h2><p>该运算符用来修改类型的const属性。  </p><ul><li>常量指针被转化成非常量指针，并且仍然指向原来的对象；</li><li>常量引用被转换成非常量引用，并且仍然指向原来的对象；</li></ul><p><strong>注意:不能直接对非指针和非引用的变量使用const_cast操作符去直接移除它的const。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量指针转换成非常量指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span>* np = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(p);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* pp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* npp = <span class="built_in">const_cast</span>&lt;<span class="type">const</span> <span class="type">int</span>*&gt;(pp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能对非指针或非引用进行转换</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;  </span><br><span class="line"><span class="comment">//int b = const_cast&lt;int&gt;(a); </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常量引用转换成非常量引用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp; refNum = num;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; refNum2 = <span class="built_in">const_cast</span>&lt;<span class="type">const</span> <span class="type">int</span>&amp;&gt;(refNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、重新解释转换-reinterpret-cast"><a href="#6、重新解释转换-reinterpret-cast" class="headerlink" title="6、重新解释转换(reinterpret_cast)"></a>6、重新解释转换(reinterpret_cast)</h2><p>这是最不安全的一种转换机制，最有可能出问题。</p><p>主要用于将一种数据类型从一种类型转换为另一种类型。它可以将一个指针转换成一个整数，也可以将一个整数转换成一个指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="keyword">public</span> Animal&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Animal *base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把base转换成其他非动物相关的 err</span></span><br><span class="line"><span class="comment">//Other *other= static_cast&lt;Other *&gt; (base);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reinterpret_cast //可以强制类型转换</span></span><br><span class="line">Other *other2= <span class="built_in">reinterpret_cast</span>&lt;Other *&gt; (base);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><p><em><strong>结论1：程序员要清除的知道: 要转的变量，类型转换前是什么类型，类型转换后是什么类型。转换后有什么后果。</strong></em></p><p><em><strong>结论2：一般情况下，不建议进行类型转换；避免进行类型转换。</strong></em></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;C-类型转换&quot;&gt;&lt;a href=&quot;#C-类型转换&quot; class=&quot;headerlink&quot; title=&quot;C++类型转换&quot;&gt;&lt;/a&gt;C++类型转换&lt;/h1&gt;&lt;p&gt;类型转换(cast)是将一种数据类型转换成另一种数据类型。例如，如果将一个整型值赋给一个浮点类型的变量，编译器会暗地里将其转换成浮点类型。</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="C++" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++模板</title>
    <link href="http://example.com/2022/09/01/C-%E6%A8%A1%E6%9D%BF/"/>
    <id>http://example.com/2022/09/01/C-%E6%A8%A1%E6%9D%BF/</id>
    <published>2022-09-01T01:47:28.000Z</published>
    <updated>2022-09-02T01:25:37.334Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C-函数模板和类模板"><a href="#C-函数模板和类模板" class="headerlink" title="C++函数模板和类模板"></a>C++函数模板和类模板</h1><h2 id="1、模板概论"><a href="#1、模板概论" class="headerlink" title="1、模板概论"></a>1、模板概论</h2><p>C++提供了函数模板(function template)。<strong>所谓函数模板，实际上是建立一个通用函数，其函数类型和形参类型不具体指定，用一个虚拟的类型来代表。这个通用函数就称为函数模板。</strong><span id="more"></span>凡是函数体相同的函数都可以用这个模板来代替，不必定义多个函数，只需在模板中定义一次即可。在调用函数时系统会根据实参的类型来取代模板中的虚拟类型，从而实现了不同函数的功能。</p><p><img src="https://pic.imgdb.cn/item/63105f7416f2c2beb145d439.jpg"></p><p>1）C++提供两种模板机制：函数模板、类模板；<br>2）类属 —— 类型参数化，又称参数模板，使得程序（算法）可以从逻辑功能上抽象，把被处理的对象（数据）类型作为参数传递。  </p><p>总结：</p><ul><li>模板把函数或类要处理的数据类型参数化，表现为参数的多态性，称为类属。</li><li>模板用于表达逻辑结构相同，但具体数据元素类型不同的数据对象的通用行为。</li></ul><h2 id="2、函数模板"><a href="#2、函数模板" class="headerlink" title="2、函数模板"></a>2、函数模板</h2><h3 id="2-1、什么是函数模板"><a href="#2-1、什么是函数模板" class="headerlink" title="2.1、什么是函数模板"></a>2.1、什么是函数模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：写n个函数，交换char类型、int类型、double类型变量的值。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void myswap(int &amp;a, int &amp;b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int t = a;</span></span><br><span class="line"><span class="comment">a = b;</span></span><br><span class="line"><span class="comment">b = t;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void myswap(char &amp;a, char &amp;b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">char t = a;</span></span><br><span class="line"><span class="comment">a = b;</span></span><br><span class="line"><span class="comment">b = t;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//template 关键字告诉C++编译器 我要开始泛型了.你不要随便报错  </span></span><br><span class="line"><span class="comment">//数据类型T 参数化数据类型</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myswap</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T t;</span><br><span class="line">t = a;</span><br><span class="line">a = b;</span><br><span class="line">b = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//char a = &#x27;c&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  x = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">myswap</span>(x, y);        <span class="comment">//自动数据类型 推导的方式 </span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> a = <span class="number">2.0</span>;</span><br><span class="line"><span class="type">float</span> b = <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">myswap</span>(a, b);        <span class="comment">//自动数据类型 推导的方式 </span></span><br><span class="line"><span class="built_in">myswap</span>&lt;<span class="type">float</span>&gt;(a, b); <span class="comment">//显示类型调用 </span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用模板是为了实现泛型，可以减轻编程的工作量，增强函数的重用性。</p><h3 id="2-2、函数模板语法"><a href="#2-2、函数模板语法" class="headerlink" title="2.2、函数模板语法"></a>2.2、函数模板语法</h3><p>函数模板定义形式：<br><strong>template &lt; 类型形式参数表 &gt;</strong>  </p><p>类型形式参数的形式为：<br><strong>typename T1 ,  typename T2 , …… , typename Tn  或  class T1 ,  class T2 , …… , class Tn</strong></p><p><img src="https://pic.imgdb.cn/item/6310615a16f2c2beb1476617.jpg"></p><p>函数模板调用： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">myswap</span>&lt;<span class="type">float</span>&gt;(a, b);<span class="comment">//显示类型调用</span></span><br><span class="line"><span class="built_in">myswap</span>(a, b);     <span class="comment">//自动数据类型推导 </span></span><br></pre></td></tr></table></figure><p>例如：使用函数模板实现对char和int类型数组进行排序？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sortArray</span><span class="params">(T *a, T2 num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T tmp ;</span><br><span class="line"><span class="type">int</span> i, j ;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=i+<span class="number">1</span>; j&lt;num; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">tmp = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pirntArray</span><span class="params">(T *a, <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;ddadeeettttt&quot;</span>;</span><br><span class="line">num = <span class="built_in">strlen</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;排序之前\n&quot;</span>);</span><br><span class="line"><span class="built_in">pirntArray</span>&lt;<span class="type">char</span>&gt;(a, num);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sortArray</span>&lt;<span class="type">char</span>, <span class="type">int</span>&gt;(a, num); <span class="comment">//显示类型调用 模板函数 &lt;&gt;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;排序之后\n&quot;</span>);</span><br><span class="line"><span class="built_in">pirntArray</span>&lt;<span class="type">char</span>&gt;(a, num);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、函数模板和模板函数"><a href="#2-3、函数模板和模板函数" class="headerlink" title="2.3、函数模板和模板函数"></a>2.3、函数模板和模板函数</h3><p><img src="https://pic.imgdb.cn/item/631061c216f2c2beb147bfbb.jpg"></p><h3 id="2-4、函数模板和普通函数区别"><a href="#2-4、函数模板和普通函数区别" class="headerlink" title="2.4、函数模板和普通函数区别"></a>2.4、函数模板和普通函数区别</h3><ul><li>函数模板不允许自动类型转化</li><li>普通函数能够进行自动类型转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">MyPlus</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">T ret = a + b;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MyPlus</span><span class="params">(<span class="type">int</span> a,<span class="type">char</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ret = a + b;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> b = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数模板，严格匹配类型</span></span><br><span class="line"><span class="built_in">MyPlus</span>(a, a);</span><br><span class="line"><span class="built_in">MyPlus</span>(b, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用普通函数</span></span><br><span class="line"><span class="built_in">MyPlus</span>(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用普通函数  普通函数可以隐式类型转换</span></span><br><span class="line"><span class="built_in">MyPlus</span>(b, a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结论：</span></span><br><span class="line"><span class="comment">//函数模板不允许自动类型转换，必须严格匹配类型</span></span><br><span class="line"><span class="comment">//普通函数可以进行自动类型转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5、函数模板和普通函数在一起调用规则"><a href="#2-5、函数模板和普通函数在一起调用规则" class="headerlink" title="2.5、函数模板和普通函数在一起调用规则"></a>2.5、函数模板和普通函数在一起调用规则</h3><ul><li>函数模板可以像普通函数一样被重载</li><li>C++编译器优先考虑普通函数</li><li>如果函数模板可以产生一个更好的匹配，那么选择模板</li><li>可以通过空模板实参列表的语法限定编译器只通过模板匹配</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;int Max(int a, int b)&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;T Max(T a, T b)&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(T a, T b, T c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;T Max(T a, T b, T c)&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Max</span>(<span class="built_in">Max</span>(a, b), c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">Max</span>(a, b)&lt;&lt;endl;      <span class="comment">//当函数模板和普通函数都符合调用时,优先选择普通函数</span></span><br><span class="line">cout&lt;&lt;Max&lt;&gt;(a, b)&lt;&lt;endl;    <span class="comment">//若显示使用函数模板,则使用&lt;&gt; 类型列表</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">Max</span>(<span class="number">3.0</span>, <span class="number">4.0</span>)&lt;&lt;endl;  <span class="comment">//如果 函数模板产生更好的匹配 使用函数模板</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">Max</span>(<span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>)&lt;&lt;endl; <span class="comment">//重载</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">Max</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">100</span>)&lt;&lt;endl;  <span class="comment">//调用普通函数 可以隐式类型转换 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6、函数模板的局限性"><a href="#2-6、函数模板的局限性" class="headerlink" title="2.6、函数模板的局限性"></a>2.6、函数模板的局限性</h3><p>假设有如下模板函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123; … &#125;</span><br></pre></td></tr></table></figure><p>如果代码实现时定义了赋值操作 a &#x3D; b，但是T为数组，这种假设就不成立了。同样，如果里面的语句为判断语句 if(a&gt;b),但T如果是结构体，该假设也不成立，另外如果是传入的数组，数组名为地址，因此它比较的是地址，而这也不是我们所希望的操作。</p><p>总之，编写的模板函数很可能无法处理某些类型，另一方面，有时候通用化是有意义的，但C++语法不允许这样做。<strong>为了解决这种问题，可以提供模板的重载，为这些特定的类型提供具体化的模板。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">&#125;</span><br><span class="line">string mName;</span><br><span class="line"><span class="type">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通交换函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(T &amp;a,T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp = a;</span><br><span class="line">a = b; </span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三代具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型</span></span><br><span class="line"><span class="comment">// 具体化优先于常规模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;<span class="type">void</span>  <span class="built_in">mySwap</span>&lt;Person&gt;(Person &amp;p1, Person &amp;p2)</span><br><span class="line">&#123;</span><br><span class="line">string nameTemp;</span><br><span class="line"><span class="type">int</span> ageTemp;</span><br><span class="line"></span><br><span class="line">nameTemp = p1.mName;</span><br><span class="line">p1.mName = p2.mName;</span><br><span class="line">p2.mName = nameTemp;</span><br><span class="line"></span><br><span class="line">ageTemp = p1.mAge;</span><br><span class="line">p1.mAge = p2.mAge;</span><br><span class="line">p2.mAge = ageTemp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">P1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">P2</span><span class="params">(<span class="string">&quot;Jerry&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;P1 Name = &quot;</span> &lt;&lt; P1.mName &lt;&lt; <span class="string">&quot; P1 Age = &quot;</span> &lt;&lt; P1.mAge &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;P2 Name = &quot;</span> &lt;&lt; P2.mName &lt;&lt; <span class="string">&quot; P2 Age = &quot;</span> &lt;&lt; P2.mAge &lt;&lt; endl;</span><br><span class="line"><span class="built_in">mySwap</span>(P1, P2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;P1 Name = &quot;</span> &lt;&lt; P1.mName &lt;&lt; <span class="string">&quot; P1 Age = &quot;</span> &lt;&lt; P1.mAge &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;P2 Name = &quot;</span> &lt;&lt; P2.mName &lt;&lt; <span class="string">&quot; P2 Age = &quot;</span> &lt;&lt; P2.mAge &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、类模板"><a href="#3、类模板" class="headerlink" title="3、类模板"></a>3、类模板</h2><h3 id="3-1、类模板基本概念"><a href="#3-1、类模板基本概念" class="headerlink" title="3.1、类模板基本概念"></a>3.1、类模板基本概念</h3><p>类模板与函数模板的定义和使用类似，我们已经进行了介绍。 有时，有两个或多个类，其功能是相同的，仅仅是数据类型不同，如下面语句声明了一个类：</p><p><img src="https://pic.imgdb.cn/item/6310786816f2c2beb159130c.jpg"></p><ul><li>类模板用于实现类所需数据的类型参数化 </li><li>类模板在表示如数组、表、图等数据结构显得特别重要，这些数据结构的表示和算法不受所包含的元素类型的影响</li></ul><h3 id="3-2、单个类模板语法"><a href="#3-2、单个类模板语法" class="headerlink" title="3.2、单个类模板语法"></a>3.2、单个类模板语法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的类型参数化 抽象的类</span></span><br><span class="line"><span class="comment">//单个类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(T t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;t = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T &amp;<span class="title">getT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T t;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//模板了中如果使用了构造函数,则遵守以前的类的构造函数的调用规则</span></span><br><span class="line"><span class="function">A&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">100</span>)</span></span>; </span><br><span class="line">a.<span class="built_in">getT</span>();</span><br><span class="line"><span class="built_in">printAA</span>(a);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、继承中的类模板语法"><a href="#3-3、继承中的类模板语法" class="headerlink" title="3.3、继承中的类模板语法"></a>3.3、继承中的类模板语法</h3><p><img src="https://pic.imgdb.cn/item/631079c216f2c2beb15a0ded.jpg"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结论: 子类从模板类继承的时候,需要让编译器知道 父类的数据类型具体是什么(数据类型的本质:固定大小内存块的别名)A&lt;int&gt; </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A&lt;<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> i) : <span class="built_in">A</span>&lt;<span class="type">int</span>&gt;(i)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;A:&quot;</span>&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板与上继承</span></span><br><span class="line"><span class="comment">// 怎么样从基类继承  </span></span><br><span class="line"><span class="comment">// 若基类只有一个带参数的构造函数,子类是如何启动父类的构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pintBB</span><span class="params">(B &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b.<span class="built_in">printB</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printAA</span><span class="params">(A&lt;<span class="type">int</span>&gt; &amp;a)</span>  <span class="comment">// 类模板做函数参数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line">a.<span class="built_in">getT</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">A&lt;<span class="type">int</span>&gt;  <span class="title">a</span><span class="params">(<span class="number">100</span>)</span></span>; <span class="comment">// 模板了中如果使用了构造函数,则遵守以前的类的构造函数的调用规则 </span></span><br><span class="line">a.<span class="built_in">getT</span>();</span><br><span class="line"><span class="built_in">printAA</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">b.<span class="built_in">printB</span>();</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;hello...&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、类模板语法知识体系梳理"><a href="#3-4、类模板语法知识体系梳理" class="headerlink" title="3.4、类模板语法知识体系梳理"></a>3.4、类模板语法知识体系梳理</h3><h4 id="3-4-1、总结"><a href="#3-4-1、总结" class="headerlink" title="3.4.1、总结"></a>3.4.1、总结</h4><p>归纳后，可以这样声明和使用类模板：</p><ol><li>先写出一个实际的类。由于其语义明确，含义清楚，一般不会出错。</li><li>将此类中准备改变的类型名(如int要改变为float或char)改用一个自己指定的虚拟类型名(如上例中的numtype)。</li><li>在类声明前面加入一行，格式为：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> 虚拟类型参数&gt;</span><br></pre></td></tr></table></figure>如：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">numtype</span>&gt; <span class="comment">//注意本行末尾无分号</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span></span><br><span class="line">&#123;…&#125;; <span class="comment">// 类体</span></span><br></pre></td></tr></table></figure></li><li>用类模板定义对象时用以下形式：<br> <strong>类模板名&lt;实际类型名&gt; 对象名;</strong><br> <strong>类模板名&lt;实际类型名&gt; 对象名(实参表列);</strong><br>如：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Compare&lt;<span class="type">int</span>&gt; cmp;  </span><br><span class="line"><span class="function">Compare&lt;<span class="type">int</span>&gt; <span class="title">cmp</span><span class="params">(<span class="number">3</span>,<span class="number">7</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li>如果在类模板外定义成员函数，应写成类模板形式：<br><strong>template &lt;class 虚拟类型参数&gt;</strong><br><strong>函数类型 类模板名&lt;虚拟类型参数&gt;::成员函数名(函数形参表列) {…}</strong></li></ol><p>关于类模板的几点说明：</p><ol><li>类模板的类型参数可以有一个或多个，每个类型前面都必须加class，如：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>,<span class="keyword">class</span> <span class="title class_">T2</span>&gt;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">someclass</span>  </span><br><span class="line">&#123;…&#125;;  </span><br></pre></td></tr></table></figure>在定义对象时分别代入实际的类型名，如：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">someclass&lt;<span class="type">int</span>,<span class="type">double</span>&gt; obj;</span><br></pre></td></tr></table></figure></li><li>和使用类一样，使用类模板时要注意其作用域，只能在其有效作用域内用它定义对象。</li><li>模板可以有层次，一个类模板可以作为基类，派生出派生模板类。</li></ol><h3 id="3-5、类模板中的static关键字"><a href="#3-5、类模板中的static关键字" class="headerlink" title="3.5、类模板中的static关键字"></a>3.5、类模板中的static关键字</h3><ul><li>从类模板实例化的每个模板类有自己的类模板数据成员，该模板类的所有对象共享一个static数据成员</li><li>和非模板类的static数据成员一样，模板类的static数据成员也应该在文件范围定义和初始化</li><li>每个模板类有自己的类模板的static数据成员副本</li></ul><h2 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h2><ul><li>模板是C++类型参数化的多态工具。C++提供函数模板和类模板。</li><li>模板定义以模板说明开始。类属参数必须在模板定义中至少出现一次。</li><li>同一个类属参数可以用于多个模板。</li><li>类属参数可用于函数的参数类型、返回类型和声明函数中的变量。</li><li>模板由编译器根据实际数据类型实例化，生成可执行代码。实例化的函数。模板称为模板函数；实例化的类模板称为模板类。</li><li>函数模板可以用多种方式重载。</li><li>类模板可以在类层次中使用。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;C-函数模板和类模板&quot;&gt;&lt;a href=&quot;#C-函数模板和类模板&quot; class=&quot;headerlink&quot; title=&quot;C++函数模板和类模板&quot;&gt;&lt;/a&gt;C++函数模板和类模板&lt;/h1&gt;&lt;h2 id=&quot;1、模板概论&quot;&gt;&lt;a href=&quot;#1、模板概论&quot; class=&quot;headerlink&quot; title=&quot;1、模板概论&quot;&gt;&lt;/a&gt;1、模板概论&lt;/h2&gt;&lt;p&gt;C++提供了函数模板(function template)。&lt;strong&gt;所谓函数模板，实际上是建立一个通用函数，其函数类型和形参类型不具体指定，用一个虚拟的类型来代表。这个通用函数就称为函数模板。&lt;/strong&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="C++" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
</feed>
